import {
  require_nerdamer_core
} from "./chunk-JAWXHMMZ.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/nerdamer/Algebra.js
var require_Algebra = __commonJS({
  "node_modules/nerdamer/Algebra.js"(exports, module) {
    if (typeof module !== "undefined") {
      nerdamer = require_nerdamer_core();
      require_Calculus();
    }
    var nerdamer;
    (function() {
      "use strict";
      var core = nerdamer.getCore(), _ = core.PARSER, N = core.groups.N, P = core.groups.P, S = core.groups.S, EX = core.groups.EX, FN = core.groups.FN, PL = core.groups.PL, CP = core.groups.CP, CB = core.groups.CB, keys = core.Utils.keys, even = core.Utils.even, variables = core.Utils.variables, format = core.Utils.format, round = core.Utils.round, Frac = core.Frac, isInt = core.Utils.isInt, Symbol2 = core.Symbol, CONST_HASH = core.Settings.CONST_HASH, math = core.Utils.importFunctions(), evaluate = core.Utils.evaluate;
      function Polynomial(symbol, variable, order) {
        if (core.Utils.isSymbol(symbol)) {
          this.parse(symbol);
          this.variable = this.variable || variable;
        } else if (!isNaN(symbol)) {
          order = order || 0;
          if (variable === void 0)
            throw new core.exceptions.InvalidVariableNameError("Polynomial expects a variable name when creating using order");
          this.coeffs = [];
          this.coeffs[order] = symbol;
          this.fill(symbol);
        } else if (typeof symbol === "string") {
          this.parse(_.parse(symbol));
        }
      }
      Polynomial.fromArray = function(arr, variable) {
        if (typeof variable === "undefined")
          throw new core.exceptions.InvalidVariableNameError("A variable name must be specified when creating polynomial from array");
        var p = new Polynomial();
        p.coeffs = arr;
        p.variable = variable;
        return p;
      };
      Polynomial.fit = function(c1, c2, n2, base, p, variable) {
        var terms = new Array(p + 1), t = n2 - c2;
        terms[0] = c2;
        terms[p] = c1;
        t -= c1 * Math.pow(base, p);
        for (var i = p - 1; i > 0; i--) {
          var b = Math.pow(base, i), q = t / b, sign = Math.sign(q);
          var c = sign * Math.floor(Math.abs(q));
          t -= c * b;
          terms[i] = c;
        }
        if (t !== 0)
          return null;
        for (var i = 0; i < terms.length; i++)
          terms[i] = new Frac(terms[i]);
        return Polynomial.fromArray(terms, variable);
      };
      Polynomial.prototype = {
        /**
         * Converts Symbol to Polynomial
         * @param {Symbol} symbol
         * @param {Array} c - a collector array
         * @returns {Polynomial}
         */
        parse: function(symbol, c) {
          this.variable = variables(symbol)[0];
          if (!symbol.isPoly())
            throw core.exceptions.NerdamerTypeError("Polynomial Expected! Received " + core.Utils.text(symbol));
          c = c || [];
          if (!symbol.power.absEquals(1))
            symbol = _.expand(symbol);
          if (symbol.group === core.groups.N) {
            c[0] = symbol.multiplier;
          } else if (symbol.group === core.groups.S) {
            c[symbol.power.toDecimal()] = symbol.multiplier;
          } else {
            for (var x in symbol.symbols) {
              var sub = symbol.symbols[x], p = sub.power;
              if (core.Utils.isSymbol(p))
                throw new core.exceptions.NerdamerTypeError("power cannot be a Symbol");
              p = sub.group === N ? 0 : p.toDecimal();
              if (sub.symbols) {
                this.parse(sub, c);
              } else {
                c[p] = sub.multiplier;
              }
            }
          }
          this.coeffs = c;
          this.fill();
        },
        /**
         * Fills in the holes in a polynomial with zeroes
         * @param {Number} x - The number to fill the holes with
         */
        fill: function(x) {
          x = Number(x) || 0;
          var l = this.coeffs.length;
          for (var i = 0; i < l; i++) {
            if (this.coeffs[i] === void 0) {
              this.coeffs[i] = new Frac(x);
            }
          }
          return this;
        },
        /**
         * Removes higher order zeros or a specific coefficient
         * @returns {Array}
         */
        trim: function() {
          var l = this.coeffs.length;
          while (l--) {
            var c = this.coeffs[l];
            var equalsZero = c.equals(0);
            if (c && equalsZero) {
              if (l === 0)
                break;
              this.coeffs.pop();
            } else
              break;
          }
          return this;
        },
        /*
         * Returns polynomial mod p **currently fails**
         * @param {Number} p
         * @returns {Polynomial}
         */
        modP: function(p) {
          var l = this.coeffs.length;
          for (var i = 0; i < l; i++) {
            var c = this.coeffs[i];
            if (c < 0) {
              var b;
              for (var j = i; j < l; j++) {
                if (this.coeffs[j] > 0) {
                  b = this.coeffs[j];
                  break;
                }
              }
              if (b) {
                for (j; j > i; j--) {
                  this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));
                  this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));
                }
                c = this.coeffs[i];
              }
            }
            var d = c.mod(p);
            var w = c.subtract(d).divide(p);
            if (!w.equals(0)) {
              var up_one = i + 1;
              var next = this.coeffs[up_one] || new Frac(0);
              next = next.add(w);
              this.coeffs[up_one] = new Frac(next);
              this.coeffs[i] = new Frac(d);
            }
          }
          return this;
        },
        /**
         * Adds together 2 polynomials
         * @param {Polynomial} poly
         */
        add: function(poly) {
          var l = Math.max(this.coeffs.length, poly.coeffs.length);
          for (var i = 0; i < l; i++) {
            var a = this.coeffs[i] || new Frac(0), b = poly.coeffs[i] || new Frac(0);
            this.coeffs[i] = a.add(b);
          }
          return this;
        },
        /**
         * Adds together 2 polynomials
         * @param {Polynomial} poly
         */
        subtract: function(poly) {
          var l = Math.max(this.coeffs.length, poly.coeffs.length);
          for (var i = 0; i < l; i++) {
            var a = this.coeffs[i] || new Frac(0), b = poly.coeffs[i] || new Frac(0);
            this.coeffs[i] = a.subtract(b);
          }
          return this;
        },
        divide: function(poly) {
          var variable = this.variable, dividend = core.Utils.arrayClone(this.coeffs), divisor = core.Utils.arrayClone(poly.coeffs), n2 = dividend.length, mp = divisor.length - 1, quotient = [];
          for (var i = 0; i < n2; i++) {
            var p = n2 - (i + 1);
            var d = p - mp;
            var q = dividend[p].divide(divisor[mp]);
            if (d < 0)
              break;
            quotient[d] = q;
            for (var j = 0; j <= mp; j++) {
              dividend[j + d] = dividend[j + d].subtract(divisor[j].multiply(q));
            }
          }
          var p1 = Polynomial.fromArray(dividend, variable || "x").trim(), p2 = Polynomial.fromArray(quotient, variable || "x");
          return [p2, p1];
        },
        multiply: function(poly) {
          var l1 = this.coeffs.length, l2 = poly.coeffs.length, c = [];
          for (var i = 0; i < l1; i++) {
            var x1 = this.coeffs[i];
            for (var j = 0; j < l2; j++) {
              var k = i + j, x2 = poly.coeffs[j], e = c[k] || new Frac(0);
              c[k] = e.add(x1.multiply(x2));
            }
          }
          this.coeffs = c;
          return this;
        },
        /**
         * Checks if a polynomial is zero
         * @returns {Boolean}
         */
        isZero: function() {
          var l = this.coeffs.length;
          for (var i = 0; i < l; i++) {
            var e = this.coeffs[i];
            if (!e.equals(0))
              return false;
          }
          return true;
        },
        /** 
         * Substitutes in a number n into the polynomial p(n)
         * @param {Number} n
         * @returns {Frac}
         */
        sub: function(n2) {
          var sum = new Frac(0), l = this.coeffs.length;
          for (var i = 0; i < l; i++) {
            var t = this.coeffs[i];
            if (!t.equals(0))
              sum = sum.add(t.multiply(new Frac(Math.pow(n2, i))));
          }
          return sum;
        },
        /**
         * Returns a clone of the polynomial
         * @returns {Polynomial}
         */
        clone: function() {
          var p = new Polynomial();
          p.coeffs = this.coeffs;
          p.variable = this.variable;
          return p;
        },
        /**
         * Gets the degree of the polynomial
         * @returns {Number}
         */
        deg: function() {
          this.trim();
          return this.coeffs.length - 1;
        },
        /**
         * Returns a lead coefficient
         * @returns {Frac}
         */
        lc: function() {
          return this.coeffs[this.deg()].clone();
        },
        /**
         * Converts polynomial into a monic polynomial
         * @returns {Polynomial}
         */
        monic: function() {
          var lc = this.lc(), l = this.coeffs.length;
          for (var i = 0; i < l; i++)
            this.coeffs[i] = this.coeffs[i].divide(lc);
          return this;
        },
        /**
         * Returns the GCD of two polynomials
         * @param {Polynomial} poly
         * @returns {Polynomial}
         */
        gcd: function(poly) {
          var mp1 = this.coeffs.length - 1, mp2 = poly.coeffs.length - 1, T;
          if (mp1 < mp2) {
            return poly.gcd(this);
          }
          var a = this;
          while (!poly.isZero()) {
            var t = poly.clone();
            a = a.clone();
            T = a.divide(t);
            poly = T[1];
            a = t;
          }
          var gcd = core.Math2.QGCD.apply(null, a.coeffs);
          if (!gcd.equals(1)) {
            var l = a.coeffs.length;
            for (var i = 0; i < l; i++) {
              a.coeffs[i] = a.coeffs[i].divide(gcd);
            }
          }
          return a;
        },
        /**
         * Differentiates the polynomial
         * @returns {Polynomial}
         */
        diff: function() {
          var new_array = [], l = this.coeffs.length;
          for (var i = 1; i < l; i++)
            new_array.push(this.coeffs[i].multiply(new Frac(i)));
          this.coeffs = new_array;
          return this;
        },
        /**
         * Integrates the polynomial
         * @returns {Polynomial} 
         */
        integrate: function() {
          var new_array = [0], l = this.coeffs.length;
          for (var i = 0; i < l; i++) {
            var c = new Frac(i + 1);
            new_array[c] = this.coeffs[i].divide(c);
          }
          this.coeffs = new_array;
          return this;
        },
        /**
         * Returns the Greatest common factor of the polynomial
         * @param {bool} toPolynomial - true if a polynomial is wanted
         * @returns {Frac|Polynomial}
         */
        gcf: function(toPolynomial) {
          var fnz = function(a) {
            for (var i2 = 0; i2 < a.length; i2++)
              if (!a[i2].equals(0))
                return i2;
          }, ca = [];
          for (var i = 0; i < this.coeffs.length; i++) {
            var c = this.coeffs[i];
            if (!c.equals(0) && ca.indexOf(c) === -1)
              ca.push(c);
          }
          var p = [core.Math2.QGCD.apply(void 0, ca), fnz(this.coeffs)].toDecimal();
          if (toPolynomial) {
            var parr = [];
            parr[p[1] - 1] = p[0];
            p = Polynomial.fromArray(parr, this.variable).fill();
          }
          return p;
        },
        /**
         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2
         * @param {bool} incl_img - Include imaginary numbers 
         */
        quad: function(incl_img) {
          var roots = [];
          if (this.coeffs.length > 3)
            throw new Error("Cannot calculate quadratic order of " + (this.coeffs.length - 1));
          if (this.coeffs.length === 0)
            throw new Error("Polynomial array has no terms");
          var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];
          var dsc = b * b - 4 * a * c;
          if (dsc < 0 && !incl_img)
            return roots;
          else {
            roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);
            roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);
          }
          return roots;
        },
        /**
         * Makes polynomial square free
         * @returns {Array}
         */
        squareFree: function() {
          var a = this.clone(), i = 1, b = a.clone().diff(), c = a.clone().gcd(b), w = a.divide(c)[0];
          var output = Polynomial.fromArray([new Frac(1)], a.variable);
          while (!c.equalsNumber(1)) {
            var y = w.gcd(c);
            var z = w.divide(y)[0];
            if (!z.equalsNumber(1) && i > 1) {
              var t = z.clone();
              for (var j = 1; j < i; j++)
                t.multiply(z.clone());
              z = t;
            }
            output = output.multiply(z);
            i++;
            w = y;
            c = c.divide(y)[0];
          }
          return [output, w, i];
        },
        /**
         * Converts polynomial to Symbol
         * @returns {Symbol}
         */
        toSymbol: function() {
          var l = this.coeffs.length, variable = this.variable;
          if (l === 0)
            return new core.Symbol(0);
          var end = l - 1, str = "";
          for (var i = 0; i < l; i++) {
            var plus = i === end ? "" : "+", e = this.coeffs[i];
            if (!e.equals(0))
              str += e + "*" + variable + "^" + i + plus;
          }
          return _.parse(str);
        },
        /**
         * Checks if polynomial is equal to a number
         * @param {Number} x
         * @returns {Boolean}
         */
        equalsNumber: function(x) {
          this.trim();
          return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);
        },
        toString: function() {
          return this.toSymbol().toString();
        }
      };
      Symbol2.prototype.coeffs = function(c, with_order) {
        if (with_order && !this.isPoly(true))
          _.error("Polynomial expected when requesting coefficients with order");
        c = c || [];
        var s = this.clone().distributeMultiplier();
        if (s.isComposite()) {
          for (var x in s.symbols) {
            var sub = s.symbols[x];
            if (sub.isComposite()) {
              sub.clone().distributeMultiplier().coeffs(c, with_order);
            } else {
              if (with_order)
                c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;
              else {
                c.push(sub.multiplier);
              }
            }
          }
        } else {
          if (with_order)
            c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;
          else {
            if (s.group === CB && s.isImaginary()) {
              var m = new Symbol2(s.multiplier);
              s.each(function(x2) {
                if (x2.isConstant(true) || x2.imaginary)
                  m = _.multiply(m, x2);
              });
              c.push(m);
            } else
              c.push(s.multiplier);
          }
        }
        if (with_order) {
          for (var i = 0; i < c.length; i++)
            if (c[i] === void 0)
              c[i] = new Symbol2(0);
        }
        return c;
      };
      Symbol2.prototype.tBase = function(map) {
        if (typeof map === "undefined")
          throw new Error("Symbol.tBase requires a map object!");
        var terms = [];
        var symbols = this.collectSymbols(null, null, null, true), l = symbols.length;
        for (var i = 0; i < l; i++) {
          var symbol = symbols[i], g = symbol.group, nterm = new MVTerm(symbol.multiplier, [], map);
          if (g === CB) {
            for (var x in symbol.symbols) {
              var sym = symbol.symbols[x];
              nterm.terms[map[x]] = sym.power;
            }
          } else {
            nterm.terms[map[symbol.value]] = symbol.power;
          }
          terms.push(nterm.fill());
          nterm.updateCount();
        }
        return terms;
      };
      Symbol2.prototype.altVar = function(x) {
        var m = this.multiplier.toString(), p = this.power.toString();
        return (m === "1" ? "" : m + "*") + x + (p === "1" ? "" : "^" + p);
      };
      Symbol2.prototype.sameVars = function(symbol) {
        if (!(this.symbols || this.group === symbol.group))
          return false;
        for (var x in this.symbols) {
          var a = this.symbols[x], b = symbol.symbols[x];
          if (!b)
            return false;
          if (a.value !== b.value)
            return false;
        }
        return true;
      };
      Symbol2.prototype.groupTerms = function(x) {
        x = String(x);
        var f, p, egrouped;
        var grouped = [];
        this.each(function(e) {
          if (e.group === PL) {
            egrouped = e.groupTerms(x);
            for (var i = 0; i < egrouped.length; i++) {
              var el = egrouped[i];
              if (el)
                grouped[i] = el;
            }
          } else {
            f = core.Utils.decompose_fn(e, x, true);
            p = f.x.value === x ? Number(f.x.power) : 0;
            grouped[p] = _.add(grouped[p] || new Symbol2(0), f.a);
          }
        });
        return grouped;
      };
      Symbol2.prototype.collectFactors = function() {
        var factors = [];
        if (this.group === CB)
          this.each(function(x) {
            factors.push(x.clone());
          });
        else
          factors.push(this.clone());
        return factors;
      };
      function Factors() {
        this.factors = {};
        this.length = 0;
      }
      ;
      Factors.prototype.getNumberSymbolics = function() {
        var n2 = 0;
        this.each(function(x) {
          if (!x.isConstant(true))
            n2++;
        });
        return n2;
      };
      Factors.prototype.add = function(s) {
        if (s.equals(0))
          return this;
        if (s.equals(-1) && this.length > 0) {
          var fo = core.Utils.firstObject(this.factors, null, true);
          this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());
          delete this.factors[fo.key];
          this.length--;
          return this;
        }
        if (s.group === CB) {
          var factors = this;
          if (!s.multiplier.equals(1))
            factors.add(new Symbol2(s.multiplier));
          s.each(function(x) {
            factors.add(x);
          });
        } else {
          if (this.preAdd)
            s = this.preAdd(s);
          if (this.pFactor)
            s = _.pow(s, new Symbol2(this.pFactor));
          var is_constant = s.isConstant();
          if (is_constant && s.equals(1))
            return this;
          var v = is_constant ? s.value : s.text();
          if (v in this.factors) {
            this.factors[v] = _.multiply(this.factors[v], s);
            if (this.factors[v].equals(1)) {
              delete this.factors[v];
              this.length--;
            }
          } else {
            this.factors[v] = s;
            this.length++;
          }
        }
        return this;
      };
      Factors.prototype.toSymbol = function() {
        var factored = new Symbol2(1);
        var factors = Object.values(this.factors).sort(function(a, b) {
          return a.group > b.group;
        });
        for (var i = 0, l = factors.length; i < l; i++) {
          var f = factors[i];
          var factor = f.power.equals(1) && f.fname !== "" ? _.symfunction(core.PARENTHESIS, [f]) : f;
          factored = _.multiply(factored, factor);
        }
        if (factored.fname === "")
          factored = Symbol2.unwrapPARENS(factored);
        return factored;
      };
      Factors.prototype.merge = function(o) {
        for (var x in o) {
          if (x in this.factors)
            this.factors[x] = _.multiply(this.factors[x], o[x]);
          else
            this.factors[x] = o[x];
        }
        return this;
      };
      Factors.prototype.each = function(f) {
        for (var x in this.factors) {
          var factor = this.factors[x];
          if (factor.fname === core.PARENTHESIS && factor.isLinear())
            factor = factor.args[0];
          f.call(this, factor, x);
        }
        return this;
      };
      Factors.prototype.count = function() {
        return keys(this.factors).length;
      };
      Factors.prototype.clean = function() {
        try {
          var h = core.Settings.CONST_HASH;
          if (this.factors[h].lessThan(0)) {
            if (this.factors[h].equals(-1))
              delete this.factors[h];
            else
              this.factors[h].negate();
            this.each(function(x) {
              x.negate();
            });
          }
        } catch (e) {
        }
        ;
      };
      Factors.prototype.toString = function() {
        return this.toSymbol().toString();
      };
      function MVTerm(coeff, terms, map) {
        this.terms = terms || [];
        this.coeff = coeff;
        this.map = map;
        this.sum = new core.Frac(0);
        this.image = void 0;
      }
      ;
      MVTerm.prototype.updateCount = function() {
        this.count = this.count || 0;
        for (var i = 0; i < this.terms.length; i++) {
          if (!this.terms[i].equals(0))
            this.count++;
        }
        return this;
      };
      MVTerm.prototype.getVars = function() {
        var vars = [];
        for (var i = 0; i < this.terms.length; i++) {
          var term = this.terms[i], rev_map = this.getRevMap();
          if (!term.equals(0))
            vars.push(this.rev_map[i]);
        }
        return vars.join(" ");
      };
      MVTerm.prototype.len = function() {
        if (typeof this.count === "undefined") {
          this.updateCount();
        }
        return this.count;
      };
      MVTerm.prototype.toSymbol = function(rev_map) {
        rev_map = rev_map || this.getRevMap();
        var symbol = new Symbol2(this.coeff);
        for (var i = 0; i < this.terms.length; i++) {
          var v = rev_map[i], t = this.terms[i];
          if (t.equals(0) || v === CONST_HASH)
            continue;
          var mapped = new Symbol2(v);
          mapped.power = t;
          symbol = _.multiply(symbol, mapped);
        }
        return symbol;
      };
      MVTerm.prototype.getRevMap = function() {
        if (this.rev_map)
          return this.rev_map;
        var o = {};
        for (var x in this.map)
          o[this.map[x]] = x;
        this.rev_map = o;
        return o;
      };
      MVTerm.prototype.generateImage = function() {
        this.image = this.terms.join(" ");
        return this;
      }, MVTerm.prototype.getImg = function() {
        if (!this.image)
          this.generateImage();
        return this.image;
      }, MVTerm.prototype.fill = function() {
        var l = this.map.length;
        for (var i = 0; i < l; i++) {
          if (typeof this.terms[i] === "undefined")
            this.terms[i] = new core.Frac(0);
          else {
            this.sum = this.sum.add(this.terms[i]);
          }
        }
        return this;
      };
      MVTerm.prototype.divide = function(mvterm) {
        var c = this.coeff.divide(mvterm.coeff), l = this.terms.length, new_mvterm = new MVTerm(c, [], this.map);
        for (var i = 0; i < l; i++) {
          new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);
          new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);
        }
        return new_mvterm;
      };
      MVTerm.prototype.multiply = function(mvterm) {
        var c = this.coeff.multiply(mvterm.coeff), l = this.terms.length, new_mvterm = new MVTerm(c, [], this.map);
        for (var i = 0; i < l; i++) {
          new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);
          new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);
        }
        return new_mvterm;
      };
      MVTerm.prototype.isZero = function() {
        return this.coeff.equals(0);
      };
      MVTerm.prototype.toString = function() {
        return "{ coeff: " + this.coeff.toString() + ", terms: [" + this.terms.join(",") + "]: sum: " + this.sum.toString() + ", count: " + this.count + "}";
      };
      core.Utils.toMapObj = function(arr) {
        var c = 0, o = {};
        for (var i = 0; i < arr.length; i++) {
          var v = arr[i];
          if (typeof o[v] === "undefined") {
            o[v] = c;
            c++;
          }
        }
        o.length = c;
        return o;
      };
      core.Utils.filledArray = function(v, n2, clss) {
        var a = [];
        while (n2--) {
          a[n2] = clss ? new clss(v) : v;
        }
        return a;
      };
      core.Utils.arrSum = function(arr) {
        var sum = 0, l = arr.length;
        for (var i = 0; i < l; i++)
          sum += arr[i];
        return sum;
      };
      core.Utils.haveIntersection = function(a, b) {
        var t;
        if (b.length > a.length)
          t = b, b = a, a = t;
        return a.some(function(e) {
          return b.indexOf(e) > -1;
        });
      };
      core.Utils.subFunctions = function(symbol, map) {
        map = map || {};
        var subbed = [];
        symbol.each(function(x) {
          if (x.group === FN || x.previousGroup === FN) {
            var val = core.Utils.text(x, "hash"), tvar = map[val];
            if (!tvar) {
              var t = x.fname + keys(map).length;
              map[val] = t;
              subbed.push(x.altVar(t));
            } else
              subbed.push(x.altVar(tvar));
          } else if (x.group === CB || x.group === PL || x.group === CP) {
            subbed.push(core.Utils.subFunctions(x, map));
          } else
            subbed.push(x.text());
        });
        if (symbol.group === CP || symbol.group === PL)
          return symbol.altVar(core.Utils.inBrackets(subbed.join("+")));
        ;
        if (symbol.group === CB)
          return symbol.altVar(core.Utils.inBrackets(subbed.join("*")));
        return symbol.text();
      };
      core.Utils.getFunctionsSubs = function(map) {
        var subs = {};
        for (var x in map)
          subs[map[x]] = _.parse(x);
        return subs;
      };
      var __ = core.Algebra = {
        version: "1.4.6",
        proots: function(symbol, decp) {
          decp = decp || 7;
          var zeros = 0;
          var known_roots = [];
          var get_roots = function(rarr2, powers2, max2) {
            var roots = calcroots(rarr2, powers2, max2).concat(known_roots);
            for (var i2 = 0; i2 < zeros; i2++)
              roots.unshift(0);
            return roots;
          };
          if (symbol instanceof Symbol2 && symbol.isPoly()) {
            symbol.distributeMultiplier();
            if (symbol.group === PL) {
              var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));
              var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();
              symbol = _.expand(_.divide(symbol, lowest_symbol));
              known_roots.push(0);
            }
            if (symbol.group === core.groups.S) {
              return [0];
            } else if (symbol.group === core.groups.PL) {
              var powers = keys(symbol.symbols), minpower = core.Utils.arrayMin(powers), symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + "^" + minpower));
            }
            var variable = keys(symbol.symbols).sort().pop(), sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable], g = sym.group, powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols), rarr = [], max = core.Utils.arrayMax(powers);
            for (var i = 1; i <= max; i++) {
              var c = 0;
              if (powers.indexOf(i + "") !== -1) {
                if (g === S) {
                  c = sym.multiplier;
                } else {
                  c = sym.symbols[i].multiplier;
                }
              }
              rarr.unshift(c);
            }
            rarr.push(symbol.symbols[CONST_HASH].multiplier);
            if (sym.group === S)
              rarr[0] = sym.multiplier;
            return get_roots(rarr, powers, max);
          } else if (core.Utils.isArray(symbol)) {
            var parr = symbol;
            var rarr = [], powers = [], last_power = 0;
            for (var i = 0; i < parr.length; i++) {
              var coeff = parr[i][0], pow = parr[i][1], d = pow - last_power - 1;
              for (var j = 0; j < d; j++)
                rarr.unshift(0);
              rarr.unshift(coeff);
              if (pow !== 0)
                powers.push(pow);
              last_power = pow;
            }
            var max = Math.max.apply(void 0, powers);
            return get_roots(rarr, powers, max);
          } else {
            throw new core.exceptions.NerdamerTypeError("Cannot calculate roots. Symbol must be a polynomial!");
          }
          function calcroots(rarr2, powers2, max2) {
            var MAXDEGREE = 100;
            var p = rarr2.slice(0);
            rarr2.unshift(max2);
            if (max2 > MAXDEGREE) {
              throw new core.exceptions.ValueLimitExceededError("This utility accepts polynomials of degree up to " + MAXDEGREE + ". ");
            }
            var zeroi = [], degreePar = {};
            degreePar.Degree = max2;
            for (i = 0; i < max2; i++) {
              zeroi.push(0);
            }
            var zeror = zeroi.slice(0);
            function QuadSD_ak1(NN, u, v, p2, q, iPar) {
              q[0] = iPar.b = p2[0];
              q[1] = iPar.a = -(u * iPar.b) + p2[1];
              for (var i2 = 2; i2 < NN; i2++) {
                q[i2] = -(u * iPar.a + v * iPar.b) + p2[i2];
                iPar.b = iPar.a;
                iPar.a = q[i2];
              }
              return;
            }
            function calcSC_ak1(DBL_EPSILON, N2, a, b, iPar, K, u, v, qk) {
              var sdPar = new Object(), dumFlag = 3;
              sdPar.b = sdPar.a = 0;
              QuadSD_ak1(N2, u, v, K, qk, sdPar);
              iPar.c = sdPar.a;
              iPar.d = sdPar.b;
              if (Math.abs(iPar.c) <= 100 * DBL_EPSILON * Math.abs(K[N2 - 1])) {
                if (Math.abs(iPar.d) <= 100 * DBL_EPSILON * Math.abs(K[N2 - 2]))
                  return dumFlag;
              }
              iPar.h = v * b;
              if (Math.abs(iPar.d) >= Math.abs(iPar.c)) {
                dumFlag = 2;
                iPar.e = a / iPar.d;
                iPar.f = iPar.c / iPar.d;
                iPar.g = u * b;
                iPar.a3 = iPar.e * (iPar.g + a) + iPar.h * (b / iPar.d);
                iPar.a1 = -a + iPar.f * b;
                iPar.a7 = iPar.h + (iPar.f + u) * a;
              } else {
                dumFlag = 1;
                iPar.e = a / iPar.c;
                iPar.f = iPar.d / iPar.c;
                iPar.g = iPar.e * u;
                iPar.a3 = iPar.e * a + (iPar.g + iPar.h / iPar.c) * b;
                iPar.a1 = -(a * (iPar.d / iPar.c)) + b;
                iPar.a7 = iPar.g * iPar.d + iPar.h * iPar.f + a;
              }
              return dumFlag;
            }
            function nextK_ak1(DBL_EPSILON, N2, tFlag, a, b, iPar, K, qk, qp) {
              var temp;
              if (tFlag == 3) {
                K[1] = K[0] = 0;
                for (var i2 = 2; i2 < N2; i2++) {
                  K[i2] = qk[i2 - 2];
                }
                return;
              }
              temp = tFlag == 1 ? b : a;
              if (Math.abs(iPar.a1) > 10 * DBL_EPSILON * Math.abs(temp)) {
                iPar.a7 /= iPar.a1;
                iPar.a3 /= iPar.a1;
                K[0] = qp[0];
                K[1] = -(qp[0] * iPar.a7) + qp[1];
                for (var i2 = 2; i2 < N2; i2++)
                  K[i2] = -(qp[i2 - 1] * iPar.a7) + qk[i2 - 2] * iPar.a3 + qp[i2];
              } else {
                K[0] = 0;
                K[1] = -(qp[0] * iPar.a7);
                for (var i2 = 2; i2 < N2; i2++) {
                  K[i2] = -(qp[i2 - 1] * iPar.a7) + qk[i2 - 2] * iPar.a3;
                }
              }
              return;
            }
            function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c2, d2, f, g2, h, u, v, K, N2, p2) {
              var a4, a5, b1, b2, c1, c22, c3, c4, temp;
              iPar.b = iPar.a = 0;
              if (tFlag != 3) {
                if (tFlag != 2) {
                  a4 = a + u * b + h * f;
                  a5 = c2 + (u + v * f) * d2;
                } else {
                  a4 = (a + g2) * f + h;
                  a5 = (f + u) * c2 + v * d2;
                }
                b1 = -(K[N2 - 1] / p2[N2]);
                b2 = -(K[N2 - 2] + b1 * p2[N2 - 1]) / p2[N2];
                c1 = v * b2 * a1;
                c22 = b1 * a7;
                c3 = b1 * b1 * a3;
                c4 = -(c22 + c3) + c1;
                temp = -c4 + a5 + b1 * a4;
                if (temp != 0) {
                  iPar.a = -((u * (c3 + c22) + v * (b1 * a1 + b2 * a7)) / temp) + u;
                  iPar.b = v * (1 + c4 / temp);
                }
              }
              return;
            }
            function Quad_ak1(a, b1, c2, iPar) {
              var b, d2, e;
              iPar.sr = iPar.si = iPar.lr = iPar.li = 0;
              if (a == 0) {
                iPar.sr = b1 != 0 ? -(c2 / b1) : iPar.sr;
                return;
              }
              if (c2 == 0) {
                iPar.lr = -(b1 / a);
                return;
              }
              b = b1 / 2;
              if (Math.abs(b) < Math.abs(c2)) {
                e = c2 >= 0 ? a : -a;
                e = -e + b * (b / Math.abs(c2));
                d2 = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c2));
              } else {
                e = -(a / b * (c2 / b)) + 1;
                d2 = Math.sqrt(Math.abs(e)) * Math.abs(b);
              }
              if (e >= 0) {
                d2 = b >= 0 ? -d2 : d2;
                iPar.lr = (-b + d2) / a;
                iPar.sr = iPar.lr != 0 ? c2 / iPar.lr / a : iPar.sr;
              } else {
                iPar.lr = iPar.sr = -(b / a);
                iPar.si = Math.abs(d2 / a);
                iPar.li = -iPar.si;
              }
              return;
            }
            function QuadIT_ak1(DBL_EPSILON, N2, iPar, uu, vv, qp, NN, sdPar, p2, qk, calcPar, K) {
              var qPar = new Object(), ee, mp, omp, relstp, t, u, ui, v, vi, zm, i2, j2 = 0, tFlag, triedFlag = 0;
              iPar.NZ = 0;
              u = uu;
              v = vv;
              do {
                qPar.li = qPar.lr = qPar.si = qPar.sr = 0;
                Quad_ak1(1, u, v, qPar);
                iPar.szr = qPar.sr;
                iPar.szi = qPar.si;
                iPar.lzr = qPar.lr;
                iPar.lzi = qPar.li;
                if (Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr))
                  break;
                QuadSD_ak1(NN, u, v, p2, qp, sdPar);
                mp = Math.abs(-(iPar.szr * sdPar.b) + sdPar.a) + Math.abs(iPar.szi * sdPar.b);
                zm = Math.sqrt(Math.abs(v));
                ee = 2 * Math.abs(qp[0]);
                t = -(iPar.szr * sdPar.b);
                for (i2 = 1; i2 < N2; i2++) {
                  ee = ee * zm + Math.abs(qp[i2]);
                }
                ee = ee * zm + Math.abs(t + sdPar.a);
                ee = (9 * ee + 2 * Math.abs(t) - 7 * (Math.abs(sdPar.a + t) + zm * Math.abs(sdPar.b))) * DBL_EPSILON;
                if (mp <= 20 * ee) {
                  iPar.NZ = 2;
                  break;
                }
                j2++;
                if (j2 > 20)
                  break;
                if (j2 >= 2) {
                  if (relstp <= 0.01 && mp >= omp && !triedFlag) {
                    relstp = relstp < DBL_EPSILON ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp);
                    u -= u * relstp;
                    v += v * relstp;
                    QuadSD_ak1(NN, u, v, p2, qp, sdPar);
                    for (i2 = 0; i2 < 5; i2++) {
                      tFlag = calcSC_ak1(DBL_EPSILON, N2, sdPar.a, sdPar.b, calcPar, K, u, v, qk);
                      nextK_ak1(DBL_EPSILON, N2, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);
                    }
                    triedFlag = 1;
                    j2 = 0;
                  }
                }
                omp = mp;
                tFlag = calcSC_ak1(DBL_EPSILON, N2, sdPar.a, sdPar.b, calcPar, K, u, v, qk);
                nextK_ak1(DBL_EPSILON, N2, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);
                tFlag = calcSC_ak1(DBL_EPSILON, N2, sdPar.a, sdPar.b, calcPar, K, u, v, qk);
                newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N2, p2);
                ui = sdPar.a;
                vi = sdPar.b;
                if (vi != 0) {
                  relstp = Math.abs((-v + vi) / vi);
                  u = ui;
                  v = vi;
                }
              } while (vi != 0);
              return;
            }
            function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N2, p2, NN, qp, K, qk) {
              var ee, kv, mp, ms, omp, pv, s, t, dumFlag, i2, j2, nm1 = N2 - 1;
              iPar.NZ = j2 = dumFlag = 0;
              s = sdPar.a;
              for (; ; ) {
                pv = p2[0];
                qp[0] = pv;
                for (i2 = 1; i2 < NN; i2++) {
                  qp[i2] = pv = pv * s + p2[i2];
                }
                mp = Math.abs(pv);
                ms = Math.abs(s);
                ee = 0.5 * Math.abs(qp[0]);
                for (i2 = 1; i2 < NN; i2++) {
                  ee = ee * ms + Math.abs(qp[i2]);
                }
                if (mp <= 20 * DBL_EPSILON * (2 * ee - mp)) {
                  iPar.NZ = 1;
                  iPar.szr = s;
                  iPar.szi = 0;
                  break;
                }
                j2++;
                if (j2 > 10)
                  break;
                if (j2 >= 2) {
                  if (Math.abs(t) <= 1e-3 * Math.abs(-t + s) && mp > omp) {
                    dumFlag = 1;
                    iPar.a = s;
                    break;
                  }
                }
                omp = mp;
                qk[0] = kv = K[0];
                for (i2 = 1; i2 < N2; i2++) {
                  qk[i2] = kv = kv * s + K[i2];
                }
                if (Math.abs(kv) > Math.abs(K[nm1]) * 10 * DBL_EPSILON) {
                  t = -(pv / kv);
                  K[0] = qp[0];
                  for (i2 = 1; i2 < N2; i2++) {
                    K[i2] = t * qk[i2 - 1] + qp[i2];
                  }
                } else {
                  K[0] = 0;
                  for (i2 = 1; i2 < N2; i2++)
                    K[i2] = qk[i2 - 1];
                }
                kv = K[0];
                for (i2 = 1; i2 < N2; i2++) {
                  kv = kv * s + K[i2];
                }
                t = Math.abs(kv) > Math.abs(K[nm1]) * 10 * DBL_EPSILON ? -(pv / kv) : 0;
                s += t;
              }
              return dumFlag;
            }
            function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N2, p2, NN, qp, u, iPar) {
              var sdPar = new Object(), calcPar = new Object(), qk = new Array(MDP1), svk = new Array(MDP1), a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv, fflag, i2, iFlag = 1, j2, spass, stry, tFlag, vpass, vtry;
              iPar.NZ = 0;
              betav = betas = 0.25;
              oss = sr;
              ovv = v;
              sdPar.b = sdPar.a = 0;
              QuadSD_ak1(NN, u, v, p2, qp, sdPar);
              a = sdPar.a;
              b = sdPar.b;
              calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0;
              tFlag = calcSC_ak1(DBL_EPSILON, N2, a, b, calcPar, K, u, v, qk);
              for (j2 = 0; j2 < L2; j2++) {
                fflag = 1;
                nextK_ak1(DBL_EPSILON, N2, tFlag, a, b, calcPar, K, qk, qp);
                tFlag = calcSC_ak1(DBL_EPSILON, N2, a, b, calcPar, K, u, v, qk);
                newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N2, p2);
                ui = sdPar.a;
                vv = vi = sdPar.b;
                ss = K[N2 - 1] != 0 ? -(p2[N2] / K[N2 - 1]) : 0;
                ts = tv = 1;
                if (j2 != 0 && tFlag != 3) {
                  tv = vv != 0 ? Math.abs((vv - ovv) / vv) : tv;
                  ts = ss != 0 ? Math.abs((ss - oss) / ss) : ts;
                  tvv = tv < otv ? tv * otv : 1;
                  tss = ts < ots ? ts * ots : 1;
                  vpass = tvv < betav ? 1 : 0;
                  spass = tss < betas ? 1 : 0;
                  if (spass || vpass) {
                    for (i2 = 0; i2 < N2; i2++) {
                      svk[i2] = K[i2];
                    }
                    s = ss;
                    stry = vtry = 0;
                    for (; ; ) {
                      if (fflag && (fflag = 0) == 0 && (spass && (!vpass || tss < tvv))) {
                        ;
                      } else {
                        QuadIT_ak1(DBL_EPSILON, N2, iPar, ui, vi, qp, NN, sdPar, p2, qk, calcPar, K);
                        a = sdPar.a;
                        b = sdPar.b;
                        if (iPar.NZ > 0)
                          return;
                        iFlag = vtry = 1;
                        betav *= 0.25;
                        if (stry || !spass) {
                          iFlag = 0;
                        } else {
                          for (i2 = 0; i2 < N2; i2++)
                            K[i2] = svk[i2];
                        }
                      }
                      if (iFlag != 0) {
                        sdPar.a = s;
                        iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N2, p2, NN, qp, K, qk);
                        s = sdPar.a;
                        if (iPar.NZ > 0)
                          return;
                        stry = 1;
                        betas *= 0.25;
                        if (iFlag != 0) {
                          ui = -(s + s);
                          vi = s * s;
                          continue;
                        }
                      }
                      for (i2 = 0; i2 < N2; i2++)
                        K[i2] = svk[i2];
                      if (!vpass || vtry)
                        break;
                    }
                    QuadSD_ak1(NN, u, v, p2, qp, sdPar);
                    a = sdPar.a;
                    b = sdPar.b;
                    tFlag = calcSC_ak1(DBL_EPSILON, N2, a, b, calcPar, K, u, v, qk);
                  }
                }
                ovv = vv;
                oss = ss;
                otv = tv;
                ots = ts;
              }
              return;
            }
            function rpSolve(degPar, p2, zeror2, zeroi2) {
              var N2 = degPar.Degree, RADFAC = 3.141592653589793 / 180, LB2 = Math.LN2, MDP1 = degPar.Degree + 1, K = new Array(MDP1), pt = new Array(MDP1), qp = new Array(MDP1), temp = new Array(MDP1), qPar = new Object(), Fxshfr_Par = new Object(), bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm, aa, bb, cc, sr, t, u, xxx, j2, jj, l2, NM1, NN, zerok;
              aa = 1;
              do {
                DBL_EPSILON = aa;
                aa /= 2;
                bb = 1 + aa;
              } while (bb > 1);
              var LO = Number.MIN_VALUE / DBL_EPSILON, cosr = Math.cos(94 * RADFAC), sinr = Math.sin(94 * RADFAC), xx = Math.sqrt(0.5), yy = -xx;
              Fxshfr_Par.NZ = j2 = 0;
              Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0;
              while (p2[N2] == 0) {
                zeror2[j2] = zeroi2[j2] = 0;
                N2--;
                j2++;
              }
              NN = N2 + 1;
              while (N2 >= 1) {
                if (N2 <= 2) {
                  if (N2 < 2) {
                    zeror2[degPar.Degree - 1] = -(p2[1] / p2[0]);
                    zeroi2[degPar.Degree - 1] = 0;
                  } else {
                    qPar.li = qPar.lr = qPar.si = qPar.sr = 0;
                    Quad_ak1(p2[0], p2[1], p2[2], qPar);
                    zeror2[degPar.Degree - 2] = qPar.sr;
                    zeroi2[degPar.Degree - 2] = qPar.si;
                    zeror2[degPar.Degree - 1] = qPar.lr;
                    zeroi2[degPar.Degree - 1] = qPar.li;
                  }
                  break;
                }
                moduli_max = 0;
                moduli_min = Number.MAX_VALUE;
                for (i2 = 0; i2 < NN; i2++) {
                  x = Math.abs(p2[i2]);
                  if (x > moduli_max)
                    moduli_max = x;
                  if (x != 0 && x < moduli_min)
                    moduli_min = x;
                }
                sc = LO / moduli_min;
                if (sc <= 1 && moduli_max >= 10 || sc > 1 && Number.MAX_VALUE / sc >= moduli_max) {
                  sc = sc == 0 ? Number.MIN_VALUE : sc;
                  l2 = Math.floor(Math.log(sc) / LB2 + 0.5);
                  factor = Math.pow(2, l2);
                  if (factor != 1) {
                    for (i2 = 0; i2 < NN; i2++)
                      p2[i2] *= factor;
                  }
                }
                for (var i2 = 0; i2 < NN; i2++)
                  pt[i2] = Math.abs(p2[i2]);
                pt[N2] = -pt[N2];
                NM1 = N2 - 1;
                x = Math.exp((Math.log(-pt[N2]) - Math.log(pt[0])) / N2);
                if (pt[NM1] != 0) {
                  xm = -pt[N2] / pt[NM1];
                  x = xm < x ? xm : x;
                }
                xm = x;
                do {
                  x = xm;
                  xm = 0.1 * x;
                  ff = pt[0];
                  for (var i2 = 1; i2 < NN; i2++) {
                    ff = ff * xm + pt[i2];
                  }
                } while (ff > 0);
                dx = x;
                do {
                  df = ff = pt[0];
                  for (var i2 = 1; i2 < N2; i2++) {
                    ff = x * ff + pt[i2];
                    df = x * df + ff;
                  }
                  ff = x * ff + pt[N2];
                  dx = ff / df;
                  x -= dx;
                } while (Math.abs(dx / x) > 5e-3);
                bnd = x;
                for (var i2 = 1; i2 < N2; i2++)
                  K[i2] = (N2 - i2) * p2[i2] / N2;
                K[0] = p2[0];
                aa = p2[N2];
                bb = p2[NM1];
                zerok = K[NM1] == 0 ? 1 : 0;
                for (jj = 0; jj < 5; jj++) {
                  cc = K[NM1];
                  if (zerok) {
                    for (var i2 = 0; i2 < NM1; i2++) {
                      j2 = NM1 - i2;
                      K[j2] = K[j2 - 1];
                    }
                    K[0] = 0;
                    zerok = K[NM1] == 0 ? 1 : 0;
                  } else {
                    t = -aa / cc;
                    for (var i2 = 0; i2 < NM1; i2++) {
                      j2 = NM1 - i2;
                      K[j2] = t * K[j2 - 1] + p2[j2];
                    }
                    K[0] = p2[0];
                    zerok = Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10 ? 1 : 0;
                  }
                }
                for (var i2 = 0; i2 < N2; i2++)
                  temp[i2] = K[i2];
                for (jj = 1; jj <= 20; jj++) {
                  xxx = -(sinr * yy) + cosr * xx;
                  yy = sinr * xx + cosr * yy;
                  xx = xxx;
                  sr = bnd * xx;
                  u = -(2 * sr);
                  Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N2, p2, NN, qp, u, Fxshfr_Par);
                  if (Fxshfr_Par.NZ != 0) {
                    j2 = degPar.Degree - N2;
                    zeror2[j2] = Fxshfr_Par.szr;
                    zeroi2[j2] = Fxshfr_Par.szi;
                    NN = NN - Fxshfr_Par.NZ;
                    N2 = NN - 1;
                    for (var i2 = 0; i2 < NN; i2++)
                      p2[i2] = qp[i2];
                    if (Fxshfr_Par.NZ != 1) {
                      zeror2[j2 + 1] = Fxshfr_Par.lzr;
                      zeroi2[j2 + 1] = Fxshfr_Par.lzi;
                    }
                    break;
                  } else {
                    for (var i2 = 0; i2 < N2; i2++) {
                      K[i2] = temp[i2];
                    }
                  }
                }
                if (jj > 20) {
                  degPar.Degree -= N2;
                  break;
                }
              }
              return;
            }
            rpSolve(degreePar, p, zeror, zeroi);
            var l = zeroi.length;
            for (i = 0; i < l; i++) {
              var img = round(zeroi[i], decp + 8), real = round(zeror[i], decp + 8);
              real = decp - String(real).length > 2 ? real : zeror[i];
              var sign = img < 0 ? "-" : "";
              if (real === 0) {
                real = "";
              }
              if (img === 0) {
                img = "";
              }
              img = Math.abs(img) === 1 ? sign + "i" : img ? img + "*i" : "";
              var num = real && img ? real + "+" + img : real + img;
              zeror[i] = num.replace(/\+\-/g, "-");
            }
            return zeror;
          }
        },
        roots: function(symbol) {
          if (symbol.isConstant(true, true)) {
            return core.Utils.nroots(symbol);
          }
          var roots = __.proots(symbol).map(function(x) {
            return _.parse(x);
          });
          return core.Vector.fromArray(roots);
        },
        froot: function(f, guess, dx) {
          var newtonraph = function(xn) {
            var mesh = 1e-12, df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())), fn = f instanceof Function ? f : core.Utils.build(f), max = 1e4, done = false, safety = 0;
            while (!done) {
              var x = xn - fn(xn) / df(xn);
              var r = Math.abs(x) - Math.abs(xn), delta = Math.abs(r);
              xn = x;
              if (delta < mesh)
                done = true;
              else if (safety > max) {
                xn = null;
                done = true;
              }
              safety++;
            }
            return xn;
          };
          return newtonraph(Number(guess));
        },
        quad: function(a, b, c) {
          var q = function(a2, b2, c2, sign) {
            return _.parse("-(" + b2 + "+" + sign + "*sqrt((" + b2 + ")^2-4*(" + a2 + ")*(" + c2 + ")))/(2*" + a2 + ")");
          };
          return [q(a, b, c, 1), q(a, b, c, -1)];
        },
        sumProd: function(a, b) {
          return __.quad(-b, a, -1).map(function(x) {
            return x.invert();
          });
        },
        coeffs: function(symbol, wrt, coeffs) {
          wrt = String(wrt);
          symbol = _.expand(symbol);
          coeffs = coeffs || [new Symbol2(0)];
          if (symbol.group === EX && symbol.contains(wrt, true))
            _.error("Unable to get coefficients using expression " + symbol.toString());
          var vars = variables(symbol);
          if (vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {
            var a = new Polynomial(symbol).coeffs.map(function(x) {
              return new Symbol2(x);
            });
            for (var i = 0, l = a.length; i < l; i++) {
              var coeff = a[i], e = coeffs[i];
              if (e)
                coeff = _.add(e, coeff);
              coeffs[i] = coeff;
            }
          } else {
            if (!wrt)
              _.error("Polynomial contains more than one variable. Please specify which variable is to be used!");
            if (vars.indexOf(wrt) === -1) {
              coeffs[0] = _.add(symbol, coeffs[0]);
            } else {
              coeffs = coeffs || [new Symbol2(0)];
              if (symbol.group === CB) {
                var s = symbol.symbols[wrt];
                if (!s)
                  _.error("Expression is not a polynomial!");
                var p = Number(s.power);
                coeff = _.divide(symbol.clone(), s.clone());
                if (coeff.contains(wrt, true) || p < 0 || !isInt(p))
                  _.error("Expression is not a polynomial!");
                var e = coeffs[p];
                if (e)
                  coeff = _.add(e, coeff);
                coeffs[p] = coeff;
              } else if (symbol.group === CP) {
                symbol.each(function(x) {
                  __.coeffs(x.clone(), wrt, coeffs);
                }, true);
              }
            }
          }
          for (var i = 0, l = coeffs.length; i < l; i++)
            if (typeof coeffs[i] === "undefined")
              coeffs[i] = new Symbol2(0);
          return coeffs;
        },
        /**
         * Get's all the powers of a particular polynomial including the denominators. The denominators powers
         * are returned as negative. All remaining polynomials are returned as zero order polynomials.
         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]
         * @param {Symbol} e
         * @param {String} for_variable
         * @param {Array} powers
         * @returns {Array} An array of the powers
         */
        //assumes you've already verified that it's a polynomial
        polyPowers: function(e, for_variable, powers) {
          powers = powers || [];
          var g = g = e.group;
          if (g === PL && for_variable === e.value) {
            powers = powers.concat(keys(e.symbols));
          } else if (g === CP) {
            for (var s in e.symbols) {
              var symbol = e.symbols[s];
              var g = symbol.group, v = symbol.value;
              if (g === S && for_variable === v)
                powers.push(symbol.power);
              else if (g === PL || g === CP)
                powers = __.polyPowers(symbol, for_variable, powers);
              else if (g === CB && symbol.contains(for_variable)) {
                var t = symbol.symbols[for_variable];
                if (t)
                  powers.push(t.power);
              } else if (g === N || for_variable !== v)
                powers.push(0);
            }
          } else if (g === CB && e.contains(for_variable)) {
            powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);
          }
          return core.Utils.arrayUnique(powers).sort();
        },
        //The factor object
        Factor: {
          //splits the symbol in symbol and constant
          split: function(symbol) {
            var c = new Symbol2(1);
            var s = new Symbol2(1);
            __.Factor.factor(symbol, new Factors()).each(function(x) {
              var t = _.parse(x);
              if (x.isConstant(true)) {
                c = _.multiply(c, t);
              } else {
                s = _.multiply(s, t);
              }
            });
            return [c, s];
          },
          mix: function(o, include_negatives) {
            var factors = keys(o);
            var l = factors.length;
            var m = [];
            for (var i = 0; i < l; i++) {
              var factor = factors[i], p = o[factor];
              var ll = m.length;
              for (var j = 0; j < ll; j++) {
                var t = m[j] * factor;
                m.push(t);
                if (include_negatives)
                  m.push(-t);
              }
              for (var j = 1; j <= p; j++)
                m.push(Math.pow(factor, j));
            }
            return m;
          },
          //TODO: this method is to replace common factoring
          common: function(symbol, factors) {
            try {
              if (symbol.group === CP) {
                var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function(a, b) {
                  return (b.length || 1) - (a.length || 1);
                });
                var map = {};
                var coeffs = [];
                for (var i = 0; i < symbols.length; i++) {
                  var sym = symbols[i];
                  coeffs.push(sym.multiplier.clone());
                  sym.each(function(x2) {
                    var p = Number(x2.power);
                    if (isNaN(p))
                      throw new Error("exiting");
                    if (x2.value in map) {
                      if (p < map[x2.value][0])
                        map[x2.value][0] = p;
                      map[x2.value][1].push(x2);
                    } else
                      map[x2.value] = [p, [x2]];
                  });
                }
                var factor = new Symbol2(1);
                for (var x in map) {
                  if (map[x][1].length === symbols.length) {
                    factor = _.multiply(factor, _.pow(new Symbol2(x), new Symbol2(map[x][0])));
                  }
                }
                var c = core.Math2.QGCD.apply(null, coeffs);
                if (!c.equals(1)) {
                  factors.add(new Symbol2(c));
                  for (var i = 0; i < symbols.length; i++) {
                    symbols[i].multiplier = symbols[i].multiplier.divide(c);
                  }
                }
                if (!factor.equals(1)) {
                  factors.add(factor);
                  symbol = new Symbol2(0);
                  for (var i = 0; i < symbols.length; i++) {
                    symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));
                  }
                }
              }
            } catch (e) {
              ;
            }
            return symbol;
          },
          zeroes: function(symbol, factors) {
            var exit = function() {
              throw new core.exceptions.ValueLimitExceededError("Exiting");
            };
            try {
              var vars, term, sum, p, e;
              symbol = _.expand(symbol.clone());
              e = symbol.toString();
              vars = variables(symbol);
              sum = new Symbol2(0);
              var terms = [];
              var powers = [];
              for (var i = 0, l = vars.length; i < vars.length; i++) {
                var subs = {};
                for (var j = 0; j < l; j++)
                  if (i !== j)
                    subs[vars[j]] = 0;
                term = _.parse(e, subs);
                var tp = term.power;
                if (!isInt(tp))
                  exit();
                terms.push(term);
                powers.push(term.power);
              }
              if (core.Utils.allSame(powers)) {
                var n_terms = symbol.length;
                var n_zeroes = terms.length;
                if (n_zeroes === 2) {
                  p = new Frac(powers[0] / (n_terms - 1));
                }
                if (n_zeroes === 3) {
                  p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));
                }
              } else
                p = core.Math2.QGCD.apply(null, powers);
              if (!isInt(p))
                exit();
              for (var i = 0; i < terms.length; i++) {
                var t = terms[i];
                var n2 = t.power.clone().divide(p);
                t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n2));
                t.power = p.clone();
                sum = _.add(sum, t);
              }
              if (sum.group !== CP)
                return symbol;
              while (true) {
                var d = __.div(symbol.clone(), sum.clone());
                if (d[1].equals(0)) {
                  symbol = d[0];
                  factors.add(sum.clone());
                  if (symbol.equals(1))
                    break;
                } else
                  break;
              }
            } catch (e2) {
            }
            ;
            return symbol;
          },
          factor: function(symbol, factors) {
            if (symbol.isConstant()) {
              return core.Math2.factor(symbol);
            }
            var _symbol = _.parse(symbol);
            var retval = __.Factor._factor(_symbol, factors);
            if (retval.equals(symbol)) {
              return retval;
            }
            if (retval.group === CB) {
              var t = new Symbol2(1);
              var p = _.parse(retval.power);
              var m = _.parse(retval.multiplier);
              retval.toUnitMultiplier();
              if (retval.multiplier.lessThan(0)) {
                t.negate();
                retval.negate();
              }
              retval.each(function(x) {
                var factored = _.parse(__.Factor._factor(x));
                if (factored.group === CB) {
                  m = _.multiply(m, Symbol2.create(factored.multiplier));
                  factored.each(function(y) {
                    var _factored = _.parse(__.Factor._factor(y));
                    t = _.multiply(t, _factored);
                    if (_factored.group === CB) {
                      m = _.multiply(m, Symbol2.create(_factored.multiplier));
                    }
                  });
                } else {
                  t = _.multiply(t, factored);
                }
              });
              retval = _.pow(_.multiply(m, t), p);
            }
            return retval;
          },
          quadFactor: function(symbol, factors) {
            if (symbol.isPoly() && __.degree(symbol.equals(2))) {
              var v = core.Utils.variables(symbol)[0];
              var coeffs = __.coeffs(symbol, v);
              var cf = __.Factor._factor(coeffs[2].clone());
              if (cf.group === CB) {
                var symbols = cf.collectSymbols();
                if (symbols.length > 2)
                  return symbol;
                var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));
                var b = _.parse(coeffs[1]).negate();
                var a = _.parse(symbols[1]);
                var root = __.quad(a, b, c).filter(function(x) {
                  if (core.Utils.isInt(x))
                    return x;
                });
                if (root.length === 1) {
                  var root1 = root[0];
                  var root2 = _.divide(coeffs[0], _.parse(root1));
                  if (core.Utils.isInt(root2)) {
                    factors.add(_.parse(format("({0})*({1})+({2})", symbols[1], v, root2)));
                    factors.add(_.parse(format("({0})*({1})+({2})", symbols[0], v, root1)));
                    symbol = new Symbol2(1);
                  }
                }
              }
            }
            return symbol;
          },
          cubeFactor: function(symbol, factors) {
            if (symbol.isComposite()) {
              var symbols = symbol.collectSymbols();
              if (symbols.length === 2) {
                var sign_a = symbols[0].sign();
                var a = symbols[0].clone().abs();
                var sign_b = symbols[1].sign();
                var b = symbols[1].clone().abs();
                if (a.isCube() && b.isCube()) {
                  if (sign_a < sign_b) {
                    [sign_a, sign_b] = [sign_b, sign_a];
                    [a, b] = [b, a];
                  }
                  var m_root_a = _.parse(a.getNth(3));
                  var m_root_b = _.parse(b.getNth(3));
                  var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse("1/3"))), m_root_a);
                  var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse("1/3"))), m_root_b);
                  if (sign_a === 1 && sign_b === -1) {
                    factors.add(_.parse(format("(({0})-({1}))", x, y)));
                    factors.add(_.parse(format("(({0})^2+({0})*({1})+({1})^2)", x, y)));
                    symbol = Symbol2(1);
                  } else if (sign_a === 1 && sign_b === 1) {
                    factors.add(_.parse(format("(({0})+({1}))", x, y)));
                    factors.add(_.parse(format("(({0})^2-({0})*({1})+({1})^2)", x, y)));
                    symbol = Symbol2(1);
                  }
                }
              }
            }
            return symbol;
          },
          _factor: function(symbol, factors) {
            var g = symbol.group;
            if (symbol.group === FN) {
              var arg = symbol.args[0];
              if (arg.group === S && arg.isSimple()) {
                return symbol;
              }
            } else if (symbol.group === S && symbol.isSimple()) {
              return symbol;
            }
            if (symbol.group === CP) {
              symbol.distributeMultiplier(true);
              var t = new Symbol2(0);
              symbol.each(function(x2) {
                if (x2.group === CP && x2.power.greaterThan(1) || x2.group === CB)
                  x2 = _.expand(x2);
                t = _.add(t, x2);
              });
              t.power = symbol.power;
              symbol = t;
            }
            if (symbol.group === FN && symbol.fname !== "sqrt") {
              symbol = core.Utils.evaluate(symbol);
            }
            var untouched = symbol.clone();
            try {
              if (symbol.group === CB) {
                var p = _.parse(symbol.power);
                var den_array, num_array, den, num, dfact, nfact;
                den_array = __.Simplify.strip(symbol.getDenom());
                num_array = __.Simplify.strip(symbol.getNum());
                den = den_array.pop();
                num = num_array.pop();
                if (num.equals(symbol)) {
                  return symbol;
                }
                nfact = __.Factor.factor(num);
                dfact = __.Factor.factor(den);
                var n2 = __.Simplify.unstrip(num_array, nfact);
                var d = __.Simplify.unstrip(den_array, dfact);
                var retval = _.divide(n2, d);
                return retval;
              }
              if (symbol.group === S) {
                return symbol;
              }
              if (symbol.isConstant()) {
                if (symbol.equals(1))
                  return symbol.clone();
                var ret = core.Math2.factor(symbol);
                return ret;
              }
              var p = symbol.power.clone();
              if (isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {
                var sign = p.sign();
                symbol.toLinear();
                factors = factors || new Factors();
                var map = {};
                symbol = _.parse(core.Utils.subFunctions(symbol, map));
                if (keys(map).length > 0) {
                  factors.preAdd = function(factor) {
                    var ret2 = _.parse(factor, core.Utils.getFunctionsSubs(map));
                    return ret2;
                  };
                }
                if (!symbol.isLinear()) {
                  factors.pFactor = symbol.power.toString();
                  symbol.toLinear();
                }
                var vars = variables(symbol);
                if (symbol.isImaginary()) {
                  vars.push(core.Settings.IMAGINARY);
                }
                var multiVar = vars.length > 1;
                if (multiVar) {
                  var all_S = true, all_unit = true;
                  symbol.each(function(x2) {
                    if (x2.group !== S)
                      all_S = false;
                    if (!x2.multiplier.equals(1))
                      all_unit = false;
                  });
                  if (all_S && all_unit) {
                    return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));
                  }
                }
                var coeff_factors = new Factors();
                symbol = __.Factor.coeffFactor(symbol, coeff_factors);
                coeff_factors.each(function(x2) {
                  if (even(p) && x2.lessThan(0)) {
                    x2.negate();
                  }
                  if (sign < 0)
                    x2.invert();
                  factors.add(x2);
                });
                var power_factors = new Factors();
                symbol = __.Factor.powerFactor(symbol, power_factors);
                power_factors.each(function(x2) {
                  if (sign < 0)
                    x2.invert();
                  factors.add(x2);
                });
                if (!multiVar) {
                  var v = vars[0];
                  symbol = __.Factor.squareFree(symbol, factors, v);
                  var t_factors = new Factors();
                  symbol = __.Factor.trialAndError(symbol, t_factors, v);
                  var tf_symbol = t_factors.toSymbol();
                  if (tf_symbol.equals(untouched)) {
                    return tf_symbol;
                  }
                  for (var x in t_factors.factors) {
                    var t_factor = t_factors.factors[x];
                    factors.add(_.pow(t_factor, _.parse(p)));
                  }
                  if (symbol.equals(untouched)) {
                    symbol = __.Factor.quadFactor(symbol, factors);
                  }
                } else {
                  symbol = __.Factor.cubeFactor(symbol, factors);
                  symbol = __.Factor.mfactor(symbol, factors);
                  factors.each(function(x2) {
                    if (sign < 0)
                      x2.power.negate();
                  });
                }
                symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));
                var addPower = factors.length === 1;
                factors.add(_.pow(symbol, _.parse(p)));
                var retval = factors.toSymbol();
                if (addPower && symbol.equals(1) && retval.isLinear()) {
                  retval = _.pow(retval, _.parse(p));
                }
                return retval;
              }
              return symbol;
            } catch (e) {
              return untouched;
            }
          },
          reduce: function(symbol, factors) {
            if (symbol.group === CP && symbol.length === 2) {
              var symbols = symbol.collectSymbols().sort(function(a2, b2) {
                return b2.multiplier - a2.multiplier;
              });
              if (symbols[0].power.equals(symbols[1].power)) {
                var n2 = _.parse(symbols[0].power), a = symbols[0].clone().toLinear(), b = symbols[1].clone().toLinear();
                factors.add(_.add(a.clone(), b.clone()));
                b.negate();
                var nn = Number(n2);
                var result = new Symbol2(0);
                for (var i = 1; i <= nn; i++) {
                  var aa = _.pow(a.clone(), _.subtract(n2.clone(), new Symbol2(i))), bb = _.pow(b.clone(), _.subtract(new Symbol2(i), new Symbol2(1)));
                  result = _.add(result, _.multiply(aa, bb));
                }
                return result;
              }
            }
            return symbol;
          },
          /**
           * Makes Symbol square free
           * @param {Symbol} symbol
           * @param {Factors} factors
           * @@param {String} variable The variable which is being factored 
           * @returns {[Symbol, Factor]}
           */
          squareFree: function(symbol, factors, variable) {
            if (symbol.isConstant() || symbol.group === S)
              return symbol;
            var poly = new Polynomial(symbol, variable);
            var sqfr = poly.squareFree();
            var p = sqfr[2];
            if (p !== 1) {
              var t = sqfr[1].toSymbol();
              t.power = t.power.multiply(new Frac(p));
              factors.add(__.Factor.factor(t));
              var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);
              return retval;
            }
            return symbol;
          },
          /**
           * Factors the powers such that the lowest power is a constant
           * @param {Symbol} symbol
           * @param {Factors} factors
           * @returns {[Symbol, Factor]}
           */
          powerFactor: function(symbol, factors) {
            if (symbol.group !== PL || symbol.previousGroup === EX)
              return symbol;
            var k = keys(symbol.symbols);
            if (!core.Utils.allNumeric(k))
              return symbol;
            var d = core.Utils.arrayMin(k);
            var retval = new Symbol2(0);
            var q = _.parse(symbol.value + "^" + d);
            symbol.each(function(x) {
              x = _.divide(x, q.clone());
              retval = _.add(retval, x);
            });
            factors.add(q);
            return retval;
          },
          /**
           * Removes GCD from coefficients
           * @param {Symbol} symbol
           * @param {Factor} factors
           * @returns {Symbol}
           */
          coeffFactor: function(symbol, factors) {
            if (symbol.isComposite()) {
              var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());
              if (!gcd.equals(1)) {
                symbol.each(function(x) {
                  if (x.isComposite()) {
                    x.each(function(y) {
                      y.multiplier = y.multiplier.divide(gcd);
                    });
                  } else
                    x.multiplier = x.multiplier.divide(gcd);
                });
                symbol.updateHash();
              } else {
                var power = function(symbol2) {
                  var p;
                  if (symbol2.group === CB) {
                    p = 0;
                    symbol2.each(function(x) {
                      p += x.power;
                    });
                  } else {
                    p = Number(symbol2.power);
                  }
                  return p;
                };
                var terms = symbol.collectSymbols(null, null, null, true).sort(function(a, b) {
                  if (a.isConstant(true))
                    return 1;
                  return b.power - a.power;
                });
                var LT = terms[0];
                if (power(LT) > power(terms[1]) || terms[1].isConstant(true)) {
                  if (LT.multiplier.lessThan(0)) {
                    factors.add(new Symbol2(-1));
                    symbol.each(function(x) {
                      x.negate();
                    }, true);
                  }
                }
              }
              if (factors) {
                factors.add(new Symbol2(gcd));
              }
            }
            return symbol;
          },
          /**
           * The name says it all :)
           * @param {Symbol} symbol
           * @param {Factor} factors
           * @@param {String} variable 
           * @returns {Symbol}
           */
          trialAndError: function(symbol, factors, variable) {
            var untouched = symbol.clone();
            try {
              var factor_array = [];
              if (symbol.isConstant() || symbol.group === S)
                return symbol;
              var poly = new Polynomial(symbol, variable), cnst = poly.coeffs[0], cfactors = core.Math2.ifactor(cnst), roots = __.proots(symbol);
              for (var i = 0; i < roots.length; i++) {
                var r = roots[i], p = 1;
                if (!isNaN(r)) {
                  for (var x in cfactors) {
                    var n2 = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);
                    if (isInt(n2)) {
                      r = x;
                      p = n2;
                      break;
                    }
                  }
                  var root = new Frac(r), terms = [new Frac(root.num).negate()];
                  terms[p] = new Frac(root.den);
                  var div = Polynomial.fromArray(terms, poly.variable).fill(), t = poly.divide(div);
                  if (t[1].equalsNumber(0)) {
                    poly = t[0];
                    factor_array.push(div.toSymbol());
                  }
                }
              }
              if (!poly.equalsNumber(1)) {
                poly = __.Factor.search(poly, factors);
              }
              factor_array.forEach(function(x2) {
                factors.add(x2);
              });
              return poly.toSymbol();
            } catch (e) {
              return untouched;
            }
          },
          search: function(poly, factors, base) {
            base = base || 10;
            var v = poly.variable;
            var check = function(c1, c2, n2, p) {
              var candidate = Polynomial.fit(c1, c2, n2, base, p, v);
              if (candidate && candidate.coeffs.length > 1) {
                var t = poly.divide(candidate);
                if (t[1].equalsNumber(0)) {
                  factors.add(candidate.toSymbol());
                  return [t[0], candidate];
                }
              }
              return null;
            };
            var cnst = poly.coeffs[0];
            var cfactors = core.Math2.ifactor(cnst);
            var lc = poly.lc();
            var ltfactors = core.Math2.ifactor(lc);
            var subbed = poly.sub(base);
            var isubbed = core.Math2.ifactor(subbed);
            var nfactors = __.Factor.mix(isubbed, subbed < 0);
            var cp = Math.ceil(poly.coeffs.length / 2);
            var lc_is_neg = lc.lessThan(0);
            var cnst_is_neg = cnst.lessThan(0);
            ltfactors["1"] = 1;
            cfactors["1"] = 1;
            while (cp--) {
              for (var x in ltfactors) {
                for (var y in cfactors) {
                  for (var i = 0; i < nfactors.length; i++) {
                    var factor_found = check(x, y, nfactors[i], cp);
                    if (factor_found) {
                      poly = factor_found[0];
                      if (!core.Utils.isPrime(poly.sub(base)))
                        poly = __.Factor.search(poly, factors);
                      return poly;
                    } else if (!factor_found) {
                      if (lc_is_neg && cnst_is_neg)
                        factor_found = check(-x, -y, nfactors[i], cp);
                      else if (lc_is_neg)
                        factor_found = check(-x, y, nfactors[i], cp);
                      else if (cnst_is_neg)
                        factor_found = check(x, -y, nfactors[i], cp);
                    }
                  }
                }
              }
            }
            return poly;
          },
          /**
           * Equivalent of square free factor for multivariate polynomials
           * @param {type} symbol
           * @param {type} factors
           * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}
           */
          mSqfrFactor: function(symbol, factors) {
            if (symbol.group !== FN) {
              var vars = variables(symbol).reverse();
              for (var i = 0; i < vars.length; i++) {
                do {
                  if (vars[i] === symbol.value) {
                    factors.add(symbol);
                    symbol = new Symbol2(1);
                    continue;
                  }
                  var diff = core.Calculus.diff(symbol, vars[i]);
                  var d = __.Factor.coeffFactor(diff);
                  if (d.equals(0))
                    break;
                  var can_divide = true;
                  if (d.isConstant() && symbol.isComposite()) {
                    symbol.each(function(x) {
                      if (x.multiplier % d !== 0)
                        can_divide = false;
                    }, true);
                  }
                  if (can_divide) {
                    var div = __.div(symbol, d.clone()), is_factor = div[1].equals(0);
                    if (symbol.equals(div[0]) && div[1].equals(0)) {
                      break;
                    }
                    if (div[0].isConstant()) {
                      factors.add(div[0]);
                      break;
                    }
                  } else
                    is_factor = false;
                  if (is_factor) {
                    factors.add(div[0]);
                    symbol = d;
                  }
                } while (is_factor);
              }
            }
            return symbol;
          },
          //difference of squares factorization
          sqdiff: function(symbol, factors) {
            if (symbol.isConstant("all")) {
              return symbol;
            }
            try {
              var remove_square = function(x2) {
                return core.Utils.block("POSITIVE_MULTIPLIERS", function() {
                  return Symbol2.unwrapPARENS(math.sqrt(math.abs(x2)));
                }, true);
              };
              var separated = core.Utils.separate(symbol.clone());
              var obj_array = [];
              for (var x in separated) {
                if (x !== "constants") {
                  obj_array.push(separated[x]);
                }
              }
              obj_array.sort(function(a2, b2) {
                return b2.power - a2.power;
              });
              if (obj_array.length === 2) {
                var a, b;
                a = obj_array.pop();
                b = obj_array.pop();
                if (even(a.power) && even(b.power) && a.sign() === b.sign() && a.group === S && b.group === S) {
                  throw new Error("Unable to factor");
                }
                ;
                if (a.isComposite() && b.power.equals(2)) {
                  b = remove_square(b);
                  var f = __.Factor.factor(_.add(a, separated.constants));
                  if (f.power.equals(2)) {
                    f.toLinear();
                    factors.add(_.subtract(f.clone(), b.clone()));
                    factors.add(_.add(f, b));
                    symbol = new Symbol2(1);
                  }
                } else {
                  a = a.powSimp();
                  b = b.powSimp();
                  if ((a.group === S || a.fname === "") && a.power.equals(2) && (b.group === S || b.fname === "") && b.power.equals(2) && !separated.constants) {
                    if (a.multiplier.lessThan(0)) {
                      var t = b;
                      b = a;
                      a = t;
                    }
                    if (a.multiplier.greaterThan(0)) {
                      a = remove_square(a);
                      b = remove_square(b);
                    }
                    factors.add(_.subtract(a.clone(), b.clone()));
                    factors.add(_.add(a, b));
                    symbol = new Symbol2(1);
                  }
                }
              }
            } catch (e) {
              ;
            }
            return symbol;
          },
          //factoring for multivariate
          mfactor: function(symbol, factors) {
            if (symbol.group === FN) {
              if (symbol.fname === "sqrt") {
                var factors2 = new Factors(), arg = __.Factor.common(symbol.args[0].clone(), factors2);
                arg = __.Factor.coeffFactor(arg, factors2);
                symbol = _.multiply(_.symfunction("sqrt", [arg]), _.parse(symbol.multiplier));
                factors2.each(function(x2) {
                  symbol = _.multiply(symbol, _.parse(core.Utils.format("sqrt({0})", x2)));
                });
              } else
                factors.add(symbol);
            } else {
              symbol = __.Factor.mSqfrFactor(symbol, factors);
              var vars = variables(symbol), symbols = symbol.collectSymbols().map(function(x2) {
                return Symbol2.unwrapSQRT(x2);
              }), sorted = {}, maxes = {}, l = vars.length, n2 = symbols.length;
              for (var i = 0; i < l; i++) {
                var v = vars[i];
                sorted[v] = new Symbol2(0);
                for (var j = 0; j < n2; j++) {
                  var s = symbols[j];
                  if (s.contains(v)) {
                    var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();
                    if (!maxes[v] || p < maxes[v])
                      maxes[v] = p;
                    sorted[v] = _.add(sorted[v], s.clone());
                  }
                }
              }
              for (var x in sorted) {
                var r = _.parse(x + "^" + maxes[x]);
                var div = _.divide(sorted[x], r);
                var new_factor = _.expand(div);
                if (new_factor.equals(1))
                  break;
                var divided = __.div(symbol.clone(), new_factor);
                if (divided[0].equals(0)) {
                  break;
                }
                if (divided[1].equals(0)) {
                  var has_fractions = false;
                  divided[0].each(function(x2) {
                    if (!isInt(x2.multiplier)) {
                      has_fractions = true;
                    }
                  });
                  if (has_fractions) {
                    divided[1] = _.expand(_.multiply(divided[1], new_factor));
                    break;
                  }
                }
                var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);
                if (divided[1].equals(0) && !neg_numeric_factor) {
                  var d = __.div(symbol.clone(), divided[0].clone());
                  var r = d[0];
                  if (r.equals(0)) {
                    return symbol;
                  }
                  symbol = d[1];
                  if (r.equals(-1) && !symbol.equals(0))
                    return symbol;
                  var factor = divided[0];
                  if (symbol.equals(factor)) {
                    var rem = __.Factor.reduce(factor, factors);
                    if (!symbol.equals(rem))
                      return __.Factor.mfactor(rem, factors);
                    return rem;
                  } else {
                    factors.add(factor);
                    if (symbol.equals(0))
                      return r;
                  }
                  if (r.isConstant("all")) {
                    factors.add(r);
                    return r;
                  }
                  return __.Factor.mfactor(r, factors);
                }
              }
            }
            symbol = __.Factor.sqdiff(symbol, factors);
            symbol = __.Factor.zeroes(symbol, factors);
            return symbol;
          }
        },
        /**
         * Checks to see if a set of "equations" is linear. 
         * @param {type} set
         * @returns {Boolean}
         */
        allLinear: function(set) {
          var l = set.length;
          for (var i = 0; i < l; i++) {
            if (!__.isLinear(set[i]))
              return false;
          }
          return true;
        },
        /*
         * Checks to see if the "equation" is linear
         * @param {Symbol} e
         * @returns {boolean}
         */
        isLinear: function(e) {
          var status = false, g = e.group;
          if (g === PL || g === CP) {
            status = true;
            for (var s in e.symbols) {
              var symbol = e.symbols[s], sg = symbol.group;
              if (sg === FN || sg === EX) {
                status = false;
              }
              if (sg === CB) {
                status = variables(symbol).length === 1;
              } else {
                if (sg === PL || sg === CP)
                  status = __.isLinear(symbol);
                else {
                  if (symbol.group !== N && symbol.power.toString() !== "1") {
                    status = false;
                    break;
                  }
                }
              }
            }
          } else if (g === S && e.power === 1)
            status = true;
          return status;
        },
        gcd: function() {
          var args;
          if (arguments.length === 1 && arguments[0] instanceof core.Vector)
            args = arguments[0].elements;
          else
            args = core.Utils.arguments2Array(arguments);
          if (args.length === 0)
            return new Symbol2(1);
          else if (args.length === 1)
            return args[0];
          var appeared = [], evaluate2 = false;
          for (var i = 0; i < args.length; i++) {
            if (args[i].group === FN && args[i].fname === "gcd") {
              args = args.concat(arguments[i].args);
              args.splice(i, 1);
            } else {
              var vars = variables(args[i]);
              if (core.Utils.haveIntersection(vars, appeared)) {
                evaluate2 = true;
                break;
              } else
                appeared = appeared.concat(vars);
            }
          }
          if (evaluate2 || appeared.length === 0) {
            if (args.every(function(symbol) {
              return symbol.getDenom().equals(1);
            })) {
              var aggregate = args[0];
              for (var i = 1; i < args.length; i++) {
                aggregate = __.gcd_(args[i], aggregate);
              }
              return aggregate;
            } else {
              return _.divide(
                __.gcd.apply(null, args.map(function(symbol) {
                  return symbol.getNum();
                })),
                __.lcm.apply(null, args.map(function(symbol) {
                  return symbol.getDenom();
                }))
              );
            }
          } else
            return _.symfunction("gcd", args);
        },
        gcd_: function(a, b) {
          if (a.group === FN || a.group === P)
            a = core.Utils.block("PARSE2NUMBER", function() {
              return _.parse(a);
            });
          if (b.group === FN)
            b = core.Utils.block("PARSE2NUMBER", function() {
              return _.parse(b);
            });
          if (a.isConstant() && b.isConstant()) {
            return new Symbol2(core.Math2.QGCD(new Frac(+a), new Frac(+b)));
          }
          var den = _.multiply(a.getDenom() || new Symbol2(1), b.getDenom() || new Symbol2(1)).invert();
          a = _.multiply(a.clone(), den.clone());
          b = _.multiply(b.clone(), den.clone());
          a = _.expand(a);
          b = _.expand(b);
          if (a.group === CB || b.group === CB) {
            var q = _.divide(a.clone(), b.clone());
            var t = _.multiply(b.clone(), q.getDenom().invert());
            if (!t.equals(1))
              return t;
          }
          if (a.group === EX || b.group === EX) {
            var gcd_m = new Symbol2(core.Math2.GCD(a.multiplier, b.multiplier));
            var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol2(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol2(1) : _.parse(b.value));
            var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));
            return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));
          }
          if (a.length < b.length) {
            var t = a;
            a = b;
            b = t;
          }
          var vars_a = variables(a), vars_b = variables(b);
          if (vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0] || vars_a.length === 1 && vars_b.length === 0 || vars_a.length === 0 && vars_b.length === 1) {
            a = new Polynomial(a);
            b = new Polynomial(b);
            return _.divide(a.gcd(b).toSymbol(), den);
          } else {
            var multipliers = [];
            a.each(function(x) {
              multipliers.push(x.multiplier);
            });
            b.each(function(x) {
              multipliers.push(x.multiplier);
            });
            var T;
            while (!b.equals(0)) {
              var t = b.clone();
              a = a.clone();
              T = __.div(a, t);
              b = T[1];
              if (T[0].equals(0)) {
                return _.divide(new Symbol2(core.Math2.QGCD(a.multiplier, b.multiplier)), den);
              }
              a = t;
            }
            var gcd = core.Math2.QGCD.apply(void 0, multipliers);
            if (!gcd.equals(1)) {
              a.each(function(x) {
                x.multiplier = x.multiplier.divide(gcd);
              });
            }
            if (a.equals(1) && !a.isConstant() && !b.isConstant())
              return _.divide(_.symfunction("gcd", arguments), den);
            return _.divide(a, den);
          }
        },
        lcm: function() {
          var args;
          if (arguments.length === 1)
            if (arguments[0] instanceof core.Vector)
              args = arguments[0].elements;
            else
              _.error("lcm expects either 1 vector or 2 or more arguments");
          else
            args = core.Utils.arguments2Array(arguments);
          var numer = args.reduce(function(prev, curr) {
            return _.multiply(prev, curr.clone());
          }, new Symbol2(1));
          var denom_args = (
            //https://stackoverflow.com/a/18223072
            //take all complementary terms, e.g.
            //[a,b,c] => [a*b, b*c, a*c]
            //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]
            function(input, size) {
              size = Number(size);
              var results = [], result, mask, i, total = Math.pow(2, input.length);
              for (mask = size; mask < total; mask++) {
                result = [];
                i = input.length - 1;
                do {
                  if ((mask & 1 << i) !== 0) {
                    result.push(input[i]);
                  }
                } while (i--);
                if (result.length === size) {
                  results.push(result);
                }
              }
              return results;
            }(arguments, arguments.length - 1).map(function(x) {
              return x.reduce(function(prev, curr) {
                return _.multiply(prev, curr.clone());
              }, new Symbol2(1));
            })
          );
          var denom;
          if (args.every(function(x) {
            return core.Utils.isVariableSymbol(x);
          }))
            denom = _.symfunction("gcd", core.Utils.arrayUnique(denom_args));
          else
            denom = __.gcd.apply(null, denom_args);
          var div = _.divide(numer, denom);
          return div;
        },
        /**
         * Divides one expression by another
         * @param {Symbol} symbol1
         * @param {Symbol} symbol2
         * @returns {Array}
         */
        divide: function(symbol1, symbol2) {
          var result, remainder, factored, den;
          factored = core.Algebra.Factor.factor(symbol1.clone());
          den = factored.getDenom();
          if (!den.isConstant("all")) {
            symbol1 = _.expand(Symbol2.unwrapPARENS(_.multiply(factored, den.clone())));
          } else
            den = new Symbol2(1);
          result = __.div(symbol1, symbol2);
          remainder = _.divide(result[1], symbol2);
          return _.divide(_.add(result[0], remainder), den);
        },
        div: function(symbol1, symbol2) {
          var fail = [new Symbol2(0), symbol1.clone()];
          try {
            if (symbol2.isConstant("all")) {
              symbol1.each(function(x2) {
                x2.multiplier = x2.multiplier.divide(symbol2.multiplier);
              });
              return [symbol1, new Symbol2(0)];
            }
            symbol1 = _.expand(symbol1);
            symbol2 = _.expand(symbol2);
            if (symbol1.group === S && symbol2.group === CP) {
              var x = symbol1.value;
              var f = core.Utils.decompose_fn(symbol2.clone(), x, true);
              if (symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {
                var k = Symbol2.create(symbol1.multiplier);
                return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];
              }
            }
            if (symbol1.group === S && symbol2.group === S) {
              var r = _.divide(symbol1.clone(), symbol2.clone());
              if (r.isConstant())
                return [r, new Symbol2(0)];
              return [new Symbol2(0), symbol1.clone()];
            }
            var symbol1_has_func = symbol1.hasFunc(), symbol2_has_func = symbol2.hasFunc(), parse_funcs = false;
            if (symbol1_has_func || symbol2_has_func) {
              parse_funcs = true;
              var map = {}, symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)), symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)), subs = core.Utils.getFunctionsSubs(map);
            }
            var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))), quot, rem;
            if (symbol1.isImaginary() || symbol2.isImaginary()) {
              vars.push(core.Settings.IMAGINARY);
            }
            if (vars.length === 1) {
              var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));
              quot = q[0].toSymbol();
              rem = q[1].toSymbol();
            } else {
              vars.push(CONST_HASH);
              var reconvert = function(arr) {
                var symbol = new Symbol2(0);
                for (var i2 = 0; i2 < arr.length; i2++) {
                  var x2 = arr[i2].toSymbol();
                  symbol = _.add(symbol, x2);
                }
                return symbol;
              };
              var get_unique_max = function(term, any) {
                var max2 = Math.max.apply(null, term.terms), count = 0, idx;
                if (!any) {
                  for (var i2 = 0; i2 < term.terms.length; i2++) {
                    if (term.terms[i2].equals(max2)) {
                      idx = i2;
                      count++;
                    }
                    if (count > 1)
                      return;
                  }
                }
                if (any) {
                  for (i2 = 0; i2 < term.terms.length; i2++)
                    if (term.terms[i2].equals(max2)) {
                      idx = i2;
                      break;
                    }
                }
                return [max2, idx, term];
              };
              var get_det = function(s, lookat) {
                lookat = lookat || 0;
                var det2 = s[lookat], l = s.length;
                if (!det2)
                  return;
                var umax = get_unique_max(det2);
                for (var i2 = lookat + 1; i2 < l; i2++) {
                  var term = s[i2], is_equal = det2.sum.equals(term.sum);
                  if (!is_equal && umax) {
                    break;
                  }
                  if (is_equal) {
                    var max1, max2, idx1, idx2, l22 = det2.terms.length;
                    for (var j2 = 0; j2 < l22; j2++) {
                      var item1 = det2.terms[j2], item2 = term.terms[j2];
                      if (typeof max1 === "undefined" || item1.greaterThan(max1)) {
                        max1 = item1;
                        idx1 = j2;
                      }
                      if (typeof max2 === "undefined" || item2.greaterThan(max2)) {
                        max2 = item2;
                        idx2 = j2;
                      }
                    }
                    var d1 = max1.subtract(term.terms[idx1]), d2 = max2.subtract(det2.terms[idx2]);
                    if (d2 > d1) {
                      umax = [max2, idx2, term];
                      break;
                    }
                    if (d1 > d2) {
                      umax = [max1, idx1, det2];
                      break;
                    }
                  } else {
                    umax = get_unique_max(term);
                    if (umax)
                      break;
                  }
                  umax = get_unique_max(term);
                }
                if (!umax)
                  return get_unique_max(s[0], true);
                var e, idx;
                for (var i2 = 0; i2 < s2.length; i2++) {
                  var cterm = s2[i2].terms;
                  idx = umax[1];
                  if (idx === cterm.length - 1)
                    return;
                  e = cterm[idx];
                  if (!e.equals(0))
                    break;
                }
                if (e.equals(0))
                  return get_det(s, ++lookat);
                return umax;
              };
              var t_map = core.Utils.toMapObj(vars);
              var init_sort = function(a, b) {
                return b.sum.subtract(a.sum);
              };
              var is_larger = function(a, b) {
                if (!a || !b)
                  return false;
                for (var i2 = 0; i2 < a.terms.length; i2++) {
                  if (a.terms[i2].lessThan(b.terms[i2]))
                    return false;
                }
                return true;
              };
              var s1 = symbol1.tBase(t_map).sort(init_sort), s2 = symbol2.tBase(t_map).sort(init_sort);
              var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1;
              var det = get_det(target);
              var quotient = [];
              if (det) {
                var lead_var = det[1];
                var can_divide = function(a, b) {
                  if (a[0].sum.equals(b[0].sum))
                    return a.length >= b.length;
                  return true;
                };
                var try_better_lead_var = function(s12, s22, lead_var2) {
                  var checked = [];
                  for (var i2 = 0; i2 < s12.length; i2++) {
                    var t2 = s12[i2];
                    for (var j2 = 0; j2 < t2.terms.length; j2++) {
                      var cf = checked[j2], tt = t2.terms[j2];
                      if (i2 === 0)
                        checked[j2] = tt;
                      else if (cf && !cf.equals(tt))
                        checked[j2] = void 0;
                    }
                  }
                  for (var i2 = 0; i2 < checked.length; i2++) {
                    var t2 = checked[i2];
                    if (t2 && !t2.equals(0))
                      return i2;
                  }
                  return lead_var2;
                };
                var sf = function(a, b) {
                  var l1 = a.len(), l22 = b.len();
                  var blv = b.terms[lead_var], alv = a.terms[lead_var];
                  if (l22 > l1 && blv.greaterThan(alv))
                    return l22 - l1;
                  return blv.subtract(alv);
                };
                lead_var = try_better_lead_var(s1, s2, lead_var);
                s1.sort(sf);
                s2.sort(sf);
                var fdt = s2[0], fnt = s1[0];
                var den = new MVTerm(new Frac(1), [], fnt.map);
                if (fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {
                  for (var i = 0; i < fnt.terms.length; i++) {
                    var d = fdt.terms[i].subtract(fnt.terms[i]);
                    if (!d.equals(0)) {
                      var nd = d.add(new Frac(1));
                      den.terms[i] = d;
                      for (var j = 0; j < s1.length; j++) {
                        s1[j].terms[i] = s1[j].terms[i].add(nd);
                      }
                    } else
                      den.terms[i] = new Frac(0);
                  }
                }
                var dividend_larger = is_larger(s1[0], s2[0]);
                var safety = 0;
                var max = 200;
                while (dividend_larger && can_divide(s1, s2)) {
                  if (safety++ > max) {
                    throw new core.exceptions.InfiniteLoopError("Unable to compute!");
                  }
                  var q = s1[0].divide(s2[0]);
                  quotient.push(q);
                  s1.shift();
                  for (var i = 1; i < s2.length; i++) {
                    var t = s2[i].multiply(q).generateImage(), l2 = s1.length;
                    if (l2 === 0) {
                      t.coeff = t.coeff.neg();
                      s1.push(t);
                      s1.sort(sf);
                    }
                    for (var j = 0; j < l2; j++) {
                      var cur = s1[j];
                      if (cur.getImg() === t.getImg()) {
                        cur.coeff = cur.coeff.subtract(t.coeff);
                        if (cur.coeff.equals(0)) {
                          core.Utils.remove(s1, j);
                          j--;
                        }
                        break;
                      }
                      if (j === l2 - 1) {
                        t.coeff = t.coeff.neg();
                        s1.push(t);
                        s1.sort(sf);
                      }
                    }
                  }
                  dividend_larger = is_larger(s1[0], s2[0]);
                  if (!dividend_larger && s1.length >= s2.length) {
                    for (var i = 1; i < s1.length; i++) {
                      dividend_larger = is_larger(s1[i], s2[0]);
                      if (dividend_larger) {
                        s1.unshift(core.Utils.remove(s1, i));
                        break;
                      }
                    }
                  }
                }
              }
              quot = reconvert(quotient);
              rem = reconvert(s1);
              if (typeof den !== "undefined") {
                den = den.toSymbol();
                quot = _.divide(quot, den.clone());
                rem = _.divide(rem, den);
              }
            }
            if (parse_funcs) {
              quot = _.parse(quot.text(), subs);
              rem = _.parse(rem.text(), subs);
            }
            return [quot, rem];
          } catch (e) {
            return fail;
          }
        },
        line: function(v1, v2, x) {
          if (core.Utils.isArray(v1))
            v1 = core.Utils.convertToVector(v1);
          if (core.Utils.isArray(v2))
            v2 = core.Utils.convertToVector(v2);
          x = _.parse(x || "x");
          if (!core.Utils.isVector(v1) || !core.Utils.isVector(v2))
            _.error('Line expects a vector! Received "' + v1 + '" & "' + v2 + '"');
          var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()), dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()), m = _.divide(dy, dx), a = _.multiply(x, m.clone()), b = _.multiply(v1.e(1).clone(), m);
          return _.add(_.subtract(a, b), v1.e(2).clone());
        },
        PartFrac: {
          createTemplate: function(den, denom_factors, f_array, v) {
            den = __.Factor.factor(den);
            den.each(function(x, key) {
              if (x.group === FN && x.fname === "" && x.args[0].group === S) {
                var y = x.args[0];
                if (this.symbols) {
                  delete this.symbols[key];
                  this.symbols[y.value] = y;
                } else {
                  den = x.args[0];
                }
              }
            });
            var factors, factors_vec, f, p, deg, degrees, m;
            factors = denom_factors.collectFactors();
            factors_vec = [];
            degrees = [];
            m = new Symbol2(1);
            for (var i = 0; i < factors.length; i++) {
              var factor = Symbol2.unwrapPARENS(factors[i]);
              if (factor.power.greaterThan(1)) {
                p = Number(factor.power);
                f = factor.clone().toLinear();
                deg = Number(__.degree(f, v));
                for (var j = 0; j < p; j++) {
                  var efactor = _.pow(f.clone(), new Symbol2(j + 1));
                  f_array.push(efactor.clone());
                  var d = _.divide(den.clone(), efactor.clone());
                  degrees.push(deg);
                  factors_vec.push(d);
                }
              } else {
                deg = Number(__.degree(factor, v));
                f_array.push(factor);
                var d = _.divide(den.clone(), factor.clone());
                d = _.expand(Symbol2.unwrapPARENS(d));
                degrees.push(deg);
                factors_vec.push(d);
              }
            }
            f_array = f_array.map(function(x) {
              return _.multiply(x, m.clone());
            });
            return [f_array, factors_vec, degrees];
          },
          partfrac: function(symbol, v, as_array) {
            var vars = variables(symbol);
            v = v || _.parse(vars[0]);
            try {
              var num, den, factors, tfactors, ofactors, nterms, degrees, dterms, max, M, c, powers, div, r, factors_vec, ks, template, tfactors;
              num = _.expand(symbol.getNum());
              den = _.expand(symbol.getDenom().toUnitMultiplier());
              num.multiplier = symbol.multiplier;
              nterms = num.groupTerms(v);
              if (Number(__.degree(num, v)) >= Number(__.degree(den, v))) {
                div = __.div(num.clone(), _.expand(den.clone()));
                r = div[0];
                num = div[1];
                nterms = num.groupTerms(v);
              } else
                r = new Symbol2(0);
              if (Number(__.degree(den, v)) === 1) {
                var q = _.divide(num, den);
                if (as_array)
                  return [r, q];
                return _.add(r, q);
              }
              ofactors = __.Factor.factor(den);
              template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);
              tfactors = template[0];
              factors_vec = template[1];
              degrees = template[2];
              powers = [nterms.length];
              dterms = [];
              factors = [];
              ks = [];
              var factor, deg;
              factors_vec.map(function(x2, idx) {
                factor = tfactors[idx];
                deg = degrees[idx];
                for (var i2 = 0; i2 < deg; i2++) {
                  factors.push(factor.clone());
                  var k = Symbol2.create(v, i2);
                  var t2 = _.expand(_.multiply(x2, k.clone())).groupTerms(v);
                  var p = t2.length;
                  powers.push(p);
                  dterms.push(t2);
                  ks.push(k.clone());
                }
              });
              max = core.Utils.arrayMax(powers);
              c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();
              M = new core.Matrix();
              for (var i = 0; i < dterms.length; i++) {
                M.elements.push(core.Utils.fillHoles(dterms[i], max));
              }
              var partials = _.multiply(M.transpose().invert(), c);
              var retval = as_array ? [r] : r;
              partials.each(function(e, i2) {
                var term = _.multiply(ks[i2], _.divide(e, factors[i2]));
                if (as_array)
                  retval.push(term);
                else
                  retval = _.add(retval, term);
              });
              return retval;
            } catch (e) {
              try {
                if (symbol.isComposite()) {
                  var denominators = {};
                  symbol.each(function(x2) {
                    var d = x2.getDenom();
                    var n2 = x2.getNum();
                    var e2 = denominators[d];
                    denominators[d] = e2 ? _.add(e2, n2) : n2;
                  });
                  var t = new Symbol2(0);
                  for (var x in denominators) {
                    t = _.add(t, _.divide(denominators[x], _.parse(x)));
                  }
                  symbol = t;
                }
              } catch (e2) {
              }
              ;
            }
            ;
            return symbol;
          }
        },
        degree: function(symbol, v, o) {
          o = o || {
            nd: [],
            //numeric
            sd: [],
            //symbolic
            depth: 0
            //call depth
          };
          if (!v) {
            var vars = variables(symbol);
            if (vars.length > 1)
              throw new Error("You must specify the variable for multivariate polynomials!");
            if (vars.length === 0)
              return new Symbol2(0);
            v = _.parse(vars[0]);
          }
          var g = symbol.group;
          if (symbol.isComposite()) {
            symbol = symbol.clone();
            symbol.distributeExponent();
            symbol.each(function(x) {
              o.depth++;
              __.degree(x, v, o);
              o.depth--;
            });
          } else if (symbol.group === CB) {
            symbol.each(function(x) {
              o.depth++;
              __.degree(x, v, o);
              o.depth++;
            });
          } else if (g === EX && symbol.value === v.value) {
            o.sd.push(symbol.power.clone());
          } else if (g === S && symbol.value === v.value) {
            o.nd.push(_.parse(symbol.power));
          } else
            o.nd.push(new Symbol2(0));
          var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : void 0;
          if (o.depth === 0 && o.sd.length > 0) {
            if (deg !== void 0)
              o.sd.unshift(deg);
            return _.symfunction("max", o.sd);
          }
          if (!core.Utils.isSymbol(deg))
            deg = _.parse(deg);
          return deg;
        },
        /**
         * Attempts to complete the square of a polynomial
         * @param {type} symbol
         * @param {type} v
         * @param {type} raw
         * @throws {Error} 
         * @returns {Object|Symbol[]}
         */
        sqComplete: function(symbol, v, raw) {
          if (!core.Utils.isSymbol(v))
            v = _.parse(v);
          var stop = function(msg) {
            msg = msg || "Stopping";
            throw new core.exceptions.ValueLimitExceededError(msg);
          };
          if (!symbol.isPoly(true))
            stop("Must be a polynomial!");
          var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;
          br = core.Utils.inBrackets;
          symbol = symbol.clone();
          deg = core.Algebra.degree(symbol, v);
          if (!deg.equals(2))
            stop("Cannot complete square for degree " + deg);
          coeffs = core.Algebra.coeffs(symbol, v);
          a = coeffs[2];
          sign = coeffs[1].sign();
          b = _.divide(coeffs[1], new Symbol2(2));
          c = _.pow(b.clone(), new Symbol2(2));
          if (raw)
            return [a, b, d];
          sqrt_a = math.sqrt(a);
          e = _.divide(math.sqrt(c), sqrt_a.clone());
          d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol2(2)));
          sym = _.parse(br(sqrt_a.clone() + "*" + v + (sign < 0 ? "-" : "+") + e));
          return {
            a: sym,
            c: d,
            f: _.add(_.pow(sym.clone(), new Symbol2(2)), d.clone())
          };
        },
        Simplify: {
          strip: function(symbol) {
            var c = _.parse(symbol.multiplier);
            symbol.toUnitMultiplier();
            var p = _.parse(symbol.power);
            symbol.toLinear();
            return [c, p, symbol];
          },
          unstrip: function(cp, symbol) {
            var c = cp[0];
            var p = cp[1];
            return _.multiply(c, _.pow(symbol, p));
          },
          complexSimp: function(num, den) {
            var ac, bd, bc, ad, cd, r1, r2, i1, i2;
            r1 = num.realpart();
            i1 = num.imagpart();
            r2 = den.realpart();
            i2 = den.imagpart();
            ac = _.multiply(r1.clone(), r2.clone());
            bd = _.multiply(i1.clone(), i2.clone());
            bc = _.multiply(r2.clone(), i1);
            ad = _.multiply(r1, i2.clone());
            cd = _.add(_.pow(r2, new Symbol2(2)), _.pow(i2, new Symbol2(2)));
            return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol2.imaginary())), cd);
          },
          trigSimp: function(symbol) {
            if (symbol.containsFunction(["cos", "sin", "tan"])) {
              symbol = symbol.clone();
              var sym_array = __.Simplify.strip(symbol);
              symbol = sym_array.pop();
              var retval = symbol.clone();
              if (symbol.group === CP) {
                var sym = new Symbol2(0);
                symbol.each(function(x) {
                  var tr = __.Simplify.trigSimp(x.fnTransform());
                  sym = _.add(sym, tr);
                }, true);
                retval = _.pow(_.multiply(new Symbol2(symbol.multiplier), sym), new Symbol2(symbol.power));
              } else if (symbol.group === CB) {
                var n2 = symbol.getNum();
                var d = symbol.getDenom();
                if (n2.fname === "sin" && d.fname === "cos" && n2.args[0].equals(d.args[0]) && n2.power.equals(d.power)) {
                  retval = _.parse(core.Utils.format("({0})*({1})*tan({2})^({3})", d.multiplier, n2.multiplier, n2.args[0], n2.power));
                }
                if (retval.group === CB) {
                  var t = new Symbol2(1);
                  retval.each(function(x) {
                    if (x.fname === "tan") {
                      x = _.parse(core.Utils.format("({0})*sin({1})^({2})/cos({1})^({2})", x.multiplier, __.Simplify.simplify(x.args[0]), x.power));
                    }
                    t = _.multiply(t, x);
                  });
                  retval = t;
                }
              }
              retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();
              symbol = retval;
            }
            return symbol;
          },
          fracSimp: function(symbol) {
            var den = symbol.getDenom();
            var num = symbol.getNum();
            if (num.isImaginary() && den.isImaginary())
              symbol = __.Simplify.complexSimp(num, den);
            if (symbol.isComposite()) {
              if (symbol.power > 1) {
                symbol = _.expand(symbol);
              }
              var symbols = symbol.collectSymbols();
              var retval, a, b, d1, d2, n1, n2, s, x, y, c, den, num;
              a = symbols.pop();
              while (symbols.length) {
                b = symbols.pop();
                d1 = _.parse(a.getDenom());
                d2 = _.parse(b.getDenom());
                n1 = a.getNum();
                n2 = b.getNum();
                c = _.multiply(d1.clone(), d2.clone());
                x = _.multiply(n1, d2);
                y = _.multiply(n2, d1);
                s = _.add(x, y);
                a = _.divide(s, c);
              }
              den = _.expand(a.getDenom());
              num = _.expand(a.getNum());
              if (num.isImaginary() && den.isImaginary()) {
                retval = __.Simplify.complexSimp(num, den);
              } else {
                retval = _.divide(num, den);
              }
              if (retval.equals(symbol)) {
                return symbol;
              }
              return __.Simplify.simplify(retval);
            }
            return symbol;
          },
          ratSimp: function(symbol) {
            if (symbol.group === CB) {
              var den = symbol.getDenom();
              var num = symbol.getNum().distributeMultiplier();
              var d = __.Simplify.fracSimp(den);
              var n2 = __.Simplify.fracSimp(num);
              symbol = _.divide(n2, d);
            }
            return symbol;
          },
          sqrtSimp: function(symbol, sym_array) {
            var retval;
            if (symbol.isSQRT()) {
              var factored = __.Factor.factor(symbol.args[0].clone());
              var m = _.parse(factored.multiplier);
              var sign = m.sign();
              var retval = _.sqrt(m.abs());
              var arg;
              if (isInt(retval)) {
                if (factored.group === CB) {
                  var rem = new Symbol2(1);
                  factored.each(function(x) {
                    if (x.group === N) {
                      var trial = _.sqrt(x.clone());
                      if (isInt(trial)) {
                        retval = _.multiply(retval, trial);
                      } else {
                        rem = _.multiply(rem, x);
                      }
                    } else {
                      rem = _.multiply(rem, x);
                    }
                  });
                  var t = _.multiply(rem, _.parse(sign));
                  arg = _.sqrt(t.clone());
                  if (arg.isImaginary) {
                    arg = _.sqrt(_.expand(t.clone()));
                  }
                } else {
                  arg = _.sqrt(factored.clone().toUnitMultiplier());
                }
                return _.multiply(retval, arg);
              }
            } else if (symbol.isComposite() && symbol.isLinear()) {
              retval = new Symbol2(0);
              symbol.each(function(x) {
                retval = _.add(retval, __.Simplify.sqrtSimp(x));
              }, true);
              retval = _.multiply(retval, _.parse(symbol.multiplier));
            } else if (symbol.group === CB) {
              retval = _.parse(symbol.multiplier);
              symbol.each(function(x) {
                var simp = __.Simplify.sqrtSimp(x);
                retval = _.multiply(retval, simp);
              }, true);
              retval = _.pow(retval, _.parse(symbol.power));
            }
            return retval ? retval : _.parse(symbol);
          },
          /**
           * Unused. The goal is to substitute out patterns but it currently doesn't work.
           * @param {Symbol} symbol
           * @return {Array} The symbol and the matched patterns
           */
          patternSub: function(symbol) {
            var patterns = {};
            var has_CP = function(symbol2) {
              var found = false;
              symbol2.each(function(x) {
                if (x.group === CP) {
                  found = true;
                } else if (x.symbols) {
                  found = has_CP(x);
                }
              });
              return found;
            };
            var collect = function(sym) {
              sym.each(function(x) {
                if (!x.symbols && x.group !== FN) {
                  return;
                }
                if (has_CP(x)) {
                  collect(x);
                } else {
                  if (!patterns[x.value]) {
                    var u = core.Utils.getU(symbol);
                    patterns[x.value] = u;
                    symbol = symbol.sub(x.value, u);
                  }
                }
              }, true);
            };
            collect(symbol);
            return [symbol, patterns];
          },
          simplify: function(symbol) {
            var sym_array = __.Simplify.strip(symbol);
            symbol = sym_array.pop();
            symbol = __.Simplify.fracSimp(symbol);
            if (symbol.isConstant() || symbol.group === core.groups.S) {
              sym_array.push(symbol);
              var ret = __.Simplify.unstrip(sym_array, symbol);
              return ret;
            }
            var simplified = symbol.clone();
            simplified = __.Simplify.trigSimp(simplified);
            simplified = __.Simplify.ratSimp(simplified);
            simplified = __.Factor.factor(simplified);
            if (simplified.group === core.groups.CP && simplified.isLinear()) {
              var m = simplified.multiplier.clone();
              simplified.toUnitMultiplier();
              var r = new Symbol2(0);
              simplified.each(function(x) {
                var s = __.Simplify.simplify(x);
                r = _.add(r, s);
              });
              simplified = r;
              r.multiplier = r.multiplier.multiply(m);
            }
            var retval = __.Simplify.unstrip(sym_array, simplified);
            return retval;
          }
        },
        Classes: {
          Polynomial,
          Factors,
          MVTerm
        }
      };
      core.Expression.prototype.simplify = function() {
        return __.Simplify.simplify(this.symbol);
      };
      nerdamer.useAlgebraDiv = function() {
        var divide = __.divideFn = _.divide;
        var calls = 0;
        _.divide = function(a, b) {
          calls++;
          var ans;
          if (calls === 1)
            ans = core.Algebra.divide(a, b);
          else
            ans = divide(a, b);
          calls = 0;
          return ans;
        };
      };
      nerdamer.useParserDiv = function() {
        if (__.divideFn)
          _.divide = __.divideFn;
        delete __.divideFn;
      };
      nerdamer.register([
        {
          name: "factor",
          visible: true,
          numargs: 1,
          build: function() {
            return __.Factor.factor;
          }
        },
        {
          name: "simplify",
          visible: true,
          numargs: 1,
          build: function() {
            return __.Simplify.simplify;
          }
        },
        {
          name: "gcd",
          visible: true,
          numargs: [1],
          build: function() {
            return __.gcd;
          }
        },
        {
          name: "lcm",
          visible: true,
          numargs: [1],
          build: function() {
            return __.lcm;
          }
        },
        {
          name: "roots",
          visible: true,
          numargs: -1,
          build: function() {
            return __.roots;
          }
        },
        {
          name: "divide",
          visible: true,
          numargs: 2,
          build: function() {
            return __.divide;
          }
        },
        {
          name: "div",
          visible: true,
          numargs: 2,
          build: function() {
            return __.div;
          }
        },
        {
          name: "partfrac",
          visible: true,
          numargs: [1, 2],
          build: function() {
            return __.PartFrac.partfrac;
          }
        },
        {
          name: "deg",
          visible: true,
          numargs: [1, 2],
          build: function() {
            return __.degree;
          }
        },
        {
          name: "coeffs",
          visible: true,
          numargs: [1, 2],
          build: function() {
            var f = function() {
              var coeffs = __.coeffs.apply(__, arguments);
              return new core.Vector(coeffs);
            };
            return f;
          }
        },
        {
          name: "line",
          visible: true,
          numargs: [2, 3],
          build: function() {
            return __.line;
          }
        },
        {
          name: "sqcomp",
          visible: true,
          numargs: [1, 2],
          build: function() {
            var f = function(x, v) {
              try {
                v = v || variables(x)[0];
                var sq = __.sqComplete(x.clone(), v);
                return sq.f;
              } catch (e) {
                return x;
              }
            };
            return f;
          }
        }
      ]);
      nerdamer.updateAPI();
    })();
  }
});

// node_modules/nerdamer/Calculus.js
var require_Calculus = __commonJS({
  "node_modules/nerdamer/Calculus.js"(exports, module) {
    if (typeof module !== "undefined" && typeof nerdamer === "undefined") {
      nerdamer = require_nerdamer_core();
      require_Algebra();
    }
    var nerdamer;
    (function() {
      "use strict";
      var core = nerdamer.getCore(), _ = core.PARSER, Frac = core.Frac, Settings = core.Settings, isSymbol = core.Utils.isSymbol, FN = core.groups.FN, Symbol2 = core.Symbol, text = core.Utils.text, inBrackets = core.Utils.inBrackets, isInt = core.Utils.isInt, format = core.Utils.format, even = core.Utils.even, evaluate = core.Utils.evaluate, N = core.groups.N, S = core.groups.S, FN = core.groups.FN, PL = core.groups.PL, CP = core.groups.CP, CB = core.groups.CB, EX = core.groups.EX, P = core.groups.P, LOG = Settings.LOG, EXP = "exp", ABS = "abs", SQRT = "sqrt", SIN = "sin", COS = "cos", TAN = "tan", SEC = "sec", CSC = "csc", COT = "cot", ASIN = "asin", ACOS = "acos", ATAN = "atan", ASEC = "asec", ACSC = "acsc", ACOT = "acot", SINH = "sinh", COSH = "cosh", TANH = "tanh", CSCH = "csch", SECH = "sech", COTH = "coth", ASECH = "asech", ACSCH = "acsch", ACOTH = "acoth";
      function NoIntegralFound(msg) {
        this.message = msg || "";
      }
      NoIntegralFound.prototype = new Error();
      Symbol2.prototype.hasIntegral = function() {
        return this.containsFunction("integrate");
      };
      Symbol2.prototype.fnTransform = function() {
        if (this.group !== FN)
          return this;
        var retval, a = this.args[0];
        var m = new Symbol2(this.multiplier);
        var sym = this.clone().toUnitMultiplier();
        if (this.isLinear()) {
          switch (this.fname) {
            case SINH:
              retval = _.parse(format("(e^({0})-e^(-({0})))/2", a));
              break;
            case COSH:
              retval = _.parse(format("(e^({0})+e^(-({0})))/2", a));
              break;
            case TANH:
              retval = _.parse(format("(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))", a));
              break;
            case TAN:
              retval = _.parse(format("sin({0})/cos({0})", a));
              break;
            case CSC:
              retval = _.parse(format("1/sin({0})", a));
              break;
            case SEC:
              retval = _.parse(format("1/cos({0})", a));
              break;
            default:
              retval = sym;
          }
        } else if (this.power.equals(2)) {
          switch (this.fname) {
            case SIN:
              retval = _.parse(format("1/2-cos(2*({0}))/2", a));
              break;
            case COS:
              retval = _.parse(format("1/2+cos(2*({0}))/2", a));
              break;
            case TAN:
              retval = _.parse(format("sin({0})^2/cos({0})^2", a));
              break;
            case COSH:
              retval = _.parse(format("1/2+cosh(2*({0}))/2", a));
              break;
            case SINH:
              retval = _.parse(format("-1/2+cosh(2*({0}))/2", a));
              break;
            case TANH:
              retval = _.parse(format("(1+cosh(2*({0})))/(-1+cosh(2*({0})))", a));
              break;
            case SEC:
              retval = _.parse(format("(1-cos(2*({0})))/(1+cos(2*({0})))+1", a));
              break;
            default:
              retval = sym;
          }
        } else if (this.fname === SEC) {
          retval = _.parse(format("1/cos({0})^({1})", this.args[0], this.power));
        } else if (this.fname === CSC) {
          retval = _.parse(format("1/sin({0})^({1})", this.args[0], this.power));
        } else if (this.fname === TAN) {
          if (this.power.lessThan(0)) {
            retval = _.parse(format("cos({0})^(-({1}))/sin({0})^({1})", this.args[0], this.power.negate()));
          } else {
            retval = _.parse(format("sin({0})^({1})/cos({0})^({1})", this.args[0], this.power));
          }
        } else if (this.fname === SIN && this.power.lessThan(0)) {
          retval = _.parse(format("csc({0})^(-({1}))", this.args[0], this.power.negate()));
        } else if (this.fname === COS && this.power.lessThan(0)) {
          retval = _.parse(format("sec({0})^(-({1}))", this.args[0], this.power.negate()));
        } else if (this.fname === SIN && this.power.equals(3)) {
          retval = _.parse(format("(3*sin({0})-sin(3*({0})))/4", this.args[0]));
        } else if (this.fname === COS && this.power.equals(3)) {
          retval = _.parse(format("(cos(3*({0}))+3*cos({0}))/4", this.args[0]));
        } else if ((this.fname === COS || this.fname === SIN) && even(this.power)) {
          var n2 = this.power / 2;
          var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform();
          var transformed = _.expand(_.pow(double_angle, _.parse(n2)));
          retval = new Symbol2(0);
          transformed.each(function(s) {
            var t = s.fnTransform();
            retval = _.add(retval, t);
          }, true);
        } else
          retval = sym;
        return _.multiply(retval, m);
      };
      Symbol2.prototype.hasTrig = function() {
        if (this.isConstant(true) || this.group === S)
          return false;
        if (this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))
          return true;
        if (this.symbols) {
          for (var x in this.symbols)
            if (this.symbols[x].hasTrig())
              return true;
        }
        return false;
      };
      core.Expression.prototype.hasIntegral = function() {
        return this.symbol.hasIntegral();
      };
      core.Utils.toCommonDenominator = function(symbol) {
        if (symbol.isComposite() && symbol.isLinear()) {
          var m = new Symbol2(symbol.multiplier);
          var denominator = new Symbol2(1);
          var numerator = new Symbol2(0);
          symbol.each(function(x) {
            denominator = _.multiply(denominator, x.getDenom());
          }, true);
          symbol.each(function(x) {
            var num = x.getNum();
            var den = x.getDenom();
            var factor = _.multiply(num, _.divide(denominator.clone(), den));
            numerator = _.add(numerator, factor);
          });
          var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));
          return retval;
        }
        return symbol;
      };
      core.Utils.in_inverse_trig = function(x) {
        var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];
        return inv_trig_fns.indexOf(x) !== -1;
      };
      core.Utils.in_trig = function(x) {
        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];
        return trig_fns.indexOf(x) !== -1;
      };
      core.Utils.in_htrig = function(x) {
        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];
        return trig_fns.indexOf(x) !== -1;
      };
      core.Matrix.jacobian = function(eqns, vars) {
        var jacobian = new core.Matrix();
        if (!vars) {
          vars = core.Utils.arrayGetVariables(eqns);
        }
        vars.forEach(function(v, i) {
          eqns.forEach(function(eq, j) {
            var e = core.Calculus.diff(eq.clone(), v);
            jacobian.set(j, i, e);
          });
        });
        return jacobian;
      };
      core.Matrix.prototype.max = function() {
        var max = new Symbol2(0);
        this.each(function(x) {
          var e = x.abs();
          if (e.gt(max))
            max = e;
        });
        return max;
      };
      core.Matrix.cMatrix = function(value, vars) {
        var m = new core.Matrix();
        vars.forEach(function(v, i) {
          m.set(i, 0, _.parse(value));
        });
        return m;
      };
      var all_functions = core.Utils.all_functions = function(arr) {
        for (var i = 0, l = arr.length; i < l; i++)
          if (arr[i].group !== FN)
            return false;
        return true;
      }, cosAsinBtransform = core.Utils.cosAsinBtranform = function(symbol1, symbol2) {
        var a, b;
        a = symbol1.args[0];
        b = symbol2.args[0];
        return _.parse(format("(sin(({0})+({1}))-sin(({0})-({1})))/2", a, b));
      }, cosAsinAtransform = core.Utils.cosAsinAtranform = function(symbol1, symbol2) {
        if (Number(symbol2.power) !== 1)
          return _.multiply(symbol1, symbol2);
        var a;
        a = symbol1.args[0];
        return _.parse(format("(sin(2*({0})))/2", a));
      }, sinAsinBtransform = core.Utils.cosAsinBtranform = function(symbol1, symbol2) {
        var a, b;
        a = symbol1.args[0];
        b = symbol2.args[0];
        return _.parse(format("(cos(({0})+({1}))-cos(({0})-({1})))/2", a, b));
      }, trigTransform = core.Utils.trigTransform = function(arr) {
        var map = {}, symbol, t, retval = new Symbol2(1);
        for (var i = 0, l = arr.length; i < l; i++) {
          symbol = arr[i];
          if (symbol.group === FN) {
            var fname = symbol.fname;
            if (fname === COS && map[SIN]) {
              if (map[SIN].args[0].toString() !== symbol.args[0].toString()) {
                t = cosAsinBtransform(symbol, map[SIN]);
              } else {
                t = cosAsinAtransform(symbol, map[SIN]);
              }
              delete map[SIN];
              retval = _.multiply(retval, t);
            } else if (fname === SIN && map[COS]) {
              if (map[COS].args[0].toString() !== symbol.args[0].toString()) {
                t = cosAsinBtransform(symbol, map[COS]);
              } else {
                t = cosAsinAtransform(symbol, map[COS]);
              }
              delete map[COS];
              retval = _.multiply(retval, t);
            } else if (fname === SIN && map[SIN]) {
              if (map[SIN].args[0].toString() !== symbol.args[0].toString()) {
                t = sinAsinBtransform(symbol, map[SIN]);
                delete map[SIN];
              } else {
                t = _.multiply(symbol, map[SIN]);
                delete map[SIN];
              }
              retval = t;
            } else {
              map[fname] = symbol;
            }
          } else
            retval = _.multiply(retval, symbol);
        }
        for (var x in map)
          retval = _.multiply(retval, map[x]);
        return retval;
      };
      core.Settings.integration_depth = 10;
      core.Settings.max_lim_depth = 10;
      var __ = core.Calculus = {
        version: "1.4.6",
        sum: function(fn, index, start, end) {
          if (!(index.group === core.groups.S))
            throw new core.exceptions.NerdamerTypeError("Index must be symbol. " + text(index) + " provided");
          index = index.value;
          var retval;
          if (core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {
            var modifier = end - start < 200 ? "" : "PARSE2NUMBER";
            start = Number(start);
            end = Number(end);
            retval = core.Utils.block(modifier, function() {
              var f = fn.text(), subs = { "~": true }, retval2 = new core.Symbol(0);
              for (var i = start; i <= end; i++) {
                subs[index] = new Symbol2(i);
                var ans = _.parse(f, subs);
                retval2 = _.add(retval2, ans);
              }
              return retval2;
            });
          } else {
            retval = _.symfunction("sum", arguments);
          }
          return retval;
        },
        product: function(fn, index, start, end) {
          if (!(index.group === core.groups.S))
            throw new core.exceptions.NerdamerTypeError("Index must be symbol. " + text(index) + " provided");
          index = index.value;
          var retval;
          if (core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {
            var modifier = end - start < 200 ? "" : "PARSE2NUMBER";
            retval = core.Utils.block(modifier, function() {
              start = Number(start);
              end = Number(end.multiplier);
              var f = fn.text(), subs = {}, retval2 = new core.Symbol(1);
              for (var i = start; i <= end; i++) {
                subs[index] = new Symbol2(i);
                retval2 = _.multiply(retval2, _.parse(f, subs));
              }
              return retval2;
            });
          } else {
            retval = _.symfunction("product", arguments);
          }
          return retval;
        },
        diff: function(symbol, wrt, nth) {
          if (core.Utils.isVector(symbol)) {
            var vector = new core.Vector([]);
            symbol.each(function(x) {
              vector.elements.push(__.diff(x, wrt, nth));
            });
            return vector;
          } else if (core.Utils.isMatrix(symbol)) {
            var matrix = new core.Matrix();
            symbol.each(function(x, i, j) {
              matrix.set(i, j, __.diff(x, wrt, nth));
            });
            return matrix;
          }
          var d = isSymbol(wrt) ? wrt.text() : wrt;
          nth = isSymbol(nth) ? nth.multiplier : nth || 1;
          if (d === void 0)
            d = core.Utils.variables(symbol)[0];
          if (symbol.group === FN && symbol.fname === SQRT) {
            var s = symbol.args[0], sp = symbol.power.clone();
            if (s.group !== N || s.group !== P) {
              s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol2(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);
              s.multiplier = s.multiplier.multiply(symbol.multiplier);
            }
            symbol = s;
          }
          if (symbol.group === FN && !isSymbol(symbol.power)) {
            var a = derive(_.parse(symbol));
            var b = __.diff(symbol.args[0].clone(), d);
            symbol = _.multiply(a, b);
          } else {
            symbol = derive(symbol);
          }
          if (nth > 1) {
            nth--;
            symbol = __.diff(symbol, wrt, nth);
          }
          return symbol;
          function polydiff(symbol2) {
            if (symbol2.value === d || symbol2.contains(d, true)) {
              symbol2.multiplier = symbol2.multiplier.multiply(symbol2.power);
              symbol2.power = symbol2.power.subtract(new Frac(1));
              if (symbol2.power.equals(0)) {
                symbol2 = Symbol2(symbol2.multiplier);
              }
            }
            return symbol2;
          }
          function derive(symbol2) {
            var g = symbol2.group, a2, b2, cp;
            if (g === N || g === S && symbol2.value !== d || g === P) {
              symbol2 = Symbol2(0);
            } else if (g === S) {
              symbol2 = polydiff(symbol2);
            } else if (g === CB) {
              var m = symbol2.multiplier.clone();
              symbol2.toUnitMultiplier();
              var retval = _.multiply(product_rule(symbol2), polydiff(symbol2));
              retval.multiplier = retval.multiplier.multiply(m);
              return retval;
            } else if (g === FN && symbol2.power.equals(1)) {
              switch (symbol2.fname) {
                case LOG:
                  cp = symbol2.clone();
                  symbol2 = symbol2.args[0].clone();
                  symbol2.power = symbol2.power.negate();
                  symbol2.multiplier = cp.multiplier.divide(symbol2.multiplier);
                  break;
                case COS:
                  symbol2.fname = SIN;
                  symbol2.multiplier.negate();
                  break;
                case SIN:
                  symbol2.fname = COS;
                  break;
                case TAN:
                  symbol2.fname = SEC;
                  symbol2.power = new Frac(2);
                  break;
                case SEC:
                  symbol2 = qdiff(symbol2, TAN);
                  break;
                case CSC:
                  symbol2 = qdiff(symbol2, "-cot");
                  break;
                case COT:
                  symbol2.fname = CSC;
                  symbol2.multiplier.negate();
                  symbol2.power = new Frac(2);
                  break;
                case ASIN:
                  symbol2 = _.parse("(sqrt(1-(" + text(symbol2.args[0]) + ")^2))^(-1)");
                  break;
                case ACOS:
                  symbol2 = _.parse("-(sqrt(1-(" + text(symbol2.args[0]) + ")^2))^(-1)");
                  break;
                case ATAN:
                  symbol2 = _.parse("(1+(" + text(symbol2.args[0]) + ")^2)^(-1)");
                  break;
                case ABS:
                  m = symbol2.multiplier.clone();
                  symbol2.toUnitMultiplier();
                  b2 = symbol2.args[0].clone();
                  b2.toUnitMultiplier();
                  symbol2 = _.parse(inBrackets(text(symbol2.args[0])) + "/abs" + inBrackets(text(b2)));
                  symbol2.multiplier = m;
                  break;
                case "parens":
                  symbol2 = Symbol2(1);
                  break;
                case "cosh":
                  symbol2.fname = "sinh";
                  break;
                case "sinh":
                  symbol2.fname = "cosh";
                  break;
                case TANH:
                  symbol2.fname = SECH;
                  symbol2.power = new Frac(2);
                  break;
                case SECH:
                  symbol2 = qdiff(symbol2, "-tanh");
                  break;
                case CSCH:
                  var arg = String(symbol2.args[0]);
                  return _.parse("-coth(" + arg + ")*csch(" + arg + ")");
                  break;
                case COTH:
                  var arg = String(symbol2.args[0]);
                  return _.parse("-csch(" + arg + ")^2");
                  break;
                case "asinh":
                  symbol2 = _.parse("(sqrt(1+(" + text(symbol2.args[0]) + ")^2))^(-1)");
                  break;
                case "acosh":
                  symbol2 = _.parse("(sqrt(-1+(" + text(symbol2.args[0]) + ")^2))^(-1)");
                  break;
                case "atanh":
                  symbol2 = _.parse("(1-(" + text(symbol2.args[0]) + ")^2)^(-1)");
                  break;
                case ASECH:
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("-1/(sqrt(1/(" + arg + ")^2-1)*(" + arg + ")^2)");
                  break;
                case ACOTH:
                  symbol2 = _.parse("-1/((" + symbol2.args[0] + ")^2-1)");
                  break;
                case ACSCH:
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("-1/(sqrt(1/(" + arg + ")^2+1)*(" + arg + ")^2)");
                  break;
                case ASEC:
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("1/(sqrt(1-1/(" + arg + ")^2)*(" + arg + ")^2)");
                  break;
                case ACSC:
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("-1/(sqrt(1-1/(" + arg + ")^2)*(" + arg + ")^2)");
                  break;
                case ACOT:
                  symbol2 = _.parse("-1/((" + symbol2.args[0] + ")^2+1)");
                  break;
                case "S":
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("sin((pi*(" + arg + ")^2)/2)");
                  break;
                case "C":
                  var arg = String(symbol2.args[0]);
                  symbol2 = _.parse("cos((pi*(" + arg + ")^2)/2)");
                  break;
                case "Si":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("sin(" + arg + ")/(" + arg + ")");
                  break;
                case "Shi":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("sinh(" + arg + ")/(" + arg + ")");
                  break;
                case "Ci":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("cos(" + arg + ")/(" + arg + ")");
                  break;
                case "Chi":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("cosh(" + arg + ")/(" + arg + ")");
                  break;
                case "Ei":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("e^(" + arg + ")/(" + arg + ")");
                  break;
                case "Li":
                  var arg = symbol2.args[0];
                  symbol2 = _.parse("1/" + Settings.LOG + "(" + arg + ")");
                  break;
                case "erf":
                  symbol2 = _.parse("(2*e^(-(" + symbol2.args[0] + ")^2))/sqrt(pi)");
                  break;
                case "atan2":
                  var x_ = String(symbol2.args[0]), y_ = String(symbol2.args[1]);
                  symbol2 = _.parse("(" + y_ + ")/((" + y_ + ")^2+(" + x_ + ")^2)");
                  break;
                case "sign":
                  symbol2 = new Symbol2(0);
                  break;
                case "sinc":
                  symbol2 = _.parse(format("(({0})*cos({0})-sin({0}))*({0})^(-2)", symbol2.args[0]));
                  break;
                case Settings.LOG10:
                  symbol2 = _.parse("1/((" + symbol2.args[0] + ")*" + Settings.LOG + "(10))");
                  break;
                default:
                  symbol2 = _.symfunction("diff", [symbol2, wrt]);
              }
            } else if (g === EX || g === FN && isSymbol(symbol2.power)) {
              var value;
              if (g === EX) {
                value = symbol2.value;
              } else if (g === FN && symbol2.contains(d)) {
                value = symbol2.fname + inBrackets(text(symbol2.args[0]));
              } else {
                value = symbol2.value + inBrackets(text(symbol2.args[0]));
              }
              a2 = _.multiply(_.parse(LOG + inBrackets(value)), symbol2.power.clone());
              b2 = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol2.power.clone()), d);
              symbol2 = _.multiply(symbol2, b2);
            } else if (g === FN && !symbol2.power.equals(1)) {
              b2 = symbol2.clone();
              b2.toLinear();
              b2.toUnitMultiplier();
              symbol2 = _.multiply(polydiff(symbol2.clone()), derive(b2));
            } else if (g === CP || g === PL) {
              var c = symbol2.clone();
              var result = new Symbol2(0);
              for (var x in symbol2.symbols) {
                result = _.add(result, __.diff(symbol2.symbols[x].clone(), d));
              }
              symbol2 = _.multiply(polydiff(c), result);
            }
            symbol2.updateHash();
            return symbol2;
          }
          ;
          function qdiff(symbol2, val, altVal) {
            return _.multiply(symbol2, _.parse(val + inBrackets(altVal || text(symbol2.args[0]))));
          }
          ;
          function product_rule(symbol2) {
            var symbols = symbol2.collectSymbols(), result = new Symbol2(0), l = symbols.length;
            for (var i = 0; i < l; i++) {
              var df = __.diff(symbols[i].clone(), d);
              for (var j = 0; j < l; j++) {
                if (i !== j) {
                  df = _.multiply(df, symbols[j].clone());
                }
              }
              result = _.add(result, df);
            }
            return result;
          }
          ;
        },
        integration: {
          u_substitution: function(symbols, dx) {
            function try_combo(a2, b2, f3) {
              var d = __.diff(b2, dx);
              var q = f3 ? f3(a2, b2) : _.divide(a2.clone(), d);
              if (!q.contains(dx, true))
                return q;
              return null;
            }
            function do_fn_sub(fname, arg2) {
              var subbed = __.integrate(_.symfunction(fname, [new Symbol2(u)]), u, 0);
              subbed = subbed.sub(new Symbol2(u), arg2);
              subbed.updateHash();
              return subbed;
            }
            var a = symbols[0].clone(), b = symbols[1].clone(), g1 = a.group, g2 = b.group, u = "__u__", Q;
            if (g1 === FN && g2 !== FN) {
              var arg = a.args[0];
              Q = try_combo(b, arg.clone());
              if (Q)
                return _.multiply(Q, do_fn_sub(a.fname, arg));
              Q = try_combo(b, a);
              if (Q) {
                return __.integration.poly_integrate(a);
              }
            } else if (g2 === FN && g1 !== FN) {
              var arg = b.args[0];
              Q = try_combo(a, arg.clone());
              if (Q)
                return _.multiply(Q, do_fn_sub(b.fname, arg));
            } else if (g1 === FN && g2 === FN) {
              Q = try_combo(a.clone(), b.clone());
              if (Q)
                return _.multiply(__.integration.poly_integrate(b), Q);
              Q = try_combo(b.clone(), a.clone());
              if (Q)
                return _.multiply(__.integration.poly_integrate(b), Q);
            } else if (g1 === EX && g2 !== EX) {
              var p = a.power;
              Q = try_combo(b, p.clone());
              if (!Q) {
                var dc = __.integration.decompose_arg(p.clone(), dx);
                var xp = __.diff(dc[2].clone(), dx);
                var dc2 = __.integration.decompose_arg(xp.clone(), dx);
                if (_.multiply(dc[1], dc2[1]).power.equals(b.power)) {
                  var m = _.divide(dc[0].clone(), dc2[0].clone());
                  var new_val = _.multiply(m.clone(), _.pow(new Symbol2(a.value), _.multiply(dc[0], new Symbol2(u))));
                  new_val = _.multiply(new_val, new Symbol2(u));
                  return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());
                }
              }
              var integrated = __.integrate(a.sub(p.clone(), new Symbol2(u)), u, 0), retval = _.multiply(integrated.sub(new Symbol2(u), p), Q);
              return retval;
            } else if (g2 === EX && g1 !== EX) {
              var p = b.power;
              Q = try_combo(a, p.clone());
              var integrated = __.integrate(b.sub(p, new Symbol2(u)), u, 0);
              return _.multiply(integrated.sub(new Symbol2(u), p), Q);
            } else if (a.isComposite() || b.isComposite()) {
              var f = function(a2, b2) {
                var d = __.diff(b2, dx);
                var A = core.Algebra.Factor.factor(a2), B = core.Algebra.Factor.factor(d);
                var q = _.divide(A, B);
                return q;
              };
              var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(), f2 = b.isComposite() ? b.clone().toLinear() : b.clone();
              Q = try_combo(f1.clone(), f2.clone(), f);
              if (Q)
                return _.multiply(__.integration.poly_integrate(b), Q);
              Q = try_combo(f2.clone(), f1.clone(), f);
              if (Q)
                return _.multiply(__.integration.poly_integrate(a), Q);
            }
          },
          //simple integration of a single polynomial x^(n+1)/(n+1)
          poly_integrate: function(x) {
            var p = x.power.toString(), m = x.multiplier.toDecimal(), s = x.toUnitMultiplier().toLinear();
            if (Number(p) === -1) {
              return _.multiply(new Symbol2(m), _.symfunction(LOG, [s]));
            }
            return _.parse(format("({0})*({1})^(({2})+1)/(({2})+1)", m, s, p));
          },
          //If we're just spinning wheels we want to stop. This is why we 
          //wrap integration in a try catch block and call this to stop.
          stop: function(msg) {
            msg = msg || "Unable to compute integral!";
            core.Utils.warn(msg);
            throw new NoIntegralFound(msg);
          },
          partial_fraction: function(input, dx, depth, opt) {
            if (!isSymbol(dx))
              dx = _.parse(dx);
            var result, partial_fractions;
            result = new Symbol2(0);
            partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);
            if (partial_fractions.group === CB && partial_fractions.isLinear()) {
              partial_fractions.each(function(x) {
                if (!x.isLinear())
                  __.integration.stop();
              });
              partial_fractions.each(function(x) {
                result = _.add(result, __.integrate(x, dx, depth, opt));
              });
            } else {
              result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));
            }
            return result;
          },
          get_udv: function(symbol) {
            var parts = [[
              /*L*/
            ], [
              /*I*/
            ], [
              /*A*/
            ], [
              /*T*/
            ], [
              /*E*/
            ]];
            var setSymbol = function(x) {
              var g = x.group;
              if (g === FN) {
                var fname = x.fname;
                if (core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))
                  parts[3].push(x);
                else if (core.Utils.in_inverse_trig(fname))
                  parts[1].push(x);
                else if (fname === LOG)
                  parts[0].push(x);
                else {
                  __.integration.stop();
                }
              } else if (g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {
                parts[2].push(x);
              } else if (g === EX || x.isComposite() && !x.isLinear())
                parts[4].push(x);
              else
                __.integration.stop();
            };
            if (symbol.group === CB)
              symbol.each(function(x) {
                setSymbol(Symbol2.unwrapSQRT(x, true));
              });
            else
              setSymbol(symbol);
            var u, dv = new Symbol2(1);
            for (var i = 0; i < 5; i++) {
              var part = parts[i], t, l = part.length;
              if (l > 0) {
                if (l > 1) {
                  t = new Symbol2(1);
                  for (var j = 0; j < l; j++)
                    t = _.multiply(t, part[j].clone());
                } else
                  t = part[0].clone();
                if (!u) {
                  u = t;
                  u.multiplier = u.multiplier.multiply(symbol.multiplier);
                } else
                  dv = _.multiply(dv, t);
              }
            }
            return [u, dv];
          },
          trig_sub: function(symbol, dx, depth, opt, parts, symbols) {
            parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);
            var b = parts[3], ax = parts[2], a = parts[0], x = parts[1];
            if (x.power.equals(2) && a.greaterThan(0)) {
              var t = core.Utils.getU(symbol), u = _.parse(TAN + inBrackets(t)), du = _.parse(SEC + inBrackets(t) + "^2"), f = _.multiply(symbol.sub(x, u), du);
              var integral = __.integrate(f, t, depth, opt).sub(u, x);
              core.Utils.clearU(u);
              return integral;
            }
          },
          by_parts: function(symbol, dx, depth, o) {
            o.previous = o.previous || [];
            var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;
            udv = __.integration.get_udv(symbol);
            u = udv[0];
            dv = udv[1];
            du = Symbol2.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);
            c = du.clone().stripVar(dx);
            du = _.divide(du, c.clone());
            v = __.integrate(dv.clone(), dx, depth || 0);
            vdu = _.multiply(v.clone(), du);
            vdu_s = vdu.toString();
            if (o.previous.indexOf(vdu_s) !== -1 && core.Utils.in_trig(u.fname) && dv.isE()) {
              o.is_cyclic = true;
              return new Symbol2(1);
            } else
              o.previous.push(vdu_s);
            uv = _.multiply(u, v);
            m = vdu.multiplier.clone();
            vdu.toUnitMultiplier();
            integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);
            integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);
            retval = _.subtract(uv, integral_vdu);
            if (o.is_cyclic) {
              o.previous.pop();
              if (o.previous.length === 0) {
                retval = _.expand(retval);
                var rem = new Symbol2(0);
                retval.each(function(x) {
                  if (!x.contains(dx))
                    rem = _.add(rem, x.clone());
                });
                retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol2(1), rem));
              }
            }
            return retval;
          },
          /*
           * dependents: [Solve, integrate]
           */
          decompose_arg: core.Utils.decompose_fn
        },
        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output
        integrate: function(original_symbol, dt, depth, opt) {
          if (!dt) {
            var vars = core.Utils.variables(original_symbol);
            if (vars.length === 1)
              dt = vars[0];
            dt = dt || "x";
          }
          if (core.Utils.isVector(original_symbol)) {
            var vector = new core.Vector([]);
            original_symbol.each(function(x) {
              vector.elements.push(__.integrate(x, dt));
            });
            return vector;
          }
          if (!isNaN(dt))
            _.error("variable expected but received " + dt);
          if (original_symbol.isConstant(true))
            return _.multiply(original_symbol.clone(), _.parse(dt));
          opt = opt || {};
          return core.Utils.block("PARSE2NUMBER", function() {
            depth = depth || 0;
            var dx = isSymbol(dt) ? dt.toString() : dt, symbol = Symbol2.unwrapSQRT(original_symbol.clone(), true), g = symbol.group, retval;
            try {
              if (++depth > core.Settings.integration_depth)
                __.integration.stop("Maximum depth reached. Exiting!");
              if (!symbol.contains(dx, true)) {
                retval = _.multiply(symbol.clone(), _.parse(dx));
              } else if (g === S) {
                retval = __.integration.poly_integrate(symbol, dx, depth);
              } else if (g === EX) {
                if (symbol.previousGroup === FN && !(symbol.fname === "sqrt" || symbol.fname === Settings.PARENTHESIS))
                  __.integration.stop();
                if (symbol.contains(dx) && symbol.previousGroup !== FN) {
                  if (symbol.power.contains(dx))
                    __.integration.stop();
                  else {
                    var t = __.diff(symbol.clone().toLinear(), dx);
                    if (t.contains(dx))
                      __.integration.stop();
                    retval = __.integration.poly_integrate(symbol, dx, depth);
                  }
                } else {
                  var a = __.diff(symbol.power.clone(), dx);
                  if (a.contains(dx)) {
                    var aa = a.stripVar(dx), x = _.divide(a.clone(), aa.clone());
                    if (x.group === S && x.isLinear()) {
                      aa.multiplier = aa.multiplier.divide(new Frac(2));
                      return _.parse(format("({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))", aa, dx, symbol.multiplier));
                    } else
                      __.integration.stop();
                  }
                  if (symbol.isE()) {
                    if (a.isLinear())
                      retval = symbol;
                    else {
                      if (a.isE() && a.power.group === S && a.power.power.equals(1))
                        retval = _.multiply(_.symfunction("Ei", [symbol.power.clone()]), symbol.power);
                      else
                        __.integration.stop();
                    }
                  } else {
                    var d = _.symfunction(LOG, [_.parse(symbol.value)]);
                    retval = _.divide(symbol, d);
                  }
                  retval = _.divide(retval, a);
                }
              } else if (symbol.isComposite() && symbol.isLinear()) {
                var m = _.parse(symbol.multiplier);
                symbol.toUnitMultiplier();
                retval = new Symbol2(0);
                symbol.each(function(x2) {
                  retval = _.add(retval, __.integrate(x2, dx, depth));
                });
                retval = _.multiply(m, retval);
              } else if (g === CP) {
                if (symbol.power.greaterThan(1))
                  symbol = _.expand(symbol);
                if (symbol.power.equals(1)) {
                  retval = new Symbol2(0);
                  symbol.each(function(x2) {
                    retval = _.add(retval, __.integrate(x2, dx, depth));
                  }, true);
                } else {
                  var p = Number(symbol.power), m = symbol.multiplier.clone();
                  symbol.toUnitMultiplier();
                  var fn = symbol.clone().toLinear(), decomp = __.integration.decompose_arg(fn, dx), b = decomp[3], ax = decomp[2], a = decomp[0], x = decomp[1];
                  if (p === -1 && x.group !== PL && x.power.equals(2)) {
                    var b_is_positive = isInt(b) ? b > 0 : true;
                    if (x.group === S && x.power.equals(2) && b_is_positive) {
                      var unwrapAbs = function(s) {
                        var result = new Symbol2(1);
                        s.each(function(x2) {
                          result = _.multiply(result, x2.fname === "abs" ? x2.args[0] : x2);
                        });
                        return result;
                      };
                      var A = a.clone(), B = b.clone();
                      A = _.pow(A, new Symbol2(1 / 2));
                      B = _.pow(B, new Symbol2(1 / 2));
                      var d = _.multiply(unwrapAbs(B), unwrapAbs(A)), f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);
                      retval = _.divide(f, d);
                    } else if (x.group === S && x.isLinear()) {
                      retval = _.divide(__.integration.poly_integrate(symbol), a);
                    } else {
                      if (x.power.equals(4)) {
                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;
                        var br = inBrackets;
                        A = _.parse(SQRT + br(a) + "*" + dx + "^2");
                        B = _.parse(SQRT + br(2) + "*" + br(a) + "^" + br("1/4") + "*" + br(b) + "^" + br("1/4") + "*" + dx);
                        C = _.parse(SQRT + br(b));
                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());
                        f2 = _.add(_.subtract(A, B), C);
                        D = _.parse(SQRT + br(2) + "*" + br(b) + "^" + br("3/4"));
                        E = _.parse(SQRT + br(b) + "*" + br(b) + "^" + br("1/4") + "*" + dx);
                        F = _.parse("2*" + br(b) + "*" + SQRT + br(2) + "*" + br(b) + "^" + br("1/4"));
                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));
                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));
                        retval = _.add(
                          __.integrate(L1, dx, depth, opt),
                          __.integrate(L2, dx, depth, opt)
                        );
                      } else
                        retval = __.integration.partial_fraction(symbol, dx, depth);
                    }
                  } else if (p === -1 / 2) {
                    if (x.group === S && x.power.equals(2)) {
                      if (ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {
                        a.negate();
                        if (b.isConstant() && a.isConstant()) {
                          var d = _.symfunction(SQRT, [a.clone()]), d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);
                          retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);
                        } else {
                          var sqrt_a = _.symfunction(SQRT, [a]), sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());
                          retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);
                        }
                      } else {
                        __.integration.stop();
                      }
                    } else {
                      __.integration.stop();
                    }
                  } else if (p === 1 / 2 && x.power.equals(2) && a.greaterThan(0)) {
                    __.integration.stop();
                  } else {
                    if (x.isLinear() && x.group !== PL)
                      retval = _.divide(__.integration.poly_integrate(symbol), a);
                    else if (x.power.equals(2) && a.greaterThan(0)) {
                      var sqa, sqb, aob, bsqi, n2, integral, u, v, uv;
                      sqa = _.parse(SQRT + inBrackets(a));
                      sqb = _.parse(SQRT + inBrackets(b));
                      aob = _.multiply(sqa.clone(), sqb.clone()).invert();
                      bsqi = _.pow(b, new Symbol2(symbol.power));
                      uv = core.Utils.getU(symbol);
                      u = _.multiply(aob, x.clone().toLinear());
                      v = _.parse(ATAN + inBrackets(u));
                      var n2 = (Math.abs(symbol.power) - 1) * 2;
                      var integral = __.integrate(_.parse(COS + inBrackets(uv) + "^" + n2));
                      core.Utils.clearU(uv);
                      return _.multiply(integral.sub(uv, v), bsqi);
                    } else {
                      if (symbol.group !== CB && !symbol.power.lessThan(0)) {
                        retval = __.integration.by_parts(symbol, dx, depth, opt);
                      } else {
                        var f = symbol.clone().toLinear();
                        var factored = core.Algebra.Factor.factor(f);
                        var was_factored = factored.toString() !== f.toString();
                        if (core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {
                          try {
                            var f1, fx, u, sq;
                            sq = core.Algebra.sqComplete(f, dx);
                            u = core.Utils.getU(f);
                            f1 = sq.f.sub(sq.a, u);
                            fx = _.pow(f1, _.parse(symbol.power));
                            retval = __.integrate(fx, u).sub(u, sq.a);
                          } catch (e) {
                            __.integration.stop();
                          }
                        } else
                          retval = __.integration.partial_fraction(symbol, dx, depth, opt);
                      }
                    }
                  }
                  retval.multiplier = retval.multiplier.multiply(m);
                }
              } else if (g === FN) {
                var arg = symbol.args[0], m = symbol.multiplier.clone();
                symbol.toUnitMultiplier();
                var decomp = __.integration.decompose_arg(arg, dx);
                var a = decomp[0], x = decomp[1], fname = symbol.fname;
                if (fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) {
                  var p = symbol.power.toString();
                  if (isInt(p))
                    depth = depth - p;
                  if (!arg.isComposite())
                    retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));
                  else {
                    var u = core.Utils.getU(symbol);
                    var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol2(p));
                    var du = __.diff(arg, dx);
                    var u_du = _.multiply(f, du);
                    var integral = __.integrate(u_du, u, depth, opt);
                    retval = _.multiply(_.parse(m), integral.sub(u, arg));
                  }
                } else if (fname === TAN && symbol.power.lessThan(0)) {
                  var sym = symbol.clone();
                  sym.power.negate();
                  sym.fname = COT;
                  return _.multiply(_.parse(m), __.integrate(sym, dx, depth));
                } else {
                  if (!a.contains(dx, true) && symbol.isLinear()) {
                    if (fname === ABS) {
                      var x = _.divide(arg.clone(), a.clone());
                      if (x.group === S && !x.power.lessThan(0)) {
                        if (core.Utils.even(x.power)) {
                          retval = __.integrate(arg, dx, depth);
                        } else {
                          var integrated = __.integrate(x, dx, depth);
                          integrated.power = integrated.power.subtract(new Frac(1));
                          retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);
                        }
                      } else
                        __.integration.stop();
                    } else {
                      var ag = symbol.args[0].group, decomposed = __.integration.decompose_arg(arg, dx);
                      if (!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())
                        __.integration.stop();
                      switch (fname) {
                        case COS:
                          retval = _.symfunction(SIN, [arg]);
                          break;
                        case SIN:
                          retval = _.symfunction(COS, [arg]);
                          retval.negate();
                          break;
                        case TAN:
                          retval = _.parse(format(Settings.LOG + "(sec({0}))", arg));
                          break;
                        case SEC:
                          retval = _.parse(format(Settings.LOG + "(tan({0})+sec({0}))", arg));
                          break;
                        case CSC:
                          retval = _.parse(format("-" + Settings.LOG + "(csc({0})+cot({0}))", arg));
                          break;
                        case COT:
                          retval = _.parse(format(Settings.LOG + "(sin({0}))", arg));
                          break;
                        case SINH:
                          retval = _.symfunction(COSH, [arg]);
                          break;
                        case COSH:
                          retval = _.symfunction(SINH, [arg]);
                          break;
                        case TANH:
                          retval = _.parse(format(Settings.LOG + "(cosh({0}))", arg));
                          break;
                        case ASEC:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        case ACSC:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        case ACOT:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        //inverse htrig
                        case ASECH:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        case ACSCH:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        case ACOTH:
                          retval = __.integration.by_parts(symbol, dx, depth, opt);
                          break;
                        //end inverse htrig
                        //htrigh
                        case SECH:
                          retval = _.parse(format("atan(sinh({0}))", arg));
                          break;
                        case CSCH:
                          retval = _.parse(format(Settings.LOG + "(tanh(({0})/2))", arg));
                          break;
                        case COTH:
                          retval = _.parse(format(Settings.LOG + "(sinh({0}))", arg));
                          break;
                        //end htrig
                        case EXP:
                          retval = __.integrate(_.parse(format("e^({0})", arg)), dx, depth);
                          break;
                        case "S":
                          var arg = symbol.args[0].clone(), dc = __.integration.decompose_arg(arg, dx), x_ = dc[1], a_ = dc[0];
                          var b_ = dc[3];
                          retval = _.parse(format("(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)", a_, b_, x));
                          break;
                        case "C":
                          var arg = symbol.args[0].clone(), dc = __.integration.decompose_arg(arg, dx), x_ = dc[1], a_ = dc[0];
                          var b_ = dc[3];
                          retval = _.parse(format("(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)", a_, b_, x_));
                          break;
                        case "erf":
                          var arg = symbol.args[0].clone(), dc = __.integration.decompose_arg(arg, dx), x_ = dc[1], a_ = dc[0];
                          retval = _.parse(format("e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))", a_, x_, arg));
                          break;
                        case "sign":
                          retval = _.multiply(symbol.clone(), arg.clone());
                          break;
                        default:
                          __.integration.stop();
                      }
                      retval = _.divide(retval, a);
                    }
                  } else if (x.isLinear()) {
                    if (fname === COS || fname === SIN) {
                      var p = Number(symbol.power);
                      if (p < 0) {
                        symbol.fname = fname === SIN ? CSC : SEC;
                        symbol.invert().updateHash();
                        retval = __.integrate(symbol, dx, depth);
                      } else {
                        var arg = symbol.args[0], rd = symbol.clone(), rd2 = symbol.clone(), q = new Symbol2((p - 1) / p), na = _.multiply(a.clone(), new Symbol2(p)).invert();
                        rd.power = rd.power.subtract(new Frac(1));
                        rd2.power = rd2.power.subtract(new Frac(2));
                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);
                        if (fname === SIN)
                          t.negate();
                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));
                      }
                    } else if (fname === TAN || fname === COT) {
                      if (symbol.args[0].isLinear(dx)) {
                        var n2 = symbol.power.subtract(new Frac(1)).toString(), r = symbol.clone().toUnitMultiplier(), w = _.parse(format((fname === COT ? "-" : "") + "1/({2}*{0})*{3}({1})^({0})", n2, arg, a, fname));
                        r.power = r.power.subtract(new Frac(2));
                        if (r.power.equals(0))
                          r = _.parse(r);
                        retval = _.subtract(w, __.integrate(r, dx, depth));
                      }
                    } else if (fname === SEC || fname === CSC) {
                      var n1 = symbol.power.subtract(new Frac(1)).toString(), n22 = symbol.power.subtract(new Frac(2)).toString(), f2 = fname === SEC ? TAN : COT, r = symbol.clone().toUnitMultiplier(), parse_str = format((fname === CSC ? "-" : "") + "1/({0}*{1})*{4}({3})^({2})*{5}({3})", a, n1, n22, arg, fname, f2), w = _.parse(parse_str);
                      r.power = r.power.subtract(new Frac(2));
                      if (r.power.equals(0))
                        r = _.parse(r);
                      retval = _.add(w, _.multiply(new Symbol2(n22 / n1), __.integrate(r, dx, depth)));
                    } else if ((fname === COSH || fname === SINH) && symbol.power.equals(2)) {
                      retval = __.integrate(symbol.fnTransform(), dx, depth);
                    } else
                      __.integration.stop();
                  } else
                    __.integration.stop();
                  retval.multiplier = retval.multiplier.multiply(m);
                }
              } else if (g === PL) {
                retval = __.integration.partial_fraction(symbol, dx, depth);
              } else if (g === CB) {
                var den = symbol.getDenom();
                if (den.group === S)
                  symbol = _.expand(symbol);
                var coeff = symbol.stripVar(dx);
                var cfsymbol = _.divide(symbol.clone(), coeff.clone());
                if (coeff.contains(dx)) {
                  cfsymbol = _.multiply(cfsymbol, coeff);
                  coeff = new Symbol2(1);
                }
                if (cfsymbol.group !== CB) {
                  if (cfsymbol.equals(1)) {
                    return __.integrate(_.expand(symbol), dx, depth);
                  }
                  if (cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {
                    cfsymbol = core.Algebra.Factor.factor(cfsymbol);
                  }
                  retval = __.integrate(cfsymbol, dx, depth);
                } else {
                  var symbols = cfsymbol.collectSymbols().sort(function(a2, b2) {
                    if (a2.group === b2.group) {
                      if (Number(a2.power) === Number(b2.power))
                        if (a2 < b2)
                          return 1;
                        else
                          return -1;
                      return b2.power - a2.power;
                    }
                    return b2.group - a2.group;
                  }).map(function(x2) {
                    var unwrapped = Symbol2.unwrapSQRT(x2, true);
                    if (unwrapped.fname === EXP) {
                      return _.parse(format("({1})*e^({0})", unwrapped.args[0], unwrapped.multiplier));
                    }
                    return unwrapped;
                  });
                  var l = symbols.length;
                  if (symbol.power < 0) {
                    if (l === 2) {
                      return __.integrate(_.expand(symbol), dx, depth, opt);
                    }
                  } else {
                    if (l === 2) {
                      try {
                        retval = __.integration.u_substitution(symbols, dx);
                      } catch (e) {
                        ;
                      }
                      if (!retval) {
                        var g1 = symbols[0].group, g2 = symbols[1].group, sym1 = symbols[0], sym2 = symbols[1], fn1 = sym1.fname, fn2 = sym2.fname;
                        symbol = _.multiply(sym1.clone(), sym2.clone());
                        if (g1 === FN && g2 === FN) {
                          if (fn1 === LOG || fn2 === LOG) {
                            retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);
                          } else {
                            symbols.sort(function(a2, b2) {
                              return b2.fname > a2.fname;
                            });
                            var arg1 = sym1.args[0];
                            if (!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))
                              __.integration.stop();
                            var decomp = __.integration.decompose_arg(arg1, dx);
                            x = decomp[1], a = decomp[0];
                            if (!x.isLinear())
                              __.integration.stop();
                            var arg2 = sym2.args[0];
                            if (arg1.equals(arg2)) {
                              if (fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {
                                if (sym1.power.lessThan(0))
                                  __.integration.stop();
                                if (fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {
                                  sym1.fname = TAN;
                                  sym1.updateHash();
                                  retval = __.integrate(sym1, dx, depth);
                                } else {
                                  if (even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {
                                    var n2 = Number(sym1.power) / 2, new_sym = _.parse(format("(1-cos({0})^2)^({1})", sym1.args[0], n2));
                                    retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);
                                  } else if (even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {
                                    var n2 = Number(sym1.power) / 2, new_sym = _.parse(format("(1-sin({0})^2)^({1})", sym1.args[0], n2));
                                    retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);
                                  } else {
                                    var p1_even = core.Utils.even(sym1.power), p2_even = core.Utils.even(sym2.power);
                                    retval = new Symbol2(0);
                                    if (!p1_even || !p2_even) {
                                      var u, r, trans;
                                      if (!p1_even) {
                                        u = sym2;
                                        r = sym1;
                                      } else {
                                        u = sym1;
                                        r = sym2;
                                      }
                                      var sign = u.fname === COS ? -1 : 1, n2 = r.power, k = (n2 - 1) / 2, trans = _.parse("(1-" + u.fname + core.Utils.inBrackets(arg1) + "^2)^" + k), sym = _.expand(_.multiply(new Symbol2(sign), _.multiply(u.clone(), trans)));
                                      sym.each(function(x2) {
                                        retval = _.add(retval, __.integration.poly_integrate(x2.clone()));
                                      });
                                    } else {
                                      var double_angle = function(symbol2) {
                                        var p3 = symbol2.power, k2 = p3 / 2, e;
                                        if (symbol2.fname === COS)
                                          e = "((1/2)+(cos(2*(" + symbol2.args[0] + "))/2))^" + k2;
                                        else
                                          e = "((1/2)-(cos(2*(" + symbol2.args[0] + "))/2))^" + k2;
                                        return _.parse(e);
                                      };
                                      var a = double_angle(sym1), b = double_angle(sym2), t = _.multiply(a, b);
                                      var sym = _.expand(t);
                                      sym.each(function(x2) {
                                        retval = _.add(retval, __.integrate(x2, dx, depth));
                                      });
                                      return _.multiply(retval, coeff);
                                    }
                                  }
                                }
                              } else if (fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {
                                retval = _.parse(format("sec({0})^({1})/({1})", sym1.args[0], sym1.power));
                              } else if (fn1 === TAN && fn2 === SEC && x.isLinear()) {
                                if (sym1.isLinear() && sym2.isLinear()) {
                                  retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);
                                } else if (even(sym1.power)) {
                                  var p = Number(sym1.power) / 2;
                                  var t = _.parse(format("(sec({0})^2-1)^({1})", sym1.args[0], p));
                                  retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);
                                } else
                                  __.integration.stop();
                              } else if (fn1 === SEC && fn2 === COS) {
                                sym1.fname = COS;
                                sym1.invert().updateHash();
                                retval = __.integrate(_.multiply(sym1, sym2), dx, depth);
                              } else if (fn1 === SIN && fn2 === CSC) {
                                sym2.fname = SIN;
                                sym2.invert().updateHash();
                                retval = __.integrate(_.multiply(sym1, sym2), dx, depth);
                              } else if (fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {
                                var t = _.multiply(sym1.fnTransform(), sym2);
                                retval = __.integrate(_.expand(t), dx, depth);
                              } else {
                                var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());
                                retval = __.integrate(_.expand(t), dx, depth);
                              }
                            } else if ((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {
                              if (sym1.isLinear() && sym2.isLinear()) {
                                if (sym1.args[0].isLinear() && sym2.args[0].isLinear()) {
                                  var ax, bx;
                                  if (fn2 === SIN) {
                                    ax = sym1.args[0];
                                    bx = sym2.args[0];
                                  } else {
                                    bx = sym1.args[0];
                                    ax = sym2.args[0];
                                  }
                                  f = _.parse(format("(sin(({1})+({0}))+sin(({1})-({0})))/2", ax.toString(), bx.toString()));
                                  retval = __.integrate(f, dx, depth);
                                } else {
                                  var transformed = trigTransform(symbols);
                                  retval = __.integrate(_.expand(transformed), dx, depth);
                                }
                              } else {
                                var transformed = new Symbol2(1);
                                symbols.map(function(sym3) {
                                  var s = sym3.fnTransform();
                                  transformed = _.multiply(transformed, s);
                                });
                                var t = _.expand(transformed);
                                retval = __.integrate(t, dx, depth);
                                if (retval.hasIntegral()) {
                                  retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);
                                }
                              }
                            } else {
                              __.integration.stop();
                            }
                          }
                        } else if (g1 === FN && g2 === S) {
                          var sym1_is_linear = sym1.isLinear();
                          if (sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1))
                            retval = _.symfunction("Ci", [sym1.args[0]]);
                          else if (sym1.fname === COS && sym2.power.equals(-1)) {
                            retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);
                          } else if (sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))
                            retval = _.symfunction("Chi", [sym1.args[0]]);
                          else if (sym1.fname === COSH && sym2.power.equals(-1)) {
                            retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);
                          } else if (sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))
                            retval = _.symfunction("Si", [sym1.args[0]]);
                          else if (sym1.fname === SIN && sym2.power.equals(-1)) {
                            retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);
                          } else if (sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))
                            retval = _.symfunction("Shi", [sym1.args[0]]);
                          else if (sym1.fname === SINH && sym2.power.equals(-1)) {
                            retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);
                          } else if (sym1.fname === LOG && sym2.power.equals(-1)) {
                            retval = __.integration.poly_integrate(sym1, dx, depth);
                          } else if (sym1.fname === "erf") {
                            if (sym2.power.equals(1)) {
                              var dc = __.integration.decompose_arg(sym1.args[0], dx), a_ = dc[0], x_ = dc[1], arg = sym1.args[0].toString();
                              retval = _.parse(format("(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)", a_, x_, arg));
                            }
                          } else {
                            retval = __.integration.by_parts(symbol, dx, depth, opt);
                          }
                        } else if (g1 === EX && g2 === S) {
                          var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;
                          if (sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {
                            retval = _.symfunction("Ei", [sym1.power.clone()]);
                          } else if (fn1 === LOG && x.value === sym2.value) {
                            retval = __.integration.poly_integrate(sym1, dx, depth);
                          } else
                            retval = __.integration.by_parts(symbol, dx, depth, opt);
                        } else if (g1 === PL && g2 === S) {
                          if (sym2.value === sym1.value && sym1.power.equals(-1)) {
                            var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));
                            var pc = Math.min(pd, sym2.power);
                            var factor = sym2.clone();
                            factor.power = new Frac(pc);
                            sym2 = _.divide(sym2, factor.clone());
                            var t = new Symbol2(0);
                            sym1.each(function(x2) {
                              t = _.add(t, _.divide(x2.clone(), factor.clone()));
                            });
                            t.multiplier = sym1.multiplier;
                            symbol = _.divide(sym2, t);
                          } else {
                            symbol = _.expand(symbol);
                          }
                          retval = __.integration.partial_fraction(symbol, dx, depth);
                        } else if (g1 === CP && g2 === S) {
                          var f = sym1.clone().toLinear(), f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);
                          if (sym1.power.equals(-1 / 2)) {
                            var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);
                            var a = decomp[0].negate(), x = decomp[1], b = decomp[3], p1 = Number(sym1.power), p2 = Number(sym2.power);
                            if (isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {
                              var c = _.divide(
                                _.multiply(
                                  _.pow(b.clone(), new Symbol2(2)),
                                  _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])
                                ),
                                _.pow(a.clone(), new Symbol2(2))
                              );
                              c = _.multiply(c, _.symfunction(SQRT, [b]).invert());
                              var dummy = _.parse("sin(u)");
                              dummy.power = dummy.power.multiply(sym2.power);
                              var integral = __.integrate(dummy, "u", depth);
                              var bksub = _.parse(ASIN + "(" + SQRT + "(" + a + "/" + b + ")*" + dx + ")");
                              retval = _.multiply(c, integral.sub(new Symbol2("u"), bksub));
                            } else if (p1 === -1 / 2) {
                              var u_transform = function(f5, u2) {
                                var integral2 = _.parse(__.integrate(f5, dx, depth, opt).sub(dx, format(u2, dx)));
                                if (!integral2.hasIntegral())
                                  return integral2;
                              };
                              if (p2 === -1) {
                                retval = u_transform(
                                  _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol2(2)))).invert(),
                                  "sqrt(1-1/({0})^2)"
                                );
                              } else if (p2 === -2) {
                                retval = u_transform(
                                  _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol2(2)).invert(), _.pow(new Symbol2(dx), new Symbol2(2))).negate())).invert(),
                                  "sqrt(1-1/({0})^2)"
                                );
                              }
                            }
                          } else if (sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {
                            retval = __.integration.partial_fraction(symbol, dx, depth);
                          } else if (!sym1.power.lessThan(0) && isInt(sym1.power)) {
                            var expanded = _.expand(sym1);
                            retval = new Symbol2(0);
                            expanded.each(function(x2) {
                              if (x2.group === PL) {
                                x2.each(function(y) {
                                  retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));
                                });
                              } else
                                retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x2), dx, depth));
                            });
                          } else if (sym1.power.lessThan(-2)) {
                            retval = __.integration.by_parts(symbol, dx, depth, opt);
                          } else if (sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {
                            var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx), a = decomp[0].negate(), x = decomp[1], b = decomp[3], fn = sym1.clone().toLinear();
                            if (x.group !== PL && x.isLinear()) {
                              var p = Number(sym2.power), du = "_u_", u = new Symbol2(du), U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol2(p)), u.clone())), scope = {};
                              scope[du] = fn;
                              var U2 = _.parse(U, scope);
                              retval = __.integrate(U2, dx, 0);
                            } else if (sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {
                              var factors = new core.Algebra.Classes.Factors();
                              sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);
                              var div = core.Algebra.divide(sym2, sym1);
                              if (div.group !== CB) {
                                retval = new Symbol2(0);
                                div.each(function(t2) {
                                  retval = _.add(retval, __.integrate(t2, dx, depth));
                                });
                                factors.each(function(factor2) {
                                  retval = _.divide(retval, factor2);
                                });
                                retval = _.expand(retval);
                              } else {
                                retval = __.integration.by_parts(symbol, dx, depth, opt);
                              }
                            } else
                              retval = __.integration.partial_fraction(symbol, dx, depth);
                          } else {
                            if (sym1.power.den.equals(2)) {
                              var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx), a = dc[3], x = dc[1], b = dc[0], bx = dc[2];
                              if (x.power.equals(2) && b.lessThan(0)) {
                                if (!a.equals(1)) {
                                  coeff = _.multiply(coeff, _.pow(a, new Symbol2(2)));
                                }
                                var u = dx;
                                var c = _.divide(_.pow(b.clone().negate(), new Symbol2(1 / 2)), _.pow(a, new Symbol2(1 / 2))), du = _.symfunction(COS, [new Symbol2(u)]), cosn = _.pow(_.symfunction(COS, [new Symbol2(u)]), new Symbol2(sym1.power.num)), X = _.pow(_.symfunction(SIN, [new Symbol2(u)]), new Symbol2(sym2.power)), val = _.multiply(_.multiply(cosn, du), X), integral = __.integrate(val, u, depth);
                                retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol2(dx), c)]));
                              } else {
                                retval = __.integration.partial_fraction(symbol, dx, depth, opt);
                              }
                            } else if (f_is_linear) {
                              retval = __.integration.partial_fraction(symbol, dx, depth);
                            }
                          }
                        } else if (sym1.isComposite() && sym2.isComposite()) {
                          retval = new Symbol2(0);
                          if (sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {
                            var sym = _.expand(symbol);
                            sym.each(function(x2) {
                              retval = _.add(retval, __.integrate(x2, dx, depth));
                            }, true);
                          } else {
                            var p1 = Number(sym1.power), p2 = Number(sym2.power);
                            if (p1 < 0 && p2 > 0) {
                              var t = sym1;
                              sym1 = sym2;
                              sym2 = t;
                            }
                            if (p1 === -1 && p2 === -1) {
                              retval = __.integration.partial_fraction(symbol, dx);
                            } else {
                              sym1.each(function(x2) {
                                var k2 = _.multiply(x2, sym2.clone());
                                var integral2 = __.integrate(k2, dx, depth);
                                retval = _.add(retval, integral2);
                              });
                            }
                          }
                        } else if (g1 === CP && symbols[0].power.greaterThan(0)) {
                          sym1 = _.expand(sym1);
                          retval = new Symbol2(0);
                          sym1.each(function(x2) {
                            retval = _.add(retval, __.integrate(_.multiply(x2, sym2.clone()), dx, depth));
                          }, true);
                        } else if (g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {
                          sym1 = sym1.fnTransform();
                          retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);
                        } else if (g1 === FN && g2 === CP || g2 === FN && g1 === CP) {
                          if (g2 === FN && g1 === CP) {
                            var t = sym1;
                            sym1 = sym2;
                            sym2 = t;
                          }
                          var du, sym2_clone, p, q, sa, sb;
                          du = Symbol2.unwrapSQRT(__.diff(sym1.clone(), dx), true);
                          sym2_clone = Symbol2.unwrapSQRT(sym2, true);
                          if (du.power.equals(sym2_clone.power)) {
                            p = new Symbol2(sym2.power);
                            sa = du.clone().toLinear();
                            sb = sym2.clone().toLinear();
                            q = core.Algebra.divide(sa.toLinear(), sb);
                            if (q.isConstant()) {
                              var nq = _.pow(q, p.negate());
                              retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));
                            }
                          } else {
                            retval = __.integration.by_parts(symbol, dx, depth, opt);
                          }
                        } else {
                          var syma = sym1.clone().toLinear();
                          var symb = sym2.clone().toLinear();
                          if (g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx) && !syma.contains(dx) && !symb.contains(dx)) {
                            retval = _.parse(format(
                              "(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))",
                              syma.toString(),
                              symb.toString(),
                              sym1.power.multiplier.toString(),
                              sym2.power.multiplier.toString(),
                              dx
                            ));
                          } else
                            retval = __.integration.by_parts(symbol, dx, depth, opt);
                        }
                      }
                    } else if (l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {
                      var first = symbols[0];
                      if (first.group === CP) {
                        if (first.power.greaterThan(1))
                          first = _.expand(first);
                        var r = _.multiply(symbols[1], symbols[2]);
                        retval = new Symbol2(0);
                        first.each(function(x2) {
                          var t2 = _.multiply(x2, r.clone());
                          var intg = __.integrate(t2, dx, depth);
                          retval = _.add(retval, intg);
                        }, true);
                      } else {
                        retval = __.integration.by_parts(symbol, dx, depth, opt);
                      }
                    } else if (all_functions(symbols)) {
                      var t = new Symbol2(1);
                      for (var i = 0, l = symbols.length; i < l; i++) {
                        t = _.multiply(t, symbols[i].fnTransform());
                      }
                      t = _.expand(t);
                      retval = __.integrate(t, dx, depth);
                    } else {
                      var transformed = trigTransform(symbols);
                      retval = __.integrate(_.expand(transformed), dx, depth);
                    }
                  }
                }
                retval = _.multiply(retval, coeff);
              }
              if (retval)
                return retval;
            } catch (error) {
              if (!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero))
                throw error;
            }
            return _.symfunction("integrate", [original_symbol, dt]);
          }, false);
        },
        defint: function(symbol, from, to, dx) {
          dx = dx || "x";
          var get_value = function(integral2, vars2, point) {
            try {
              return _.parse(integral2, vars2);
            } catch (e) {
              var lim = __.Limit.limit(integral2, dx, point);
              return lim;
            }
          };
          var vars = core.Utils.variables(symbol), hasTrig = symbol.hasTrig();
          var retval, integral;
          if (vars.length === 1 && !dx)
            dx = vars[0];
          if (!hasTrig) {
            integral = __.integrate(symbol, dx);
          }
          if (!hasTrig && !integral.hasIntegral()) {
            var upper = {}, lower = {}, a, b;
            upper[dx] = to;
            lower[dx] = from;
            a = get_value(integral, upper, to, dx);
            b = get_value(integral, lower, from, dx);
            retval = _.subtract(a, b);
          } else if (vars.length === 1 && from.isConstant() && to.isConstant()) {
            var f = core.Utils.build(symbol);
            retval = new Symbol2(core.Math2.num_integrate(f, Number(from), Number(to)));
          } else
            retval = _.symfunction("defint", [symbol, from, to, dx]);
          return retval;
        },
        Limit: {
          interval: function(start, end) {
            return _.parse(format("[{0}, {1}]", start, end));
          },
          diverges: function() {
            return __.Limit.interval("-Infinity", "Infinity");
          },
          divide: function(f, g, x, lim, depth) {
            if (depth++ > Settings.max_lim_depth) {
              return;
            }
            var fin = f.clone(), gin = g.clone();
            if (g.fname === ABS) {
              var sign = f.sign();
              var lim_sign = lim.sign();
              if (lim.isInfinity)
                return _.multiply(new Symbol2(sign), new Symbol2(lim_sign));
              else if (lim.equals(0)) {
                var fm = _.parse(f.multiplier);
                var gm = _.parse(g.multiplier);
                return _.divide(_.multiply(fm, __.Limit.interval("-1", "1")), gm);
              } else {
                __.Limit.diverges();
              }
            }
            var isInfinity = function(L) {
              if (core.Utils.isVector(L)) {
                for (var i = 0; i < L.elements.length; i++)
                  if (!L.elements[i].isInfinity)
                    return false;
                return true;
              }
              return L.isInfinity;
            };
            var equals = function(L, v) {
              if (core.Utils.isVector(L)) {
                return false;
              }
              return L.equals(v);
            };
            var retval;
            do {
              var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));
              var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth));
              var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);
              if (indeterminate) {
                var ft = __.diff(f.clone(), x);
                var gt = __.diff(g.clone(), x);
                var t_symbol = _.expand(_.divide(ft, gt));
                f = t_symbol.getNum();
                g = t_symbol.getDenom();
              }
            } while (indeterminate);
            var den_is_zero = lim2.equals(0);
            var p = Number(gin.power);
            if (lim.isConstant(true) && den_is_zero) {
              retval = Symbol2.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : void 0);
            } else if (den_is_zero) {
              retval = __.Limit.diverges();
            } else {
              retval = _.divide(lim1, lim2);
            }
            return retval;
          },
          rewriteToLog: function(symbol) {
            var p = symbol.power.clone();
            symbol.toLinear();
            return _.pow(new Symbol2("e"), _.multiply(p, _.symfunction(Settings.LOG + "", [symbol])));
          },
          getSubbed: function(f, x, lim) {
            var retval;
            if (f.group === EX) {
              f = __.rewriteToLog(f);
            }
            try {
              retval = f.sub(x, lim);
            } catch (e) {
              retval = f;
            }
            return retval;
          },
          isInterval: function(limit) {
            return core.Utils.isVector(limit);
          },
          isConvergent: function(limit) {
            if (
              //It lies on the interval -Infinity to Infinity
              __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity || //We weren't able to calculate the limit
              limit.containsFunction("limit")
            ) {
              return false;
            }
            return true;
          },
          limit: function(symbol, x, lim, depth) {
            if (symbol.isLinear() && symbol.isComposite()) {
              var limit = new Symbol2(0);
              symbol.each(function(s) {
                limit = _.add(limit, __.Limit.limit(s, x, lim, depth));
              }, true);
              return limit;
            }
            ;
            symbol = core.Algebra.Simplify.simplify(symbol);
            depth = depth || 1;
            if (depth++ > Settings.max_lim_depth) {
              return;
            }
            var m = _.parse(symbol.multiplier);
            symbol.toUnitMultiplier();
            try {
              var retval;
              if (symbol.isConstant(true)) {
                retval = symbol;
              } else {
                var point = {};
                point[x] = lim;
                try {
                  var t = _.parse(symbol.sub(x, lim), point);
                  if (t.isConstant(true) || t.isInfinity)
                    retval = t;
                } catch (e) {
                }
                ;
                if (!retval) {
                  var num = symbol.getNum();
                  var den = symbol.getDenom();
                  if (den.isConstant(true)) {
                    if (symbol.group === EX) {
                      var f = symbol.clone().toLinear();
                      var p = symbol.power.clone();
                      var _num = f.getNum();
                      var _den = f.getDenom();
                      var fn = core.Utils.decompose_fn(_den, x, true);
                      if (_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {
                        retval = _.parse(format("(1/e^({0}))", fn.b));
                      } else {
                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());
                        var pow = symbol_.power.clone();
                        var base = symbol_.clone().toLinear();
                        var lim_base = __.Limit.limit(base, x, lim, depth);
                        var lim_pow = __.Limit.limit(pow, x, lim, depth);
                        retval = _.pow(lim_base, lim_pow);
                      }
                    } else if (symbol.group === FN && symbol.args.length === 1) {
                      var evaluates;
                      var arg = __.Limit.limit(symbol.args[0], x, lim, depth);
                      if (core.Utils.isVector(arg)) {
                        retval = arg.map(function(e) {
                          var clone = symbol.clone();
                          clone.args[0] = e;
                          return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);
                        });
                        return _.multiply(m, retval);
                      } else if (arg.isConstant(true)) {
                        var trial = _.symfunction(symbol.fname, [arg]);
                        try {
                          evaluate(trial);
                          evaluates = true;
                        } catch (e) {
                          evaluates = false;
                        }
                      }
                      if (evaluates) {
                        retval = trial;
                      } else {
                        if (__.Limit.isConvergent(arg)) {
                          if (symbol.fname === LOG) {
                            switch (arg.toString()) {
                              //lim -> 0
                              case "0":
                                retval = Symbol2.infinity().negate();
                                break;
                              case "Infinity":
                                retval = Symbol2.infinity();
                                break;
                              case "-Infinity":
                                retval = Symbol2.infinity();
                                break;
                            }
                          } else if ((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {
                            retval = __.Limit.interval(-1, 1);
                          } else if (symbol.fname === TAN) {
                            var s_arg = symbol.args[0];
                            var n2 = s_arg.getNum();
                            var d = s_arg.getDenom();
                            var pi = n2.toUnitMultiplier();
                            if (lim.isInfinity || pi.equals("pi") && d.equals(2)) {
                              retval = divergent();
                            }
                          } else if (symbol.fname === Settings.FACTORIAL) {
                            if (arg.isInfinity)
                              return Symbol2.infinity();
                          }
                        }
                      }
                    } else if (symbol.group === S) {
                      if (symbol.power > 0)
                        return _.parse(symbol, point);
                      else {
                        if (core.Utils.even(symbol.power)) {
                          retval = Symbol2.infinity();
                        } else {
                          retval = __.Limit.diverges();
                        }
                      }
                    } else if (symbol.group === CB) {
                      var lim1, lim2;
                      var symbols = symbol.collectSymbols().sort(function(a, b) {
                        return a.group - b.group;
                      });
                      var f = symbols.pop();
                      lim1 = evaluate(__.Limit.limit(f, x, lim, depth));
                      while (symbols.length) {
                        var g = symbols.pop();
                        lim2 = evaluate(__.Limit.limit(g, x, lim, depth));
                        if (lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2)) {
                          if (g.containsFunction(LOG)) {
                            g = [f, f = g][0];
                          }
                          g.invert();
                          if (lim1.isInfinity && lim2.isInfinity) {
                            lim1 = Symbol2.infinity();
                          } else {
                            lim1 = __.Limit.divide(f, g, x, lim, depth);
                          }
                        } else {
                          lim1 = _.multiply(lim1, lim2);
                          f = _.multiply(f, g);
                        }
                      }
                      retval = lim1;
                    } else if (symbol.isComposite()) {
                      var _lim;
                      if (!symbol.isLinear())
                        symbol = _.expand(symbol);
                      retval = new Symbol2(0);
                      var symbols = symbol.collectSymbols().sort(function(a, b) {
                        return b.group - a.group;
                      });
                      var _symbols = [];
                      var fns = new Symbol2(0);
                      for (var i = 0, l = symbols.length; i < l; i++) {
                        var sym = symbols[i].clone();
                        if (sym.group === FN || sym.group === CB && sym.hasFunc()) {
                          fns = _.add(fns, sym);
                        } else
                          _symbols.push(sym);
                      }
                      _symbols.unshift(fns);
                      if (_symbols.length !== 1) {
                        symbols = _symbols;
                      }
                      for (var i = 0, l = symbols.length; i < l; i++) {
                        var sym = symbols[i];
                        try {
                          _lim = __.Limit.limit(sym, x, lim, depth);
                        } catch (e) {
                          _lim = __.Limit.diverges();
                        }
                        try {
                          retval = _.add(retval, _lim);
                        } catch (e) {
                          if (depth++ > Settings.max_lim_depth) {
                            return;
                          }
                          ;
                          retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);
                        }
                      }
                    }
                  } else {
                    retval = __.Limit.divide(num, den, x, lim, depth);
                  }
                }
              }
              if (!retval)
                retval = _.symfunction("limit", [symbol, x, lim]);
            } catch (e) {
              retval = _.symfunction("limit", [symbol, x, lim]);
            }
            return _.multiply(m, retval);
          }
        },
        Fresnel: {
          S: function(x) {
            if (x.isConstant(true)) {
              return __.defint(_.parse("sin(pi*x^2/2)"), Symbol2(0), x, "x");
            }
            return _.symfunction("S", arguments);
          },
          C: function(x) {
            if (x.isConstant(true)) {
              return __.defint(_.parse("cos(pi*x^2/2)"), Symbol2(0), x, "x");
            }
            return _.symfunction("C", arguments);
          }
        }
      };
      nerdamer.register([
        {
          name: "diff",
          visible: true,
          numargs: [1, 3],
          build: function() {
            return __.diff;
          }
        },
        {
          name: "sum",
          visible: true,
          numargs: 4,
          build: function() {
            return __.sum;
          }
        },
        {
          name: "product",
          visible: true,
          numargs: 4,
          build: function() {
            return __.product;
          }
        },
        {
          name: "integrate",
          visible: true,
          numargs: [1, 2],
          build: function() {
            return __.integrate;
          }
        },
        {
          name: "defint",
          visible: true,
          numargs: [3, 4],
          build: function() {
            return __.defint;
          }
        },
        {
          name: "S",
          visible: true,
          numargs: 1,
          build: function() {
            return __.Fresnel.S;
          }
        },
        {
          name: "C",
          visible: true,
          numargs: 1,
          build: function() {
            return __.Fresnel.C;
          }
        },
        {
          name: "limit",
          visible: true,
          numargs: [3, 4],
          build: function() {
            return __.Limit.limit;
          }
        }
      ]);
      nerdamer.updateAPI();
    })();
  }
});

// node_modules/nerdamer/all.min.js
var require_all_min = __commonJS({
  "node_modules/nerdamer/all.min.js"(exports, module) {
    var nerdamer = function(e) {
      "use strict";
      var d = new P(), S = e.bigInt, k = e.bigDec;
      k.set({ precision: 250 });
      var t = {}, o = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083], M = {}, D = { callPeekers: false, init_primes: 1e3, exclude: [], suppress_errors: false, PARSE2NUMBER: false, SAFE: false, IMAGINARY: "i", FUNCTION_MODULES: [Math], ALLOW_CHARS: ["π"], USE_MULTICHARACTER_VARS: true, POWER_OPERATOR: "^", VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i, IMPLIED_MULTIPLICATION_REGEX: /([\+\-\/\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\+\-\/\*]*)/gi, ALIASES: { "π": "pi", "∞": "Infinity" }, POSITIVE_MULTIPLIERS: false, CACHE: {}, SILENCE_WARNINGS: false, PRECISION: 21, EXPRESSION_DECP: 19, DEFAULT_DECP: 16, VECTOR: "vector", PARENTHESIS: "parens", SQRT: "sqrt", ABS: "abs", FACTORIAL: "factorial", DOUBLEFACTORIAL: "dfactorial", LONG_PI: "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196", LONG_E: "2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901", PI: Math.PI, E: Math.E, LOG: "log", LOG10: "log10", LOG10_LATEX: "log_{10}", MAX_EXP: 2e5, SCIENTIFIC_MAX_DECIMAL_PLACES: 14, SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true };
      !function() {
        D.CACHE.roots = {};
        for (var e2 = 2; e2 <= 40; e2++) for (var t2 = 2; t2 <= 40; t2++) {
          var n3 = S(e2).pow(t2);
          D.CACHE.roots[n3 + "-" + t2] = e2;
        }
      }();
      function n2(t2) {
        function e2(e3) {
          this.name = t2, this.message = void 0 !== e3 ? e3 : "", (e3 = new Error(this.message)).name = this.name, this.stack = e3.stack;
        }
        return e2.prototype = Object.create(Error.prototype), e2;
      }
      function r(e2) {
        return -1 !== f.indexOf(e2);
      }
      function i(e2) {
        return e2 instanceof R;
      }
      function A(e2) {
        return (e2 = ne(e2) ? e2.multiplier : e2).lessThan(0);
      }
      function c(e2) {
        return Math.min.apply(void 0, e2);
      }
      function s(e2, t2) {
        if (ae(e2)) for (var n3 = e2.length, r2 = 0; r2 < n3; r2++) t2.call(e2, r2);
        else for (var i2 in e2) e2.hasOwnProperty(i2) && t2.call(e2, i2);
      }
      function a(e2) {
        for (var t2 = e2.length, n3 = [], r2 = 0; r2 < t2; r2++) {
          var i2 = e2[r2];
          -1 === n3.indexOf(i2) && n3.push(i2);
        }
        return n3;
      }
      function u(e2) {
        for (var t2 = o[o.length - 1] || 2; t2 < e2; t2++) g(t2) && o.push(t2);
      }
      var F = t.N = 1, B = t.P = 2, G = t.S = 3, V = t.EX = 4, H = t.FN = 5, j = t.PL = 6, X = t.CB = 7, $ = t.CP = 8, l = D.CONST_HASH = "#", Z = D.PARENTHESIS, z = D.SQRT, Q = D.ABS, Y = D.FACTORIAL, W = D.DOUBLEFACTORIAL, p = [], J = {}, f = [], h = [], K = function(e2, t2) {
        if (!D.suppress_errors) throw new (t2 || Error)(e2);
      }, w = function(e2) {
        for (var t2 = e2[0], n3 = 1, r2 = e2.length; n3 < r2; n3++) if (!e2[n3].equals(t2)) return false;
        return true;
      }, ee = function(e2) {
        h.push(e2), D.SHOW_WARNINGS && console && console.warn && console.warn(e2);
      }, m = function(e2, t2) {
        if ((t2 = t2 || "variable", -1 === D.ALLOW_CHARS.indexOf(e2)) && !D.VALIDATION_REGEX.test(e2)) throw new U(e2 + " is not a valid " + t2 + " name");
      }, y = function(e2) {
        var t2, n3, r2, i2 = Math.sign(e2);
        return e2 = Math.abs(e2), /\d+\.?\d*e[\+\-]*\d+/i.test(e2) && (r2 = (r2 = (n3 = String(e2).toLowerCase().split("e")).pop()) / (t2 = Math.abs(r2)), n3 = n3[0].split("."), e2 = -1 == r2 ? (t2 -= n3[0].length) < 0 ? n3[0].slice(0, t2) + "." + n3[0].slice(t2) + (2 === n3.length ? n3[1] : "") : "0." + new Array(t2 + 1).join("0") + n3.join("") : ((r2 = n3[1]) && (t2 -= r2.length), t2 < 0 ? n3[0] + r2.slice(0, t2) + "." + r2.slice(t2) : n3.join("") + new Array(t2 + 1).join("0"))), i2 < 0 ? "-" + e2 : e2;
      }, g = function(e2) {
        for (var t2 = Math.floor(Math.sqrt(e2)), n3 = 2; n3 <= t2; n3++) if (e2 % n3 == 0) return false;
        return true;
      }, te = function(e2) {
        return /^\d+\.?\d*$/.test(e2);
      }, v = function(e2) {
        return ne(e2) ? v(e2.multiplier.toDecimal()) : e2 % 1 != 0;
      }, ne = function(e2) {
        return e2 instanceof Fe;
      }, b = function(e2, t2, n3) {
        if (n3 = n3 || { c: [], add: function(e3) {
          -1 === this.c.indexOf(e3) && isNaN(e3) && this.c.push(e3);
        } }, ne(e2)) {
          var r2 = e2.group, i2 = e2.previousGroup;
          if (r2 === V && b(e2.power, t2, n3), r2 === $ || r2 === X || i2 === $ || i2 === X) for (var s2 in e2.symbols) b(e2.symbols[s2], t2, n3);
          else if (r2 === G || i2 === G) "e" !== e2.value && "pi" !== e2.value && e2.value !== D.IMAGINARY && n3.add(e2.value);
          else if (r2 === j || i2 === j) b(pe(e2.symbols), t2, n3);
          else if (r2 === V) isNaN(e2.value) || n3.add(e2.value), b(e2.power, t2, n3);
          else if (r2 === H && !t2) for (var o2 = 0; o2 < e2.args.length; o2++) b(e2.args[o2], t2, n3);
        }
        return n3.c.sort();
      }, N = function(e2, n3) {
        e2 = d.expand(e2), n3 = n3 || {};
        function t2(e3, t3) {
          n3[e3] || (n3[e3] = new Fe(0)), n3[e3] = d.add(n3[e3], t3.clone());
        }
        return e2.each(function(e3) {
          if (e3.isConstant("all")) t2("constants", e3);
          else if (e3.group === G) t2(e3.value, e3);
          else if (e3.group !== H || e3.fname !== Q && "" !== e3.fname) {
            if (e3.group === V || e3.group === H) throw new Error("Unable to separate. Term cannot be a function!");
            t2(b(e3).join(" "), e3);
          } else N(e3.args[0]);
        }), n3;
      }, re = function(e2) {
        return e2 instanceof Ve;
      }, ie = function(e2) {
        return e2 instanceof He;
      }, se = function(e2) {
        return e2 instanceof je;
      }, oe = function(e2) {
        return e2.group === F || e2.group === B;
      }, ae = function(e2) {
        return Array.isArray(e2);
      }, ue = function(e2) {
        return /^[-+]?\d+e?\+?\d*$/gim.test(e2.toString());
      }, le = function(e2) {
        return e2 && String(e2);
      }, E = function(e2) {
        return "(" + e2 + ")";
      }, ce = function() {
        var n3 = [].slice.call(arguments);
        return n3.shift().replace(/{(\d+)}/g, function(e2, t2) {
          t2 = n3[t2];
          return "function" == typeof t2 ? t2() : t2;
        });
      }, q = Object.keys, pe = function(e2, t2, n3) {
        for (var r2 in e2) break;
        return t2 ? r2 : n3 ? { key: r2, obj: e2[r2] } : e2[r2];
      }, fe = function(e2, t2, n3) {
        return m(e2), r(e2) ? null : (t2 = t2 || b(d.parse(n3)), d.functions[e2] = [d.mapped_function, t2.length, { name: e2, params: t2, body: n3 }], n3);
      }, he = function(e2, t2, n3) {
        var r2, i2;
        return t2 = String(t2), e2.group === $ ? (i2 = d.expand(e2.clone()).stripVar(t2), r2 = d.subtract(e2.clone(), i2.clone()), i2 = i2) : r2 = e2.clone(), e2 = r2.stripVar(t2), t2 = d.divide(r2.clone(), e2.clone()), i2 = i2 || new Fe(0), n3 ? { a: e2, x: t2, ax: r2, b: i2 } : [e2, t2, r2, i2];
      }, me = function(e2, t2) {
        return ue(e2) ? e2 >= Number.MAX_VALUE ? e2.toString() : Number(e2) : (t2 = void 0 === t2 ? 14 : t2, Math.round(e2 * Math.pow(10, t2)) / Math.pow(10, t2));
      }, ge = function(e2) {
        return e2 % 2 == 0;
      }, de = function(e2) {
        return 1 / (e2 % 1) % 2 == 0;
      }, ve = function(e2, t2) {
        var n3 = typeof t2;
        "function" == n3 && "undefined" != n3 || (t2 = function(e3, t3) {
          return e3 === t3;
        });
        for (var r2 = []; e2.length; ) {
          var i2 = e2[0];
          if (1 === e2.length) {
            r2.push(i2);
            break;
          }
          var s2 = [];
          r2.push(i2);
          for (var o2 = 1; o2 < e2.length; o2++) {
            var a2 = e2[o2];
            t2(i2, a2) || s2.push(a2);
          }
          e2 = s2;
        }
        return r2;
      }, x = function(e2) {
        function t2(e3) {
          -1 === f.indexOf(e3) && f.push(e3);
        }
        "string" == typeof e2 ? t2(e2) : s(e2, function(e3) {
          t2(e3);
        });
      }, we = function(e2, t2) {
        var n3;
        return ae(e2) ? n3 = e2.splice(t2, 1)[0] : (n3 = e2[t2], delete e2[t2]), n3;
      }, ye = function(e2, t2, n3, r2) {
        var i2 = D[e2];
        D[e2] = void 0 === n3 || !!n3;
        r2 = t2.call(r2);
        return D[e2] = i2, r2;
      }, be = function(e2) {
        return [].slice.call(e2);
      }, Se = function(e2, t2) {
        return ye("PARSE2NUMBER", function() {
          return d.parse(e2, t2);
        }, true);
      }, C = function(e2) {
        if (ae(e2)) {
          for (var t2 = new Ve([]), n3 = 0; n3 < e2.length; n3++) t2.elements.push(C(e2[n3]));
          return t2;
        }
        return ne(e2) ? e2 : d.parse(e2);
      }, Me = function(e2) {
        for (var t2 = 0; t2 < e2.length; t2++) if (e2[t2].group !== F) return false;
        return true;
      }, Ne = function(e2) {
        for (var t2 = 0; t2 < e2.length; t2++) if (!e2[t2].isPi() && !e2[t2].isE() && !e2[t2].isConstant(true)) return false;
        return true;
      }, Ee = function(e2, n3, r2) {
        (n3.isComposite() && !e2.isComposite() || n3.isLinear() && !e2.isLinear()) && ([e2, n3] = [n3, e2]);
        var i2 = new Fe(0);
        return e2.isLinear() ? e2.each(function(t2) {
          var e3;
          n3.isComposite() ? n3.isLinear() ? n3.each(function(e4) {
            e4 = d.multiply(d.parse(t2), d.parse(e4)), e4 = d.expand(d.parse(e4), r2);
            i2 = d.add(i2, e4);
          }, true) : i2 = d.add(i2, d.multiply(t2, d.parse(n3))) : (e3 = d.multiply(d.parse(t2), d.parse(n3)), i2 = d.add(i2, d.expand(e3, r2)));
        }, true) : i2 = d.multiply(e2, n3), i2;
      }, qe = n2("DivisionByZero"), xe = n2("ParseError"), Ae = n2("UndefinedError"), Ce = n2("OutOfFunctionDomainError"), L = n2("MaximumIterationsReached"), I = n2("NerdamerTypeError"), Le = n2("ParityError"), Ie = n2("OperatorError"), Ue = n2("OutOfRangeError"), _e = n2("DimensionError"), U = n2("InvalidVariableNameError"), _ = n2("ValueLimitExceededError"), Oe = n2("NerdamerValueError"), O = n2("SolveError"), e = n2("InfiniteLoopError"), Re = n2("UnexpectedTokenError"), e = { DivisionByZero: qe, ParseError: xe, OutOfFunctionDomainError: Ce, UndefinedError: Ae, MaximumIterationsReached: L, NerdamerTypeError: I, ParityError: Le, OperatorError: Ie, OutOfRangeError: Ue, DimensionError: _e, InvalidVariableNameError: U, ValueLimitExceededError: _, NerdamerValueError: Oe, SolveError: O, InfiniteLoopError: e, UnexpectedTokenError: Re }, Te = { csc: function(e2) {
        return 1 / Math.sin(e2);
      }, sec: function(e2) {
        return 1 / Math.cos(e2);
      }, cot: function(e2) {
        return 1 / Math.tan(e2);
      }, acsc: function(e2) {
        return Math.asin(1 / e2);
      }, asec: function(e2) {
        return Math.acos(1 / e2);
      }, acot: function(e2) {
        return Math.PI / 2 - Math.atan(e2);
      }, erf: function(e2) {
        var t2 = 1 / (1 + 0.5 * Math.abs(e2)), t2 = 1 - t2 * Math.exp(-e2 * e2 - 1.26551223 + t2 * (1.00002368 + t2 * (0.37409196 + t2 * (0.09678418 + t2 * (t2 * (0.27886807 + t2 * (t2 * (1.48851587 + t2 * (0.17087277 * t2 - 0.82215223)) - 1.13520398)) - 0.18628806)))));
        return 0 <= e2 ? t2 : -t2;
      }, diff: function(t2) {
        return function(e2) {
          return (t2(e2 + 1e-3) - t2(e2 - 1e-3)) / 2e-3;
        };
      }, median: function(...e2) {
        e2.sort(function(e3, t3) {
          return e3 - t3;
        });
        var t2 = Math.floor(e2.length / 2);
        return e2.length % 2 ? e2[t2] : (e2[t2 - 1] + e2[t2]) / 2;
      }, fromContinued: function(e2) {
        for (var t2 = e2.fractions.slice(), n3 = 1 / t2.pop(), r2 = 0, i2 = t2.length; r2 < i2; r2++) n3 = 1 / (t2.pop() + n3);
        return e2.sign * (e2.whole + n3);
      }, continuedFraction: function(e2, t2) {
        t2 = t2 || 20;
        for (var n3 = Math.sign(e2), r2 = Math.abs(e2), i2 = Math.floor(r2), s2 = r2 - i2, o2 = 0, a2 = false, u2 = { whole: i2, sign: n3, fractions: [] }; !a2 && 0 !== s2; ) {
          var l2 = 1 / s2, c2 = Math.floor(l2);
          if (1e7 < c2) {
            if (Te.fromContinued(u2) - e2 <= Number.EPSILON) break;
          }
          u2.fractions.push(c2), ((s2 = l2 - c2) <= 1e-14 || t2 - 1 <= o2) && (a2 = true), o2++;
        }
        n3 = u2.fractions.length - 1;
        return 1 === u2.fractions[n3] && (u2.fractions.pop(), u2.fractions[--n3]++), u2;
      }, bigpow: function(e2, t2) {
        e2 instanceof De || (e2 = De.create(e2)), t2 instanceof De || (t2 = De.create(t2));
        var n3, r2 = new De(0);
        return t2.isInteger() ? (r2.num = e2.num.pow(t2.toString()), r2.den = e2.den.pow(t2.toString())) : (n3 = De.create(Math.pow(e2.num, t2.num)), e2 = De.create(Math.pow(e2.den, t2.num)), r2.num = Te.nthroot(n3, t2.den.toString()), r2.den = Te.nthroot(e2, t2.den)), r2;
      }, gamma: function(e2) {
        var t2 = [0.9999999999998099, 676.5203681218851, -1259.1392167224028, 771.3234287776531, -176.6150291621406, 12.507343278686905, -0.13857109526572012, 9984369578019572e-21, 15056327351493116e-23];
        if (e2 < 0.5) return Math.PI / (Math.sin(Math.PI * e2) * Te.gamma(1 - e2));
        --e2;
        for (var n3 = t2[0], r2 = 1; r2 < 9; r2++) n3 += t2[r2] / (e2 + r2);
        var i2 = e2 + 7 + 0.5;
        return Math.sqrt(2 * Math.PI) * Math.pow(i2, e2 + 0.5) * Math.exp(-i2) * n3;
      }, bigfactorial: function(e2) {
        for (var t2 = new S(1), n3 = 2; n3 <= e2; n3++) t2 = t2.times(n3);
        return new De(t2);
      }, bigLog: function(e2) {
        var t2 = ["-253631954333118718762629409109262279926288908775918712466601196032/39970093576053625963957478139049824030906352922262642968060706375", "0", "24553090145869607172412918483124184864289170814122579923404694986469653261608528681589949629750677407356463601998534945057511664951799678336/35422621391945757431676178435630229283255250779216421054188228659061954317501699707236864189383591478024245495110561124597124995986978302375", "369017335340917140706044240090243368728616279239227943871048759140274862131699550043150713059889196223917527172547/335894053932612728969975338549993764554481173661218585876475837409922537622385232776657791604345125227005476864000", "24606853025626737903121303930100462245506322607985779603220820323211395607931699126390918477501325805513849611930008427268176602460462988972957593458726734897129954728102144/17750092415977639787139561330326170936321452137635322313122938207611787444311735251389066106937796085669460151963285086542745859461943369606018450213014148175716400146484375", "399073568781976806715759409052286641738926636328983929439450824555613704676637191564699164303012247386095942144825603522401740680808466858044/247958349743620302021733249049411604982786755454514947379317600613433680222511897950658049325685140346169718465773927872179874971908848116625", "1468102989495846944084741146947295378041808701256909016224309866143294556551407470861354311593351276612463858816796714569499021375899793849136855085849133702029337910502448189055357182595424959360/819363879309286303497217527375463120404739098260200279520788950777458900438307356738082930586032462601215802636320993648007907724899611296693997216938989854861043298494990214825163523387600982777", "5896704855274661767824574093605344871722790278354431422729640950821239030785642943033153793245906863203822369276271050164634206965056233097479117980782641839669/3030306850569309344013726745100070601277982132543905537366562638553198167007159067544789592089960911065181606283478843359856123992707598685058297067179343872000", "76631772943534985713873427262830314617912556928476573358548256872141516989538374761909611879922349479420014771499018155447198112155515453671128814488139633810493264352294560043912066253026059140653027326566801398784/36852092933388988649396042883218509607503204211148493545892849595498822817623842579026942621098851631842754395231561679671400197056377380063233740202370686144673585955581403046886083948450136247134308381940165804875", "3159076083816399509754948610929467278257473888282947311280653574634802580912280940686954763313882823327077171624015737719617373932318151594325834524000275847475866299387913048/1437757485694188822758304467756419845842037623148461107362957994816554782989250555362514354661961482939226272309026092009962414616417412938087494467254146002233028411865234375", "22266067259907364984531611601870291368272674573653403965630628996687370994139884833897773468149149664829922302484782423514167405397665098388400450149078982462318781750661005833037235183394221496186539779712428265837926417581952/9670030144664428565128962309657100138096047028794689249320859276197340398920725569428532293373676415359965773460364494998334259893079003125373872108770534788283842907318071170285038777091588292539102269617376180390982915567375", "14604654564989239958569331443385369522850975185358647132770022716433280072271007767111036877803328768910274400515590151934676819262085211828028638417329558229123989556376108454497813055/6090614019162516693013973409650613208227889078878781039105047015752493519149314227721984436973374032279421344818329285207124280297611253861173835238379831004010748379874393292231671808", "1901241885407696031217292877862925220917660047127261026827869027159993239567933534052663335498281439239753018507182016153657409777749792228538380379703411298411623469292891476969894084838876001545818141543890273256985768690847587711270930688/765116019778838839812655402103512685695769161212360553099732689795578904762091216998790589926057819838537805856579109910198553330075924857419395160755642371550113347465300208422126945265887065434116781678702741657275181694851670325469434625", "139459806786604751793737926146840623607010208216289543036026206208962059593900745886202214788747453279179283344350478734275973878932538430194363355795823581315329311220701640235653288975569812161436/54371368534412517053056101353618694718215711767266376573138772968257303578467926450212293233332401067673270853953399269852376592855992724934941173346260129257754416412476202526978443681584633116375", "1045669091124493070709683241190022970908640501171378776604126771144008324358233819560649021940145166254659028524319517244711645162132513416238958170819347361185944945680269442845829390112062101255500836072082817820950448463314034677353723256969344/396228259004446234921310936915931611736815598535963504660076315228798989932959459406702091180060429080345146735173591749448509810270759531977278642135591672189002006272326131885315743181289970885337574780897529347356567086535505950450897216796875", "9912919238915437302006264477931031611447467070103973106567538528951878797932559935860738745374437522819124347510590800370471910492338584284092534264608801221235029062881964101996762011296996851893455828946521/3660537472668264151218961634689665210933936249986285290553357254224360417386515311493310199319523687171757653216994741150377508234317025158302057758196429623723072084157928224798322861732880034847243894784000", "9263710175433181746575186369318246002919895649622127410824041370079225200282403368319370743363303164313395723904510539050157032684710468364067204876434546848634842333436957245275217583248805993142227630297924119330553308466662488683624783307023014909360640/3341177182697517248552428837661919299725031035849865632511882688786226888137634168024976033652753689210700218163621739078534353578510364301481093730054725078138658805025014615651043313990684347632166030359086885561104034510990826655289288319840595753002771", "5116082230713622171832327542439052727465114322479570603905499496221224653983960598946033081212909066917137546065542953865612718836914393275681318667667521726785633638189373998191090501201427906618075889744489190209584/1805752553736060443820406101277706970767657006346276183748749630179442318063568286372320188433843729960294965366346522303898609655762491623098453269916163621089005711823488749297418113474056676109581110715068124438875", "246569125619713282434448566970352231845414317018379160824176638351574938993535464763890962336882760882398479702237564384291290459961036068916857265499633061660562532011248501476114401629839742058389195725393702000011860799793778295606988057303225493814005789533570432/85307063020836305797178273029353623060860009152114361453434032434699636078115114412588719432277441055049132559782203988387794711585368296817222565434951256788867244687081233632650953850383220864394261763844194948389861147622944651546912394593164406926489862036343375", "133672026303452911046163998480860917119290576658330909785707604886881155606725822685088929236266583416708668502760907677019598002175122453170574729028452721476464728566191464897928696630979863154661704374206171469014225143/45398130975270785045482567762871405072140548998125471025451666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "6041693953360002800224091673336562508913199995987479264605216252220579740134601435770085920869376641180763419907442721705887169884230643795126568815123647603047739799302562095542459344811429882053086550900803768964612193941424128649976704727183797495759082741166938351872/2016766992122395667828553277997478570503475626107286343497917705446132017125079612756035254750822860815515899557855166824523851779156336235294914777307802256439645525835223691751931866188957324792276149549076500784191791380803500156776088683900346065830066370370083309875", "705868391597244582764749229356331441978820024796066870551110486625729826111158236686696326058778874201639006234449557592353247542995871491078308187261304930042019640830629526023972693107193897009168955674240659026247094657679060/231848642748474339277532000336338632910990823562381469441716922006107433404523316252618490265927265734670539384485699132080062215196462178933963957679882342083893417545858074378754089719547920901917516016346211301054206383643383", "101832160604157943093944673541651013907278188571533075311673249923948856034633446617630054761681006062910980371900782781226979391765818325065031889334563981235894369036439929651260587335544056975715076598739977065390678221999918899003881778449092038750712969437519295878491018112/32944277910571666002449086492515464541550138004002141571670657643770713783329063548790202120805341989608877739811787937782240802963962520261844114327432160788193314874913687387269408387417806176202979244637915812905426565263196954203487934225589622864145960079736633434831996625", "10655703119271468913597640479490594180964700448340778168715956712130636958373270202484276402718566314881119559090842449610957974112230306343486091910217340665146602598568991520563987490686996746558858366002301982443029430290679385551/3398412687366638541233365137084722368200311117891192348532156645374786104142009695796409107380345795998400850838706661851176885183144928701608654514812261697598380070746520197171576610572921007069104300695592751543563472456384512000", "1903039332876763837419920240543738799531131775028971323439870868730321221615515008394327723508670975623498588291298064320786970626232668956372004004897872810230178526101184611242511193415796638694370503100219710864543168952682617801833318493436174387568067811938490953495819438108686336/598806534367503338307287246320963280558134937382149405305466709787179429317914803617527827862441615350396864359976273212272586892074799651088317544101755361439294687323233086696182687664637422796995789967075271448560870681210580691574924544896656175563265378514188341796398162841796875", "525573915563826130963525826191411949262846916750432019596028344808298471293378917508549164993368392834023782480702893643486699787870059946429810070222126260200026332874480239090370088123833491499400991181659445914352500247596757005142623368/163278727324937389095822405034435687776345799835442022795533783889356344755225815267819508608559076191292900367982490827396869405536484846115955581043091229202052407483776587687967125885665493681707461345895999542381476164157058393971431375", "9263815657177858787273494705338516861045771674838057329170239610953039987023429736752079544014780707408666628475997291124805562998227296677616204140605356257712022384368492575381355563976330347792504605666631512343447560301417325154003481040250148561839861837778597346623630046623751094400/2843321709948499955095590862256744532227698001408929142548057792217790532624003190447363578048562448168721539177458065482170148482375585867230123873178100117094533143052886527452665480614620123764036974180917207421482431983407742154634391264619615289225747664532332469783301704643254076601", "407959339726114455622180187758753007349209016396248763075759257357925636039752474207685682218422721827857994768023399625060206708378433960993946156803948655098667156937949174400873748557248801874735834957795040139401560494087476967548060208243867/123780218751812156744401121690996305978134694678934447237402511116731459214498784497436358160964198336874043702652746834763131444030185151143987331404604087778514863973633941401826334750268416015224906056576641018962863645043976537664227639296000", "2547676391598917379516698439971914695230548782904479778605691338364453606537643088857116141939170899135026552016969320061900926954008522781162186995856580955090548471448276736878300717869625651893741316530109438876067419826217901657017506157997588944233677467357220316084583383623602865379325184/764562034757392298786420374672266498815021229519853724850874576419885380830752931701831256959159800764672605004880389358601658343203513177084389490286723240185146570925957286083025676875197029662038213216541352875570101363668917766225709569356861275434470568767077844675593176178611021135573625", "186545352286463730559933346565311535598243666022232037054735807289501173444103692309735768703898330430135399033529355360391658728987379385732098960609744313878477967971557204207043802935782878745271859468248704012618254203101767841517569443555143252/55399179641621656233589820996143825959365789093262978988289445625153099592463372579496245442338653053662134699646413817866770218574795378644415019944304868289119443774932782235638737888469746745621382139263856603239588594078668393194675445556640625", "664884440164786473344854955309049113269357314957985265728106924238588705533437169796551912202931185746193155801905841712503407258166135075966280435780812714252670362202091663287095423712596462690753468682634261029392794173636943978404002804413009590005984736612421172979101972556772005594499779860608/195485517776407145286424460448995460754674039560651791192647586550615878988380153730602665795647187884543361218962125172808792176382956599256188706636727418572541254480798303566840010217729386905041217793614214518363859058348249961790104618910877813067510758225302884815410347238200133693756493703875", "2614957283934314904315471338485451166053664494383241929385424599389309215073267052860464009981063483440201193771607520572077231889699858482582363845275452280606276949653970992719332472370351170732899676316967244504534154616036371979031399425846100527685/761493664432749089312665480773496290658029971027686543404885407644062485746072719559288231362060149626237939029641098328278650939665665969011529293869562636656650999759724704272743235210867676873525147820749560155294022488994426729939894753293900972032", "124843380518493746761140367283007507854364503961156704095198010255465940085534099747297600085903814014415830785663764373057896014399822131175202342399536439284123918855893825207202244831315575594886675813256448846863723093240955901916229136393454605455444105444987028391748121054399538064686074523506176/36022228212051654395480210378626648518430280334458144892889271272122662467638331091863215146548048144675657239846337165813938424387499358852301016926312083940212100001220180762189978024821166744964908871443681332664798940660421469519997746775275873085770018269706847741064037876137315001228315806659875", "827992369063043155578730871896750570951766628472810506926098505028264552046829097082095665194000002802661600196840639204300804225352337632259980703832713031790922485730615305441309917696044954289187837653933158950774246017223571461858939407386087081525130831392/236805932823686534991153393869288530368011574665859226704279685567723830696754821658770176385138917722808377962346690757191122309876922069867472518117628639913077442806147910884267694879089753138429767401700283014143248445966474839193628309668702223994071394625", "17347276886878323736540051321582548724378497839789943634071026331001588645519865992773157565595886250230140452154269197770615097377486013097979087647774513500701793885978192218455687078883766086309728287172567466406449372659680040183273634701092561727514713494914793425407149186041796935055187281744386432/4919325621804683623339606849970832094714371903709195539440424738973575902329797546592497378000858196173718145883783709223158260700365224756081275272021856393735663399552166737690038832550853145831185979094979556715294990257315369124065787473707136464772247917156232366320267601622617803514003753662109375", "137984231830526866236186357461458917020538108058615632801298091031540729111527734872044790487396302545910108285921421417358113055522725197998483383380192391312304647004240060970929072498293210057120617332323445379424867965764749534125081131327565507524502163460761/38810445792642817561168950890315210470940006613819790543653745327778579787694809782601777514116858514049585074667085399925278459138508514838268321349069481334967221455722811414399738756151414906092225265355449011152267068726417045644222323488445626292574879744000", "746567120547823334914136339633766098626636643449144032626270358619125402826113269699709721071135471625588981126637674402048519990010499180844665151971356149292818375448504122545400227696621572263621729512461528550588108384619064912224884465737417596190735966915167530332762203074440688676123756162572829692160/208334337057923929636884170505570363171441147899816815785150954417598643614152856767186132467069365605496210036171429712485182162940460120834349006784956522600679357307849981862006710239311750261522832996877712350330290831638640913932265004107623954913155144975252743257846945609734368518424172846119306643431", "64649371728330695076928013661001819989330953381731372450140483779536126948957993261299287753791770622512248630224724990234903928056275080682537641377393210728546364176267034339221558641084730052304770498929958838997239635790469536857863963589118888238069738647239076/17903951498200212327802847425913723358452100686246224008745414214690047078122925247086521362329833307849817944645647750649290248110509395628305970523384831671737569872597295947593410067364379687588919135621621162007748635920864926867870502568935739725312687094047375", "2454918942158003099688922026016393688092399295166304634317616773083386087532869193458590448918958337530406410803840837646465522656670050113548208618655070231274778592766244282964463702354872753657766121825196898916725498553882689210280080206627916046484942827487726300822318764058084323314109595329304407466188383616/674880185931325925966586583820010578979699141814417326552629206140252348822939845006845669570885271576698771404162512001549922909048916000017837898649100825976232784446638776021483802989797501705685620612986771521390439936066527738682396560462899753657942715306792783283782238662155922082005591512296007820682995125", "74018558041066162916454010680594042518462756234254788158141115244349044958441521749277686851928706433556285971088455226217644009628399441967508838553345152310730562224910795446341601049647392069373970101491741830623078126344928804029524181578945586663110848142571149861/20204153620006780689923328634586091101021423979622170579036140596085566172775051595588438592742563923428900864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "2127032036758045513335690185608563023954009095206088224487365541995326714285119384743928987635752931664240752323937321097955456543854943206092931247498833001499955456190701695430459583885125382086777607021670447795321669948733328973350279846928613949120929250312666393359442423066212311060931469017737106028339882830848/576612418511902928757340062840968526862381326698309578771238715462180282212422302261044980131594522407066369222998903808960617461164985318633518680304995784614308979881735537678182134128319596636920719106506829571072447362052319438091347699720147003209417806230149598345068078717948025207635448205253184540936478445125", "35289653975561083576641954928762116897061274899517309102784750384002335187117263273488751066569234386120759866204372398611196356888479036949053282301027789530999737306501029700128744408015642211359442183943916106790666114870974212159410284751571905275610921784716184508440/9503006066880728386808143045924119024212377150217533250562188228062174064693375135306438120385877320162710918716613546077156389583384656340709638430674364232343609717735574035535102953482366914421205216675248471695111720986346092738728929878538430662191272737183832556131", "102633551023964794485575491065909467125458972250222581133681080524371507544152979467328048718122409841060527545925136196267751819689935599599321090571687632103850847605493223603751038996548520557330016046032671961857623066292962260173840972332108111505971231021442896036760967107060309991355545554631003681544611731245475968/27459658121882266328752886605529964804078316737648012166874496015808620265471203512606463219297059547428855195782384236337998738233668399173746663289852416697917397644234441300570212555870401420579737973722145663287124151049692290432756231390864184491891697469874600345958989433125942336757049639797225309327019275689074625", "10034393558388390065766795008210457368713365491566387292163814915435906649268119060550511145023450790393353937124495488860451123302412204483570913557762460385297770427946219119911920640306914453207097103853766023934602534502476962159682750262143380527529536498215384467975023/2667919902603322771586358077760621955455470781865624844984169443739075976572061827709528710108877015489050369589117491611045518221354793418884447632063538994046714401229510497599783726376490260140723032102883617341970952663947646017489439179953454964374887388652792446976000", "248528145263843375390386172800048509380966183384567983242213959113927668429802237067505890436957693495616107089384741585283620097982859345081736730899912519273262934785992235852866637878831878448348444611412764161078458068549719800733237024285525816723480868704742804077255242682077291713092790250511567621735004237450946304/65676865669148624809340872151906045781446981664561196686217551358486802274698228825404698950974939545099727242259547145392352658637333562345477931951890984276718673618736565926663528625796412420753961231404680876558659735251469326707567479071881966875336951133475135427640218972722939427821842173216282390058040618896484375", "7805448718805635696495809414501206964843262114470109146341305656318015059743127114324245035489577134938579856003956861881125856595981500593426840968087618241785931128978516340812066502964561231235073012672356530509663384739132686548934288703179479011016719045530855033205271548/2050525178024039744126592505352202216905491833360272553169520915020715464206141942151086176509423406413311520838568324134077402841030113427309725873344806030836314500267104070131451720947531994814710189000076651895520222646974590481497382830325485174899169093049299764813276375", "3355325071293197839434119105039673324264765809771192815982246040415580387729382404624613875653005261578877047405365032178619450963731719777167015959920645055600439987161800547901539269321100559393048973255388860193948274255340335876890491746900991668165565729269698196233805991206691196045182214641935483083662356666996922240/876402579119117579582569839757462461050855174353108858954282915644790659429341853404829661899850841645529640454766173209897510988090318303454542547519850473808789222552969933222203420847859171250332350076509996295844203965564448154484566493395403967626596213792922784509892086361572955175655987334882030766001799867659814117", "218871061991045868372866381545267589365410350294028138778572466235486397478028823720846191998825628156716190463263492304639890659254282445466806224943413446008645087186307985343574807361972238230520975439736199291019544576443791916302825193643774360055545186783819367378492631806297/56849560726416896431557940314760680962653658127458002233782028041537121216487790008085876994020812492987733987414743604239935223783349870516284048368761617736127892160849065895223288023531930411718807065209903593668117085505482007061969339237404945180379460053180570404846043136000", "5008685108365226931582937964451700746853986170633433728409171904803795018146152804690759530990140552460596075588463394200510044617816085275660078502126507209302951286606953039953843685800941558212440519542602092919776366067720586295390886070120828199562643208637974347390938772070049344991272621102622931576339988103674070876518912/1293888539680354282541277646947380627241979967611883341823378331667976045287311988103163380651334828012840330710760757271860219584371109472132211215957402251594055009937397184768184517621978947384029376766290498101728971145633139541827544539988344772578184316843734267915665730981857376872622787627370859411909330227080697966353375", "15388340113525711660227566446101909585796746979396093776960989868457211684028149502578116456785221720682202816140911944661051001675127262774824593420825587319436537346311831003212424497488485098543512314062112948777572038731823948224734505930748371522309451168088057190162878224801232/3954220582960831691377435160890656173654063611768428458807273708040518769541211737927975894584024448193835165167801976423275767590502552964407494549049777006346189436817215329891530811451811864579644894987864267389290848598289794977382504890216219362031324635609053075313568115234375", "5099039333987561374222193551155323470675617979816941646196895589439391685938046865391119484510329634015275893520725135141878751153360264368353595348921951280561029028912953500944814771064409611917475818956659775131751121312316084465321917769679881052144364834485866477379437705913911371481828140817759401117780199246301705600020671104/1303503600297679371136943454060319958680553228879031326679449263682048703103464872914972900105569835004878963701599765030590097739639045890060548760692125546754294514068052902543220382104483822438283040090444827980927544440984823535260277595466339403795403200720622852069244768910603820007632395190204569927612348189089161551951106625", "4902837141334073026145827027361937996261324349722726869116185158777439337041263482852376194988371853413467559557923410949898048139830183335197992754748294810838187068126867611615800383834975563313220497573778480109264178673389149671194149749735833378557143135481387904961537942569904075/1247045310545991266291285730016853118981099516935251861146038369985109288084420528171217942065832292739130145780833406014673689119563698528225048800794718789218267628507713621235056538202070171596177775095071513194885568843375526804796016261173388452184505503341132236719484809714335744", "38114743522716832107917466438257616720476488812538316101658139632867788464381862291240727309611460187159930652186486096300862388591521625093237019662273764387591494074792574929490381910446287947994150655077877204446864004067956087975012773988833339521775463977233068498404144221045837190392670308437391686081418318624745039402145439223552/9647001083383999453668111809775451078976046488746916070976218645431946648087171586252172936600115032316383427265217993193444199863138429602138841976586190525451324093772097241349417938578878934577091671046050326087898259692917931230974174799815198493279413438192301437068820185757869608523761456160341754512329264442115351926967120404125", "573695055225225727008803730767518906490704995929177617646275646884555707960986625481944101622708415415988844740028718027554452662358957933526173824325955904005404113684003841990198157072540659184995738719040024647370869010473254071681533880576462368600901824622431045529064651675640055917092/144509482511118816399089096021290587489594541280398871255876563615464628718527634679330291741479135415168539765887291789615790513527330600394937614433502341116068305347468133950204152174094704092402978083370792135432486240914953928188835819767755172666693219213868545854371103120604946200875", "23876960329653589647925126180903391687666378233201794403339630995420215267415575142266707357255726330536094448314199602616026935251126469221925945960901748679919435908556550271504767784553484434363646489174587463466333864577705745452492395785557425904735048180164697040313528831173448025400634629163795223739061661461986923675833880378496/5986312408594306954013526197465608559068621248896320652512228238115589875514604632230098997609482248000888567135685167138762172475788060284232459813998201719590208742091697294562538265829954186149162974972471533202880368317237508987477069872431064075005305838801862900501819963793062041081601844759452202282545840716920793056488037109375", "58168289917567723171226992383559866214094157894992327555495441698028867727845766488121900626912848698952863438654895252811583144479300382761129433911280049009362667380001406579175563745824368613319103673817094498117944856004415812877213722455299491145649879676787079744410765053845551958756701/14517067289347903655500020160671113450349743650636953726251191692074385521975132268313263723831804150872238173602847065423463131917373356798750100313145228608894881457107689499956903046984443545789053438946050974567665049237414588435796381674590098629779384355275820782532479708807512981504000", "728621890568281859295409481422447012528302594365693410763821707074444799793690738137592101239862736313347273167450056625929591960610208335290882047413011571781161008296084630072829079783328937418641417642857196346026366370059522990813537731394823630207433267854616768658990289454635793326766697884798538576055949457122067828153655416688640/181030730759516991863708593747964787874073354051675597050399087612142539517308720603687322924426591889179726492403913356461908748733972707460063017057809060190437917851790767968877215795679844983288935075688219234885360839984681619084834228226744165610073685719017596630302462070188937998558312507638434329299017584329479516410907786681093", "86855946923438322218622470067224691860808273886184997065663554841573982963995340977083049132518812923329423480393306918856650577072525633920456721265953575424233701929892019410099166322511413146891121248381648145391642571638857576890568882512129960291171866772665863159474602604647289052079991768/21485753507365901947528588896402264670781310878547726104482740647554738151100954835784115119035980523529677083504495839730499664052882400915208251594384038810917282207449860876251558307288700200910747338758723324686939379138206117634546981163355060740270734146780942696291669461182599512320099625", "2158989152301022938148680102142188531448821359505188055264665167313418619665693092337665573150374231484840948447637297247277576415460889296724813940128955070240137590073233263168835678714131062764247434144994737610229909964847568491446606012581370840699582055341626266533733744293929658949697805855362114229666626620766245630122333733703618176/531794915405164005613733454597931482878479882704956110685223892325074211694837836221759995948610212818642789132749082430059593652854659130217225506942675608692701447738732031302987802196501895840510235161825501235133794449421919927396142470196961877376701957829921152848178076410141813926924749057304222282687697297216661687583257901415465125", "139432548574396829074586704387656697097760057897628994548358619815052936481650396157428747411173567801047221928593253479330480454469358220685854351236980383914223693722868233819483137401339800304943891968050399345430243790898955416907228948287367356990263740207046902209563417267686591994743547621/34201151688775214071963206765436083445901621442002061707492082843232231754829227303539041286301398668437202547003300396162741375435703188500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "11008517174872833286150985180322584448162884832099344969609291070844193524816852920942383850580217443209402836100467940651581092350600329145627967515818684442171571156446321228596914355704205623857871497315955269266498229823278800717909321269179839084452384509142712677235552103459737790674103994445173074670347080506698168482564009465276165824768/2689223396936080856855299215659204161946704205931885125148201643087176556822542895325191478283706585400237901215485150928036895428721912118467760766508162631903585126377676412573187912443878232521444786090510891599171741773242011017926658231638022943018461086517502584854390836347781674626615709751386455292026775663545470794167629144456268750125", "16108638074211260588800537540680707641986073914251424878121255234668558067988171568946079848860335948991834525552515669040163026131919804987340113244760738846884911038097907756220945883750502673899084880578229601870882631165510396775126850307838505063922101682333806284668762825609556049426829531780/3919363961344261777100658318137884299575193089462944554282218278496298610828757650104922583359642384253066896538203596057302203635134833545580869871333892935330950583664400555463557735723364497947986885146043017010159347046389604172186788902608216894094289769850517098027486468084407618748895626853", "34420755849180279597302103726180110022640946692592540634353734157479505420320000324260530767186132260970572450489530034440214259559325114511265075416512316229177952140217732655405289808326341696986755141965043719344169685611217958619102774617224847284122901023774956887687026904767714958090256282893003000752947427857703259704682455375442735857024/8342030311716679826889917494957593165464748884572298173556257652389845294530325764837124998293398445804458613956489096007564811101361266196542129764287084823604897187311540561857741285793447174119667215803837719660675298308873496219385226998078648428368061868944322478384684509466965129972030932418920415308276430355882329457342937549162000252625", "345888075261020004071220843714060353763382280664960929903544964118831237876694384053904571498830068831026644303797377762345709976595360421502594656308937649239978525713471393570536680412814805076323426256584504251728507416368609420882442293831684681071553766603478479006495757222912500012444787804577811/83505703731469734628961395063481893801938371516752417759131774530720075262459158384433785006689548434701904106312038822969658455364219435022841597243178757423598248565463985786213156556523685666430799283870548238467817226915680747412191245046634279766450629886904716776719219698922088211154187845632000", "1061717830619177527082296723099890392273896386613997004874669053445943252046748251883532634529759169500795452576392700472771365240996842610207274128102329096619028487369622001737128463631016494371635687841733644339636164570819431573829173533941056258744442930643735587780907310433371453992062647737259587563398111688659657406089003293576961475848704/255359631537215747979895955806995352799574790340218399351168178555478073997876110889483456972687438702262017800167048243754141722496276537685853311434069991222324039005160057724073156957530106623908696241268268096879569794431919729620178375212905203484165745866913773304319069321426245521467122472046370356725530914587807274074293673038482666015625", "274122944106300296738399632684955400761495830361663966466225652918683099779465438024846903286816813856490888796372134557295699980528187779624865098445756013563535339056233912394908544185885547842235097677765325396255649207317018754967666450708249125316192200151505568416495274671679500594656671785202496/65687592621976546250581560102201535533608158256953087745856906437400149205693427285162333502528793675585022025602144243543064185647792948495372442630333800126269123531636800213405254045262127593759539706750242430153456891792533267948231185296091297979933562727112487057234422009426868531651634706262125", "7842680480716516803148821198697967237136721860017131244266974996267074742248599085253569637183007740566941125452215834642683053334607896723447140851344501084122965014242091312411884985569341166545074688756440728922408743841592658677792796881188604773469108807869960161395759837407978596679911066586626885830991556090978327508459276025943279064965688960/1872528612245648675720382138045071131304652050696842872529163720558126655075937845539792108048310219395746259570506175902206215101518698490144716531697689534559827422735649881381597761684154409796315455445459537515308174919488497154409643876490472215352056502193150125644288086294418253309947229151074464928874881827227706992859640236086417889990541889", "5300824422251242070074569186825929119848111723012841627275830216301188228660779008353049603527567784119877706984722171178137272986345560485784907345500893648715341273841147320288851034078863843374665850852481747000237834238703248634174397792745914847774297223176674917912406659831206869442510948965571661/1261140476013707338477604677428573831791396352814802149994640617701773078174882455512668089072441176857892331468691160991310474734143842336092636848492066592397892638052212250229129355009939118431643425836944282456647571558383755315238500832868535816144280088644939696339160092963629012001958205063168000", "2220223718762215584659309059880106334425515875615107369399767892051551634000614327272260081056973863669004224981561870246078120862256383581012183852291444462730018546753183156982897386563561418424093883164027305254176874653780425452987066512563140531367766900610414277825262239199580925879453806414860409441845631158680721091621460775043562065815179617536/526383206607841251253861841374779803798480623722760367843070466043030228662340154304405180907941079883976168609082254331465595267209149963786388600028701073430773581228212441424400748220833542964971495005714483235359479470452593264280645360131482713147116366500300066771223383007216182988263355451923333319170174755334598973202740108032097242475554128875", "521891797109626296684891455959263713257353500867652268541535940159815152120871142196535233326890353914761242025931373491906127275561002910157909306979093246574207104081108188995072105948138299097848175016082947174156278439986705241571619793059501724269644447572323501261424770743329858038040685313621446524/123310256826873923765604825413207481739886340225713108649758575106598510022338480189649787216845041382860899099250547657534972156328080736149239332330143771138115695598493059325064119176038137294863053148618656356436332991079150723235214278848602671333076219529535123842212129829931654967367649078369140625", "66086044538329677372986118727999622900471937619891337714357792768200341519193500393739322894033303245376225584865369486696276607060432449792893028061817203932068085863800494054274423512956136695211796751845295921015953538329385253280866669403169919614982155350899648626481405781514434761541281229159396787287553493046927448595964103589100429722948913403008/15562137339474350565671240515273666798063901504051979980452491653975250630723677279081058884163396938548780856293034775459223871281049026140999055923743471466471830572672766633086347312178711643724485955576579988182546105048041649947277672869613992334541438784737993706482731696809943027528882927942967419447250586964258807454003775693567366165507144866375", "335377615394100148751647837967017467711612297170079949298328061159559939969228226474615711044891085626519877634842694983669611974807129333052471799687426665556738316626171408219730853872410792831871526174987402129691897433888027072807302411474690613948951673562473758814664346259109886876538510453475290967835/78715592752271462306588358880337347638000605031000575876214116610339827495261512281635361568951675037834544811575026718101166562072917855004822606752296233435017284127594847656529606648345533195437635894948829857913798336356647286032372695130461573940500785137424365840081503133157308796505622439791698116608", "20090879701618729602554170716780970848925039917987945471322994867171660307998603515745066411687983450400412739285577269751603921163835619296822801840348319742203974023505186187060251544248644338412667631232247108675504629538319425769464277309915502144443973397371136256151336255138506001292355330875114245901820438821732843540725116728866301271466614762497024/4700223519410528857298732096729483544820841497820611795617923063440946097326817340637303431283005509904481323205480729806879570430868897342398783028649633951362398196137429076844504529051072393709154483678349272930361110568616112723747726853614661953537957117231900032044221535502745676310313569997665352252492568100075191900969170979460298189170486601502625", "2904778979985524171206573028445379872240558084236464200857594814631031581387804621371822074061289363372523364167184697785570324832815972970658633551879143187709707164796663015180877412717910872234647704536817108676736661804878068078543241390828229923424191204586313620612539678930999769543756218765870513049986792/677408099044823641581658869221044375312077929976719183424865834811543737800956896926637625166844372424044003929341361734886232742770909683021563822987505236295727478159938135467975522336774471915167606673489722102077041330652185811196423400701795791669780695158730756241178262962515917389382302757366325768069625", "31270155809329751863885224732454397292230969002004953832354065319735530624996254695453061851449600345977646455072512400760539747054003851289540339425848681804190284451253462663731135337775088379954403740058084949675460445909826322297817535400604180338201322667139062500269285493417563095365899631360901732684124930296643108551710704785906431324876072470231424/7269578038000504017073007978844992319987411732848567116655821196644382777088703228960020894756722675887473977480537577509061256138261063926845643360849217556370868752909531088361229374467207196928745673402380473721018157327193509586295879051411183657185176812738231456253321187419224704301236205478184115996135940848503487199394612616742961108684539794921875", "432538822079707760382094121020421735679118830363764570640789368235407853152380328891350816400541189148550353337874309885334920995713154225799660601389784410911658967499100610376065640785585342035058364676314084595283850213942576431310823836792440218271879354669291052589804956435743500204185107215929849054782893113/100246574739326291035824954677502591279343311051719151327066341370995390423713403739043396503785261917771859220535505691760472395306543276314938287868734009582906895763073519374099272340577921671298878837400921045252035507925021904954445172372479744465666760762909731237634082051855588025732494461939980856983552000", "1914333673689206389116942789116917579088664511118582610293383428712902211612554212779880638065888518488492298586641997844141510832940409501694726851666478650414191249534733087933879981733561565249818572204932715347752949087800778646065986244657260832234479202201129845117955957242616947361016603702640821256099895469088229339240402478576285854783063612307200/442333801076281757298117784528962837115323835962460661601905131618341609371649347131724700192551574625400701487125984359494804828935577124602622582550626336986871791407398609915208114339012374456785705161994343348351473385887949809051796407340988735853810174589261300681030826392672282630613354461927208579993042968520650313621522933214063366558703422757071", "5704691626402072213006354545292364761246893919997531024861408248746241619817955824682639582830486790618668221530365426203424888737658778881721063941495350237419723855000515747725926735319471480027293210991869255971365522170749568996651406002311020883635577590045650037569906001924971041810547543163363976464780729932/1314240362076792592671773873754757443276256223533339004339330559325754574023619698171225777585408160438834449576526997055649849875516310105297894855264038450585295422343454458568152668980131977005808840141079502436391909349182185596381509091427752151860204235071122788499996991078935216686010888734471173124487937875", "451219364084386208718456142329444023337343409261545444643031014769484085278440612677813682892926852469540118625738238137458321112005189595703619178533263706811689687213128887082197330137502064260105387500552856851972124172206996205919556553246133218441769325133725631665593372188755090094541462474970525820334385058333756591222492801647110594428922046641945259392/103648250172203340865458115839764297558925693061798169434516001775068769911768281084188883278842546791612199025413573394167639925287068809631958006622842716869211374513136766899877504136929177267362862319748507372147243911522667591375015611312165464514308451222180272935398828092646393830572838772085366567154646425598388620105539619174837489536378605144891769625", "1591076564577634575701791393842535460875733974464805197283632670013516183281542903377750304419996681222758401497321278555686661981435637461350320471258386388843198706277657208526372100698700615835733712519332548607115875288787602084336341594576426630670911478276101702119972195558314357975365863803265163991961173/364433108410193393847203348728981296285742202617988970384277162225847256295865554341611171460436362780497179090329831885853324392923449579538286804729856000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "5307507148709435807261229345132535134848030343901300324623409721698217134932866488937772986386501538026693956121121771089740095760486362654754229904633476234090792827930433598453200536551779789049352131005222659995845427680686677324963223653949277037520711609343166926627713758990384011274777087968799793410506391884872456420041494598273703914689586637995139580794368/1212244290381524115082005575105703496583315188540177702780216570265159923654197746388568151706509243638302707511238539845531608313334248788980188054651601536067740709977678222790481348003085034888244447626347312094586389347535167903408519024105748523384932942441843118813819781347089702286481924493361058339731949844620763272778960860509570622673048786968660129650125", "3046577098843580578619955603029073328361298436129791931304665777036152915858575282362742008136721284817899542475666054101957899858138590963789072530710775790433466847100422875906866496318804986202089528198912098377828580031852152997907433335176267300286466072997014023120087988748396598176622765923059385876855303940720/693911859077752895978833241338902695755528613729508555938416419864772385336777924892434701804078893822446727762077537955240605927550548046309823051841326355655848406646248595628715185413852040295631448250459076043816328082561248420925930431777502622148019371383254316636979070731427737764160145097293260938978413488819", "155310926743873343426312607182060072939030765297630534544899230213054714482456829198485999782086944271490229412707980997432528653509945301574794242118433868747172279224118534460563400440670015323324602117517342201640016853927923976796453577048995243600967202462466681112804476672348206491490513419336308575442086511015101999847896197546900512764233674747415844045184/35278162986589659300679088538176070649273991865663041616088851923111175518405117391134863644540911005782372831496121355954470744169969774540892096320978686548284501139861783292226140413769665461494668479430833892857992401391262903582109993838728281915806394747833588629467613308837196269424421131934859079260185052081536487462257809987002198437182539441349474426375", "46729591025621874782758519074451728476386657576036360734358719976400940301493939192083339293779149127132651616972817165172116269307276487158069293114860391502484125554406945249728802484128756924044633825692779783425628292959170597009935305429239702926898931975023598456207165067568919757902764815108751735753431153581849/10585868084079030838651390738371141142245086465033459640458366146849314274285871375459898014414833295804139979016362796357043372316321872357817727821559232353993714062535883074661734509440994664726425399880995133711038483607773782532430879196405793694658185175583691180757783597895616920432527125993118171361116684288000", "3736372348124144720852190769710129461145889011598636925228657393934132828633132357232883470466940330848177425542748100211498184494252714616379450272611850068867816250209867530921278645286769418080018709947826876461419654782341309127709703626401211996255743831998918894661053669189312375159058718767082163156988766821194002596331826150321864927832618126580509732359424/844176851007504003627016945212023239308348428094023437269532743221937069345682900884618378849283002998220513307273333096775669556093005637615012750733216460458689282791632437851364674879152695438589692227159038555722539345972833161146108367329370564838671791241431125003401861887477969954740544092178721327724620450947646209914621007186497081420384347438812255859375", "1258774755828991281578968023382624723772927642002016270484090409043454336040857926581316994594109169123354553321469500848146015719851609220423736153365139804086413284787598253618361769125996755159571523632747129480387254164008968993734442164892486441152227433281625391753702577143985047832519062595123255569172968685060844/283659859661671181526547833415653453506477950678651675193210969173130116121017723360258249430884213011988678011357458727603413521688184521573094783291496368005697481333739504490647194454695504722542014845706216224432373442438242355188461951883454664693262684873988061018976711201351382163527093784753398257094429403691625", "84932063355292829988908961192574710493098897148701473172754949846455626381329456661808566365329266898990829247446356970454502007127269708487563279536825277374133681167235811080298134899629580318813382668399644553111080625918213250223197440426147821225593304993621451053135332451997633132772608233430131400186571793929377129211228689703376067763625568623535588709576320/19089978133324852910950469658566458037096027722326716800113107848115231563787455584278193954518442601810776347091253561956877155673550458955562102935555510392954425196165785410319126098393353878286400877305164869548380670204577544630353859009177051698096136470072137579698473017257397949994722015089768745013713383769765609613514021200888647472804720456494757423299627", "802638881530832431828249604040579750916118423833791608589560402449036920165704012070349537114920882938466635598602387718300074733476150548724726460209016834416094317724261857969955414000155807312852092720310159572547644569797512233899495300028159721348599816083166712365215075728968005941610056018023633235372936903015771583/179951197386119079732438617407921535065140503043429174394605652913879982486051627760652197484142547447000508189455126493868229565647284332735552462525598465192073558793335913005459266977086104359621022691931002488052727597513413492393525660272900161375677499228252863529934576881596384036401784035248649026076581302370304000", "25208742399375362881099811032135575360109715964024747212026245529087599633280142314962581193303683759605084995818253124445773115574470717199218828756449187055537877478033129862600982068782249943150019637186466260707552416433010545437321814115233841687700051830170191107127799355485920046505591193770164750886037885397478191534797655616745528343172318318678405576430544896/5637713398995569614196397857525646325234056219513202928587580534159596897880731043336790273040813044077153051260989730372846713618900145444802234629922717464041261370803598799826604841654608724727320798324006129524610666235998113655193642594744544226880944882342204407750193512869672849910003246504052298022468012594459974209940607450480609190841893267203392880360823875", "732332637178584560220688900268566130246820235956768724845747830959547501950765063982943061181526237061809052444110437930100210105274824607344902764184151030827266142225894655531497849161692760385938786736436977268616029862577293984376170905024712952813234949508186306774257035535805330366742322777611063402455261391021097128/163377988152179636922409938163005948596822656868040662831003991395905185823836089887990201522673196719628247106777881741843786365701135555917263285268753605514812568258179391272113405920369587922702002732667842511108732068683407168090725712401954314293193572654347237716691784386690948494003094992876867763698101043701171875", "22391374854299462107923583267570593886002658786775211597896252879708753450794332301142909715845151746786016535157797023153041007263258732991465037648536702217273897876864351559736449481285518249846264600935543582562018874574655740660800634883403597181876364712521253650744197321080655028374602772696770227741610874399454362583980465225235674816785988164157351243193265401728/4983275997188967758382167867656806681565521964135131710678447245984239733544941881418957694612909599261843693554043504855207170782744518943778096768859337980470219783210191765678908537645270392500777411134164918803949155037581108678968701961544979451081836872425574123683574475790997414488641534074873248802450108535183413970057319247033379016606809226547805269752123746375", "21252344995592269775107236774689012760750850598567799560343535731251766780016530978663079386453430272698006977668063208502408607227544322945446079708000304179073184745623740466334127867464883762843346619853325415963062181018736410570113171387891518398846617197097407612852037905687899800932343156979591740310928257766081697645/4718515378484509142377558412184183991357747235892194234377932213613746008373918923611236346330189287336493794499188640380975364991548794341177060325509698404571318037298112293926833877103554546466055612498927474225619680186119313129604319096374924037870803554153458104225741255753314955115645304948564151765516183663634546688", "76703085666560609319365659209445044957052359500745196718269665234646121134787807938680787341023203786904308047981099228357850016602203539979246579454229078497537148799349353250167621935384193502383187510928609818011142642954550330069991570983902841318203794113898871515702445720207144863877026526025447819537396146822201819435536435835285098485990260677737192230985069824/16989892821104122916312992616665764943723222199277412857053896319814438961475117951904867066845412639236790762432996309717924037467863024360211163971190006272168845197000304328480920483651558672879967350982199768255256753110375467976246339260326422891913564151453729285191351273342206198366624882195135056176502724912849575385576554208844814085228696838834665339811027625", "40153831166521391225489894857551838468150576827129133168972859441122728710165233865309084872159583787083130713473702296122465319276461991457173085312407612757280915853584698420083436946976844240063731333638150599017886937783470942007376523947840104246927580254612991191040951001539641947153847776050138532219595746056076776809812/8873576113581065493273519627544307418139908640325227196912114520903505426722086265723900326735989771660987609604507503750212298754414472822477243293638486047313990878348820573874809636084574108909615044524663712495422565151340037564156235745628465172219286664653343193162657374410926171153516871765680561505768223660055617934625", "200736374277835272485186523480177159453030082779872429648449412313247640312479214261681899286513818912991945046297334418102711629933437654377760028476767482162031641781499114859553677502002901248124750539270235098492377826240319766677856465093871367817683734079621359186477306173620331748496369122143019303740252461824523590096923561928354020960176605008889579578495073283712/44259440065125442964014453739391594153290923937737136823355312892557975399035370631521014554980129291582486968083228888083079118116286312583989433037097397252506140224404130371160608365777625538148303917306340620019882928744151294738308047800711028158277500317134537540772759486365658024194428796846364486187105343266398338060080611643110071184992193593643605709075927734375", "488459049325494693259159444507437983381645757291858092983371672334043029615965882574409808932509285079401239403272414271652617474184321852388397021836909585659327974611273820676128650810907598106588433939541654215766888212287311943387232664417347883717203611092450971786083806323404432266197250919880225892099146722474124874256523/107455855466267410923480140898552598306699341366032095904938430084768624148829473848763761936703072253841751966906142283640379336131083461646777390874405323298406517250231389493084918065243079819898691146841695350589992171102939046740169198394671965069747042621265775948217054519855346617967866614303497258042439052681849864192000", "8430374068596413768975326329313648683222744787097373111477788794692418932056901235174019333392845529821722488982447683794746518712070635063397464904489452840169472596494433874412726723065560358405027764015273789053064830528919091414531400589850704395887250756457780868677553068164933299802944396576360356896758745030955907258232257358056931680617626606715393885378887657377280/1850480358582748412767893656294669486390769246349349706200869446679212812264400876685764762211659843658541567071977813110496329850010288179702589501255367345935389050373021591572539260951149696801665953123597521983257852207280970577287472932167362521740230973547070264273850381896786822127290397075758780174083415923482640313277341120938690594859118603017930500014640169211239", "58273615882491925540881784328370957720539797010816130007322211512070634295154626813477498607761260613353633996451797686143131893884559909668805628269959901044961666535533876340116728982072626875010391195372759135469446048394835148654407846242721443845351855234347422256700864370273092971804207514736924787577569355949601385705517152/12763172138328432984573837529764902730448666594097466544652830703737195804747682450548488162227364538052585484418491914323658215406327363805353540266048943197822838925184942600367647278764952826664684839953902567694832690683467635727409976388280092262839126779730168889686628630302519063225007497707028600865624133968363921915016625", "2685278694947152969468407055109959900160804835228466214479525891103128459065131221736713585038130737099067040196326815283171857977706979990467444622550497565521863441617001097354649972660183038850033950647594754644997436624623325003537308428828750008305464174443210079059253920383411910911594636045517662796811001285984447671371943267419151220518726940455756833040934506414133888/586864816044968996825907488721678304211296267371936463272955488077666796280028127333229453342355554450708284934221461946991556216095213627059047984199091625921432110913096253352065238765240063555347292393427726758010888546427415276046238297382474708612526770055488323003698641493939145624184943388159614111350839555141202024991876221874110644879676602924730506882384603409121625", "27700345710264347957758638741952394530538598225904772664391173119594616680996031886665218221392453628824570256438960349220263575741495285780845399187013582169907518462437966962923592601721119258663490655013419675469864809004562272799012227293974254329929404036071055528766397079743200179924243479370594973626764330855493789112414191/6040997839051213541001279276287478343874107660287651711609067205111574718442229224212245187655300348484144001298428958025052162253854676210451657425437588244676589965820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "80160269787574270953020489212619791839643207793889009503234879683494928396231769167082355143564723274576166638869430572977442020236299319718643894871736539109822173538266278165276591962215927816541165548699380129014840956895931285215480350321259054359835472320394089646764361802445068798451796525897304221529850133401768027469126408090577121172238802281079916258951770135485696/17444957084936455555074876721808241311651668802091828589911310253709517226715880722948267977560381436307152342821304525073651379763144281678911047276389231713860392794975453518107055568765009486973017341479560154792340888780337029481646046233967923289468141293699236815196553819373828280398488966665994092877680860643266914861837639322607761804740256920429518434353839878280875", "2352816897072623416220002134476921108405735955266703519252095150412419264317091785317803024028565851487861978477208755211589867803009700996828082850796103789009194767813611798769297617674631277847910238088040257037678126316866517601388289837575778165301828137259948173292658462765645645868094197736382683775415645307647043205988394700/510973411316690313485681833991645423802776865720580280058344111363363091616558230182669376841383375321912553771027107891991318313938505988903735114191313214327683449514676737796942389784957658395806951715454372568523597420866050825822028817422805046287798054682484158011143949412956697442991898914560191411624040490122951328364833797", "6403295584873165688372907494046202150046769667837790834896334486679541887567517050446119511695248926941383207478170182650927368177009669717288184903306689332746127845953193587519575304974203099873732502605739219028995266139383163062837007982999189114810534856227848568800302527760100163350814120545587074865568436789021082619398126713943637898657861949091545516403987546145915409024/1387794272010111535893205703999712437783041553900341112488641528986385462810448493444968969845352401058333929711237978223214186693177251566069419805757440174840170213159651962686467523533938145629444468366235554597245713128812532716616087753947246800626006504878203666972651384731498770435755225220796872155249202960801768048854869001310722927230237083418017482134588865244642658875", "82993247683514419570466529457059660634483860665557779709153549045427987672829778520201315148149878525274005978368939092115193636113741972236218502664881450367443614971109677363668874484696543982239492409231870942414193419634675024621942196087473557914167832058111113476295926250739099284241826553737074679953551191767148712684157318697/17950946423927357725787689855263532224005643859095168852729513034456208872420513601894508438640531171097082516559962755244698695622824386001219435651555513795509616906355363573638916895074349491513539093024980575852693293474288638209680085037286354050958859425647536735341886663074581909148323105020337857959651624760873736590065664000", "584891611376763781852144397260140844977346305541197362434227194779766612939978629636198589818106137319267243431810481928639442343946346034433828599323416877248326356345631611148749005937144684862502198147087702668524450709118588741606955966569427636630159793409544653944608958808602551061186799401212712216156799273254257486955348236914237644151956226336750212957092204830385441792/126256710861549838395499078249922986417488985866522660521294610280820007499099176190820291214370699289977888813109514854178180265382471972583921477022411657285850911270389720508719377071949050253246021921916685716353393018411683757067093259101151481189635423399611625009617884983318141463140199839724797412514785751549277231259345923662499623640886881048572831787168979644775390625", "4743054867460856425399742072925732465660626340183690464743217147109403130730445842673866624947360862438925194786600531200056131309608642363389833474026007798643235346104937733349791667694862514383520689594596660275306247615314272223660862212527346572811422915223417783887717426641317921972456913534338708745549252254865615725859881457906376/1021840037832289788284691535543138164288462770384961802287250236519983887262771944174557087207566030730743075334169628971336358708580124427857321953981475719503574867471090607795242192417162791762511940848493176847925838738242153177311649130718886794249673254183907621449520415060660496225939963471753122766421338241291756892571824984344625", "3784664074155769467702999785016514468281913375341134899878893061325465790589101335015569840325786070795267055386681356241209412947116340524588831510768864231937929260236754881829005065056310226407358204278658699999612596866156294195316867934035877283950841910726224355461522065773816109849107487214275801829843762482082803559183694631856772777313673086715631547326400170962722842240/813783281473223559981291694175087508812520505931454895884442580280342455516154674683217348039336712901850738745276445107477919518905155156380620466135946654952837573797479076027688866326359448543065305071605591497778941561986579230698384305536224430794233462949056326864499827444363206162251104552740175503996670997705423888382328014210171324376593090187604268086334796245552762333", "1946671258536842642381655747294621776070051525209940130115769153666368932042152311477746728678182920842238801763565726086459485050237860693394471644023999467670017470376746609892484192072297938254898880354014176373253875722410186683852253828299669530022166361304397631667133689128358365296701757782382475692465977794960109690362462330857/417774039698408581013003883929127512062321623871486379101498968145670269174833505080260389860863417408848209525427705249526516766731427603641806256289098209429110794311660844125377702016056984573671024035213045475132134896835814746425864304907974005950155657789157496389234919107772201305672421982198984613601511388413381215220924416000", "328578487723377153600821813410631465225159589727320893988991729306688663770697528156625398176929288628930496338036815910669579019719633124832162035588583242320537435554101841406566009219059042888412893352417446437227440076869427577701706713564212185163005644118869496869980925214424591264870388237079776503547314587137721633918824664946974571838634860386893404364499977966899068777016064/70382695927096628347637455030970644630942872888311870124896575877585692281624151103204551947776906510366521972834357031777287506848887607457751667816514216907338309372900327919413372044625602555866294337672022362865161523684052940126509854895320132828009551012639156341878073682501185688461720664801829933689280752623773789373199210473995823367199793407048741191786377993390965297664875", "2617201476921368517857942326432090876874414269689140439151907982631768946799200744678055980827789859579196832718849393046147656447672531861353456343821196812881882023188898815179947651274131166835133965629115749368441605680383605331300030886676081418867305170012032824011912531673468215561506423833911621270680104083533917562622600478548/559567121085534865189976875600841717161617153776904752351231210970240323460800785728739412474960421770806162360125774000625035522428160837855944215417821324758873127567654244465281354654299068546570789547691342609793050301258532586131013585959164719533123826201937801986942606844854123769532447570107525081084531848318874835968017578125", "636225736038986537559880265988431731529837451289737542395494683393492040808565905376235074534207026537145408562785279823547657299565440309510931336394031904920056464959974743525662459433889398003683078967642651812081450227654478095420306880762753401111260630654049389197602389949892636943971690212484981672010398108426002137114819838399222096538921225458913266993881960732663394566024064/135776510176793971074115131648637508758953050390591773574951317807919051619690313331192027871176160424663811116849856489187562728496099757910540362703888937768555824513740118941387831822900198029266206334350448626733139136083404404120210893986654422850183837974770675600952078956326317698998103770833069712616832650406225828969036781514645731022616236082175582937900731419575337473384125", "266695771933124633677367149389643417608461366874310588884377151539325854547826373711099517873721616543570605935954334944030816383858485296542260152894035979141266909050267414072982042090341712035518685997484257326212454742816979806460287972757626105526907510197321350895873473656215941034605746494172316089636216915825022339855304925515685/56811706665210352283362623728191218698295056176625217939528332247537278605113496147630185544004654583441448319260578659922931798845493756189402805173037491645434052737405379674607517658118427614090338938517963215812444779184193933749520313676564187507594274551791388039139409235056119788261689087831209441779870873305232021728002651979776", "3511806683161697708497547617957719390189982761002154386881580160856792742952365159764830433511949678304281539875366378131195670004345568047690216126001067194904446295336734931691743477531830892015690816210752795806120303198745685394015161323982229908105397857791180342330098240702332072396030780386362735967021055250450666535422528637737695053315137238368787607412459874094164027214953984/746741569878639983491390741637813989978804202898438708743258000150996080386381281307609038830698579358879333079215327202911977568726258527646560497079622703052765164031089590965199628534477381843079892123440214378949632707668935001371616475282883095939750704292616758568964786737752325652839226013335092148777788733453702438432279149298482004122593243860829060557386699231448957232420125", "499543951252504651717279461487337168721376180441322735807713499521878076780205427598086756686061009718016175215146305489885835839673419698751530207404115002383180054704927695269921072232395828258826213554806570423602966743337801741633869267620843626804016742412046844770601322513184123515405692795346790813502805238635003099976693786012816/106032986203682550514602969462803214831559442358811656484036951559991322084935692953211120289352600484987931812632505499612220494311324679562152078883141464406938524087376964935494245010636163705698220308243980789514815579319533341929989455211613890905485981353837321342730307819060825125980500975023479813757024395422041501208805339176375", "8540849722242122835873311629952985285477986765819584558233324868363310302206006773828897816547299245727087876984857726652932481899766510637403577175623031467933486823994040576431755172220921921877192006685053572215922347418846423419683723609799729359551828522978186208983138345476801247634773975311405913274552616037005854836040162212761099347518242200807692224460514057530656658616850816/1809694575992816440924165741094996511361288430727981159314194000585536832192004274726651828760263522962868944612215633976203596150606503849595633388319338251977160257979846235995654357082321611719654136058257458753105122024859078420173515189641515736029725847315662215778251370398007468665986604529263071981040014321717598469319370651877296085250322599247141397427185438573360443115234375", "51377057693118720457387330519321684810411289582445982078756989158447711080414032055843805733348558621949380554029375294451303430269197115810494758213980833379214402452992657502777067850631862453239349835215260705131864911194740832694498014048717871429797341104227759557199716944554347879767916801106279081864127192611546757627038037780244683/10867246748205139797826516105458406878398263495890048637741584969144406206902037615496936724683237700974333817527350121106320991054058406504571347680049945745432432384570515723033245430148177097144850158758462968940525568041926860856763884474605057056550146491001458649244094211354153171337463406192651150028767064600270112838159624568832000", "2517199821548153657910904242290029026229621935918771922146425373057248090467388430999870036608278542449661971830076845113363443421757278612394167195431759807908413353743377586893872930828548256216510734912027450642648789925142482023713336937258932978503310551945630359646777080073329099268529064437120002567758664419443374110941824106727218341795100740316967386497091058915066147604481280/531524260324016969370728057738851340792702640911631807178654723224511108065633433027773388768889035083734041289308124943130099580765995149865288328550751289346866467755881013217287175392101334538392596956248952430438673292186779006015549928829953979591250274457658042926539541422697852390294886719770034058916886894408015624288115732154492554105512936468520265305162358665491880968652687", "937159485027553069020805864547349554547661693803137696125140510201297417077233061462068930061915381468160677500445535971818609631674361074587732183297775728389124966713749450996643183965795829780345678634356741756033039293590264355732129789110416943789326482663579413229893878422643110852069225671783017610387570935863228248464396615988222968188/197552642195166614912991396771845374656891854357948006221100585931656016640982345159207601253599235265353060942313995345483862152489766993442419668492877390774016299878943454249209917002169480134131612530977452579520564400124908392339263545911443803619972765231094502745980083350567509014991735227390978850048088378721210219321877150756855372125", "5119346675109082499980756672052066247676641510661024682574296075659671743397880591881419516307292610449161239233139088348510165442597278965718490070997173182184417648987611422446347235659085092530927312760229499083348217392125906851921500360553758600756698605047197529446594606336369425040236883171542367713951500007600355406492128741649090501989105696576697387613035366083536629358444229248/1077349190930018641197987339365056771667455373500846354778079878558146320193384166982231171317419356136237346389570422332278447217033773023556383420372685049620361481309067017697564760747047839930422553324681218253359586320952896352245366885171583221864112040038531116947187482413031483309534553461613717398523132176948321964066833901215878133594739833910960843185464241840039390204295097875", "58469980853327028628854378052548435225264353747414624620847476036979290604604988637469977624105451959796142112200285366199247075503424204044884512269071061176877225315884188402954249683107639777479663275428465242905314418930053869461904934138752031124685541853599407727446896558064252696813370692668496452783003306386669962110734257851955001481/12284458784412533668960387046583440199646081362484321078872891438551639470826582933879934711861551014258493898870867541349962531447724393381011633785884743889445407749238183080941846528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "632694338036291086868292541736272151517212971647680989553388199374739841494700315711180961760384484042159533979873604395621016272772109619401112452105475906812313548587880899058905419220497456502543971131226430775692744506047039958551641270070996110661036371362526401525207493270590999387476275629412687473362310414634469788979236895300129227082421021999210841384596617452097273320509348159488/132710874087075221626157136110978536488168313127228703025408943153782802265472978945703742152954881438058373686972477195846162708986982742647038014147903817539418442869011995988024638278746664230046452545499722614320284478925059527086663455478374200352375121910000967044366831275681254530914306064535110528723482282501358749001657608122307686482720926189537227492041135055090784059994118192625", "2022422468242151190347511883185841333968390991430363660248687284021524206079162212007263606819387821055183192871951076644707111802972354128011904720586729919826758651167984507804867954970064938022106484656560866447290934136610214175516487579122328055482392137619829739560923807880779865442016530712986750711199998190148885726144596663143651240/423528009127070458603837580844559347493775236970253513203186912091140251858605354218715508091394564000304400858761758838182654201653901408046974668599216804223721114331085507752600832390227068985693006017591304916519540245902645712532993889000048992026931475754508248265356181099817467608863068068953756055334213584649136541490530849577363647", "150542201776735231618709653388506394887777837646651406023174643241783006776019388336318216053045300417086929061565868663031237502137150880313922488106751241006715449458736723129545400133450376339156062387859536289694727635468338235084533552501618659272047966040838509286942825414463511175531001410923014751124732748099355476332649458471135027773371541572374016038525336728276024676601778299264/31475618522527975728853391146702172347290819252268551219771201846701658848754300838383637247014705706066050673096278897933831272607774110183488615338021656923433335661890414740664480671162459271850877855521869741833030384682549648626038314686632195158507693321505500888988183270276134667071014075017317692121986144742473139078857816578133693776368882596780120407949076129685719314703426278875", "162664351499283182546788129866259011542529017155637405328005084357078048074065548349602626724265307733005745244338982661090506394708170105916177679714664432754153795772811389612700051002336719842784098507498286260450939289109123759859710248621544296008356071415713931721102824434964336667980062728653562369697289761913925215639430496443820411811651/33956433298509232632327667206936379248172049619640091186698677954874297837764235300806836350019565970550533206216590639008637925266405524715041372407701947953283803854153876844320283735281209725651036513491246238622967031979233265136280687995181375582844780830517825595245506321879177965868747546127685256867456319112247572348416655367667187712000", "27228583713734183629451808889147559240254570554044667607519238865891084165382075658707675405673276615039702916443152954157535195508033284355580742761569101934821088036084480297442018005972653124248838420021440899368869744141698556359295489470499243402799483082406238128875386939389123336303631993557844565927960009744780823166462314116039469622216263221278402673028225214534859076857413557466368/5675134787340359276387085910732530678163604187009567576895331134521132071092293139167824957253050637085885426100206370974479279292804959049999647539684766632278449357893560561608633329561385765035738071726214510832066885156767060324427330401967034889966727638276371320401053302413136551142103678412692111973028587922399670456670380189570979581674699102934733563330382821732200682163238525390625", "1340937726818688387636018677960518622106989311577445614347061615417831160296369500704524022869612973331444242000788110133157689786976834913297544087249593601420972111789552905846168933014570399562460789075871112224533723259660967481288525220689577290386781169316008987012566216235876842757183233207943071523447855623001920854571597886491163165150556/279054368814522483241446594911968519760869180429079780837994812436395792594449929617293503975169489945136244602350941695478861584261665582123038340824700224583170270427163469762789603657025958695551448477050958557681299495041994050951692916032501884523150972841782658389836059236040091605838583126400660344344601879969354053137568588338096589095875", "8910951660339249479517731530773509037034977353457185453617569046885132434552771722727442649095007828468878374139001808825741829728375370140505088133244952288239619141544661695065318568074863317054989982620944602245967155400712702259180443238473885690297281525960618905625084639870407113029712510345262279507055197024677292523214467306898573956604928730377318210588837126450942086527893437954864000/1851573255256476362977604759655284263358595254392797078730401113550522214182030016660458780180636930591149034499142464357511158868625309442843792189394292787657774627425816694628839987456477799348874853555586931850788645677998004186437300173080088839930384424797706381282430208961565555953254145002318893188197561315855286173276564036402546798318351229978103276843822345004757661005876638005274037", "84997663352987536417038496128111159210386455419431137931308301989414462311135708114322046234708053448098538629166672456703651524480738219822858469100454933583774404032968304328859365484249897913676382909050450855222567147661842184538302991526635974158862033287154321908483007506326807469239745851379559259262425675035790574846229470041596801343087041/17634687575122715507915388096857069366146981156897230620371714518707518105157483283253374797127075689236298114335734874553183291806268149747826050838089931351158483980735336772879045027213982661634865556129548356487722537193914986994283729746578044621115589195066212043187229606921062007047940293972381121200723292297716621231320254309060321476608000", "1648849257486312935416274009474520589799750757877252390543329851029437452988499485179026845292068377957697884739052491455807688429630524210823560524122596610276957537756142278585091315141096146341773982302888007751632401090642472506538817998043326415693840862261701364114923327286462650797963969289743571514890723145251583881752876340628073395708716735192690808352188867334842743895738955762067968/341580411902962140529547622267381834425264893226447658723654120920549166416114849731588552578626041597847002946105459812230979900480135423787717825697955152193526724029890829615845314765605770060975538542976523177976182401820926854406945392167140347444433885786340415437006775075196031433365827874254477351374236932624514469241634422312990555534789607377023339236417434574755566856489013828206625", "4899626659231633406569362199187192352933567344960498139854460545644210119722856870634652562532083546344965166340063297647520613455037240144734014575196764021102614748218834054157165781057405100578668000290493431869797883155764963238760612333048336953434663867580862692267574574465371615023999531030446250351305046572267686566999209229202587258144318592/1013522377571209303732207048597964555261512342860326827024786500686692475697570284120359840724596444209277948648863014479460188496587721578075151793081823795161404110811480269106846359964436993190293615381593756076515012514100289406862487971220020752628653845345780766244842386136740768474703009091552043945843632199999007070800871588289737701416015625", "362903847358088423032098939589019598036593525722040887883164115981767777873860799955715587436566233010543937498922435963385091400670303956612881974450548904906949032005878241638546734597308786514086678561900713741746905742866635779432216761799371793260025549698865319760786921444505323758235164807966277024031605673481480590193724980659448692487108892154809490199414370023696404259691299614147712/74959603173756091922435708504751461448318819548943586676159545028063979695880930926805574951275602951047845904770828900645717477098988124553474616764040938121171776556999069351772286262529729056288451037717198273521810585868307402693261479298923209587143468206907278220909447483738730657438961435587752873879244136801168836767273934997417156543866722171766794171623224855358640156858606843576125", "8521348154958613550574095745596657249924328336262127244827955886474742319277424381360677655239017583606851483318951440691757875270001283229585075137091617073509041644097526047127618954293881264113694362598157456878784814696577083997902588926421675843291157049153701100218784481406086810264243143337016042301806376864424632290226377881206765051896745/1757584673254145109614914862134217345456065873908262753169404848658913774363650863904627183104777337461445063704655164325930891269843669860409763569362863600932267319335889540453302785099532688264425988677082044905948179153286276609910158854349711054144968131934713419772852663860893241364433872853338630216232313607969790083448433666334742108176384", "1802461420562646993856730082999823508145602238125054717836501201545920604020389361370931345491160549787411668288359013059160331370751496329806488246135100776263777863399096485894306306621852596694700845918608199329091852956315870664531614358379176680326508877329862713333336188556181470928613423972314983964578645688876556351433429494008513812136152576866650152623510296911708111085518974142728903424/371238439252064016214448115231139360835481920731625321084601566992497057371416121407293286027832357816257507287295719261141426130159269433199862002841433235955835172774430690352481806933860390015899973299268361513643524088242973968537595085600335021120523852420135081643310663869327371821064862449426404044951571585406092523478861879148545678639697679215289523234342337347529225543852787599016265125", "88795280670112240977945082069219541902481768504536167808816453021962616596410396813316064685579412429940019071114917828928080181638058444302439626425155946562362550070187433083541414569447612195370911498321149367969974762244140788494955146280201020345849385865084095189982291190135293114489407801749533448443222584092575861096946605418438181411489276/18262596223069549313969288693970246663726147886364354584825624311486557881239003216971630599389642752648815377795018130449384513824927138566203714891090017787258920529990523519479383032564209629983810866231367438270859421572641494420831435563580050954867101292568399107965982704216434467243223964964535464624988344342084084237484262612100980519602625", "752911409358158070688133336918078236438086521781731735123294741731669530734909563155732092406099003582749182967246236657021875488130304108082404134004381196925042617909108654109138702993903561036987511410396567636331465803949049946947888490287210013788802287247422993384874670368649616782837096233384279817294778916419067404863458318451722971117669642134894906235066332205740872938406767767019265664/154635332883086377656813458754577288834216641577439356891585125701020579768315520324293435008561626926046988056302745604248220408154454267643222328696606367409715369481567213640103076112146615938180089303294709009813772509602954514391675152597458428326644988225555987883250642389550531163153338541870029415077982539614784206119074702022117790679351778993541426110436276530890609137713909149169921875", "15286089077439918584953144558775765002061832952090847117286473868694909713791678395221438112006475047633028543501632631679316850512797978594476229228325228403849089079675681042224057234415951253954044235099139983386056610384489202589484570852048157272551098909455253037561994944665563291526597323199530997923272894119350512727802414680772513760081360291/3135161418037836259442831302977219750614726139657718770206960776514822107155928800694375522572523712277389679035632531727155957120566617736817225541673148354829212969778664144907503411589126111888917929495106029890532891919001138770210977012708107496187227751496980000137223047079127096028939624830654227758737339725345681745847598157538483308068864000", "17723482381737693269787076798246423310802126092500438681864673375704464394105734049099094818738115345706100191580982712146882034618103161268453808819471603805345990162762722549964406042295355916458624836894291267553138041035528315839108252422478610879301656207772491548742981990469454529537049123948604931661837539943536878260665617524824604291547373872716194154198824107266275716083848262625068958720/3630091565725887087605600771358216927099748013831912080380983545872077197366172619225751217619097657405660172801849926220948413919823038425519006413005998509677472226729295278652284861834178791332630676772284971762683579047508016687969040658592436230062049051143001484384767836353233324570686249824980508520186643477313941054900197268584495128610811273834192099099592687485176400539748616360799518357", "39160514032490258389003214587901781721548011632821053230881239001436341012396166857515197251499460842954863342641015306304854226194551189224721257664420778416733889030680295206179109679627522113592373938602737416822981698362363553492610842201005420727750505681358595340127099855823746410663750133019743170700888375554918213182862789028531284364877435896/8009919337434786244380818390213546866794958389603666737562053423775386173149395943310276429895991903753441584557917565343673605019989336264748588735390182130334278887642569515202100870042209261561001627386525182096090194076839370589780431326097965428311786635366819094633651297179987340498215947144870164066409654464551017761658775207392803825996394875", "18188388167811476762477659006849121912679763597132233588170406666718758511478154418948855160838212151370453213943784067796172102916618102024199200086478021533171984254799008541948973652219533819511807681148179806051835318645591102296256347927018942348574774821478499092054497390790734798143983945096982240517058861467440217558586822663985584775920517755909444876443211404222400335500608733284461685888/3715278241795087610941547133490827711133909145414878217965273061493740719983191775105550559905283733134189195190321643965858771461560130864714477448011225816210219450040558581571206711791272284197614810026220745160693898421068168630870850392739817340370146186703867097982858560347971281142766235850971837330222970900661653800041795020382847588362774677568059355238174402415384788280852059532958121625", "46353430636874284402376008361176880938798775506236714098123916668545331718677407145199311191108199195405139575147933283523305343027297808443653460575141799729554209181454676876263582758919969948546918471128299522715691694855904535448703118221685887195383025133924852224568922999317583667985459047407473419196367812949579858081181660610155317911318937349/9455890179897829052705408931064120820559254220394152447502395298827357144081378513080398823188243663943177539817982481713456798757563952162598464929784370305696420245648035222083207596797327498500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "13607414211126412689435920170832779523235279308039712294681570127241403406455725064605210473923965685858012114332021572088551127762628892611459785625407107300355287623761046438724706918300976102581928643740596336865698485838431972050267114940079353996100620311097561405192365496385584164725035842307146351211183443267583872067352881387294766804298681841402861626441205037637282007810811602289501477350144/2772205947240095684743358245950494400934136973845543049938212403703005150954425087866758842625041409060217562878157900197951382737615822655863548356735553650755342108183641353142157728364469706919993519071329069805875834057743793434164720370026073143626055293058601124362130539040404491770346043977106988100969901297669523170508321703496903672333781306743488573086901583022550356345156457496396749797875", "23264350093315690507131500726914401771633259602904894387312742275462601574788485574913195967854009886824436237740789910851843045306673524324611130536719802717912615609109285261163220007241492964833933975789257681755002054890453747803418465119567389315754801791950553304034666399677630030683759466627797123971742061866928213780452325847848901682792886840980/4733430508316851445525799359992627142007028326865116523033957869609125212251136452396410236930025876982265915963089597825393317909648054808274488356887197933393799241941120691826916741647173843634076299630884655997401370400734954098249519111198509015387869462198674657171808841005212058822254513429836457539629035675822719720295352508916898476137111981397", "538960934807826161927564251064896730663918579817797131801326848839524373936888402762331254883505157846659830555799909822861853145306547699817986010353774500545305596630924815657016569444824389893996399550343022444937690798126189162954188680257730893424775303801562327757655350002001080811866451425665301674688928515041429654624970707803336800125648742168380676815769457467038849213225206824671025803392/109517448833211208909213522579666376007937648875042608355810687327424621469323788799169718267715808580775296460944943658428295481347915131091297305260674731651980547668762317138753250458639043477453950774629862540017034566407286963562574188172753764978963685535201028286359818524519980885827473904574840285411260037264057197155527809916623487144493019982419606308144576939532055057697567269576800542875", "24451481554350251656598350124163983489544445991992661049829014268366250968046589127810466483349378560701491445658725080497078590986743512397927747885285095846398852574219367580068049729894667374214861939897557930527646930793431512683750733092448862551580494245486308114129295467976874843852138144539250235632985676953662288536669286915983261820949386845806781/4962240683851186225340479316959605207278948397833849899236383273145853045488131674290332609876751222112917095096150531825255611911377071887145019702433883343849119017643117746273523770961304609989779231048095665388209125939879595509516490230961558353074751312876252070889983946768175488341370453053495319823381943793679003096504200440997908071027962806272000", "166591964685609920525429719961758335887941461052357297159523350448241484106515158310298216150030768812873781356326923214637847449893575074813991141092681107583183275003570804134461187213143832123628701876041315736048451374824101256980832991214945762266748755723551899001458245164317581617731332466039757786839492869211248064662857987111284518155462148044812626055842061283907063784492325693994911811072/33765943466859756347231737285768516240749714264564410814839966011490233598006227246396923594069488496368994857718734549787000213944990695920130591750377483911116845697231074543526982580529937081378303555262933800375576494067959129682770065443667091668104132884375840812635624862495548888467575848428463895756394050252457592540570490061561616914443009224917652440212112452400106121785938739776611328125", "142464729519206642943985715465196065680101634264787375740459792619754842396453535646509170066091478069799080172299369994438836484938378991283020978342879057271045033903518255546705211647900945143546293360496661466657600494787228476009216508124736254967761901224547269496682078470378676865981855568197705507111970901389105723589666709580851611656838285777566736/28839643075889294346635430272525349651555039807615358795334663734940126053968249608601725991946342449660829847322517564370606746964714098508298705743689729306507554363954348780144675937510900983622836770223945538844314468550644543502501484521561567788992156632892028591678742014134130878101553633195551605796158103033794695984958987367799607407626319024034625", "380457154857422076784416625436182734840012277442496600178664323821064977485271288502806124740204295811759917468598315932331219906040253463960961995849761235911145436552991677050565022181516596464968316292789048809559129516930574340710998611088996508613850407294743457197519091160170604426002924022923388338999324182261954685794522778833029950214443271526469607532589775916381786492089432407550224137344640/76922142291839859196033215395526448408989799722090330866256930898223012427332209054699494033511478050536463051459450844520020426942553107946282832072826069342120835351421637970462054707566481086202287686453371483126873188020538661871147778312986131920021929455276187425940666580158173676284545586944833678819622895550345083175685846944633982680908505900099388037050135210936852210263717185637166725605577", "79999800708369666670693340813609265988600461251844239982904928629083975986385235816587497657678297663151298709076884516168798694292862559083730259839524968813932151813233366175091317046758260934357096757322369138747731224414176608247605314668045838769433811781490030635374856042786947109101585097035794969502111354126773165391577217071956928171336060247633607/16154850265413610119312596299635391433380319311682208755390341659152160578366244774029302281068833963848811596545791104919556346810193385001196395489740571188884873246131813864782581356887110499639544662322008824704830818136660544673293865921754569356583698951612797219776290835161780326945625621758204931298948625885081325268123344406261740843197232316416000", "26517014004241498798848003208133111307300592620947908933072661812816683085261359696887064436611747292468717739609776825664344064024535028242737616786238200200498291226984541942836459188328346609549239724653950302145388877472274074665166631509490297630344351573245265440164082334092997307729007429218385933622623935704482371360985836659823269511115937443161532987660855490906546130131716829909388620539153152/5348257529530073524280989257577050878033239486885664777340947102417077875628238501791711336803418503616042922880218860266611595594400020206192599559925169589023339295256084579966533260861249529670141854632965231468533448709363477120437277477668173149958267956654411822360053335695956270719680086524322530514249891157439878407417971839744392044064720476417844056346174795601710447583861127956455406902139625", "71197348290771978405602732839537012310626009318133570890482364371056186523989330157966045289127980687764218363064941391483781008265266963537623770685390148810455244349859354857421474277963009857011653865476081389968122418691934354122230780300833008753686234433642072919923583176333668289998661499146617277981691372057042930131717336250309680764289256080895092/14342680993892886303954853579883363225921109635079605392320944523109187641283117181461662846411912306480691901515655220490850586434947504504317080144378185989596578890875561336496479576651516902048606328604696610314441229321219627021610788398730173161473456954861916116391687748151443335513249810808309201830214153565966339609616397865465842187404632568359375", "342401018754023891059352629509715357053454506037284788725127073168445189422181540408896452651232759821766616850264122591225331120588918865882061344322996688880669665450231982002597398732201789017495427566260651180470635467002453249479483900268320570004293679361696197905823690145326531180324429318916092471863347575533714871355651558610515931373080997536792242278529575700808878786732127630024064418468916608/68894647682461956089382461406499759613691148650738957016015844830333168307020284281532026442272618372290646283794122772122665531108484704223311663270836645399554940741928358317884620420886609705267248656765357348477857852684140561714900614303731786621656041881975328169543884661780531057279582784036689401206706069028229798913082362331334839997133771880514515972024899408556517159759907883793675672065360125", "190286571838805495686895463752492174798162827967490343625540320679760700551286395956241059969689020885714190883323266375067607282890063444652926151862650426323339187596278760962390404656342309737428214493422028545912504503974763216230927196187743439226243880933947417760147785405444976177822143722569696182520826218120595298059020305548681823408268556482981325/38242608291912408815838081993045123864617058390583394828737640036167893859507494091864963383596867701436244007905770284939991912884465101575490548813894148831966132970730263562113961685364216989999844961688441914455435934703797359360780356482629495214859917249465567846934284121032247250332634283689409883499295469118485912489058982596725212975311140618764288", "15345379701153714436938289567639102307887273898834051456693981514956329731572600026866162286097662958712922836383881840211072389867463987895894067288699955858337488812343674818565432780224654423872618380928462939482247900055572079914753652915184313685270722583926261499687728814560680092231526501970431280783177357735398580700300402036873780385926225005561766822479878280891130232036389707452005183370152749056/3080426623087819678602049171756961824196425548529619576972793653585089380165862889092832375934535464160425580449193072125955685099151500755278763306599307218302635233595329082702148677300945556130106197481236122437978375963261172524503625593066102601042060541617791008722569799735202779005407381267021641545644264334109052258081225159748043792288699674153722046659880085850980843460715080965607434114275256125", "36443601662144279337033484452272105547257065463167427418525882851507989449375452076227652634440476502702584889057376829320548464677623038648843251719168810701744338735202853412651160681259533015293997501525430222870696235141468274274064390273214484922080219643095978640300874086585386991338440415203863901714217818222666715642467237183267303214471854472286478344/7307237990148312451155090506264642657872224684879860008436735430879314349554023096366846856470375025555139219961666754780864835035902856314981482268319886395881809659368275720375576152008289949085453326722156553603358879420820012964006978808113307340321824660484441618487292138631579616351777191144073820686595597986548374588839763719082323114663844043046087375", "1575294930860663922843149113097927168024893739962464327016763741314068438447271326302129681931564068796631337571133444163024224071270063174829664848259482066723104251718808936762938249028582992557822551950212098797718627418782376027133576209718376784834456568694813577764300716139817031545408608110880973380162736536313173329973171844528083756524804574267826691156368696436273087171467254161930265910972517504/315498546654512047637461608750018349421492986465373840347519942494904200733840189483934245529561231604050629653992944140351106887747105945984325466452136415067807666316202346895657914393512001212656936450425268507235863153258769360296536050028695266363553141327896064944506216017933135251875087069031098099192325817395958019524956320840925176589616439477134480262100237057953933117460110224783420562744140625", "7692057599553133417225997786980128299372439542315125030077404519679450372805989755158000864378924877036225189784045171045139667691524763609840822628706422918926410377185494048355128046783294954373197082851501927410350313585640237550107070936498164597231431242858771457898152684298047446530220873884022213114819556822050178579707210264243087257050468000092842761/1538814487241112760739561704846381585063002784795057066438330325566843108114787083741788078680861495340026117682606689156065008672344707615420501964123121620401073675430690541617930520947170306763541251152854304975131871537939618684186766168376514664494488691311397307418298556185724993104760692216619178358268934740746932420562664234738576394742559349407744000", "15190836470550557926140012263310230378455340797095100474720776113765300081463960235506950799869073894127884189857505951314428810423734978025409205413789025720642609035117121385453856877706229778165533034683130064865256448444765902482146676668197546098809055341050873494446231793312407516463576380102073171090898973046611572020564659042146465345334273595086941562425006763960197801018796906114925005810069684480/3035556598829526968124942916297025416522606357010637652635799096498208643970273828496655227572100159414352020909846298817521082538898702393916708804775798552206401718323929157863173504795127180177622667376867235806208021329981136637175570409791442328468473111768140746895005561471574356889047981458002257872092408771959478275534098789982899056118498417649167444480913552548249005268380838457505944462494874581", "2923754549090941424546974281011770689534961442264350984393235983189168024079617848190236639328676436485460311093391982825027512234467853098757486086492333410753919927528867817406389678461354257841007722472106464785557179844602277350411593959136520732862935740433163383885526249897183805981219416420390137516812715245569037561966929572448247077578419534651990827044/583599691615378545100950777601104007812792435102945248411439102112424251478512952087517463400054567832353967731887062349496616445419782499817548928078665212077449420216892583997505908858360011413290038645573504472422610780073975450391707084016931661068694024023083417126286468909117254531307085545768412513447197205482285022417611018126886491416133665625891075125", "441922815213568908489589193556560586318864326425397702047965372289295962228254658331201274291697626694859414786292266008476137667843874780506886929181835469302142365772763129838217316953835831059616268288399119642314758261677639945004547833810080700127847214666763863338091523753898362699222880772298183760217731228628442782431573977490761665091005756534420789258276075174436091798475838370152192077494553263232/88113527373573049332749294663402406454524640221866407165839162576979477138694653404281889227416977618913249275712917582743426231744980461918772793673202077716234026090308791893409200158969108910565467273725064769890443408324386897017825489615600787634985397885230455168591240328585041836771921929567914891379235573982442311269392541694564675053636078990836491104116280492254795616055818375774141667319774630875", "91197133767962483852278456285591810579974783077874307589555559715577599604626819245000672929518645004771085106770784762994476973842713035791487204122653245797126906189270204029735872508462106527240320932458036231707311992868347221176460407003487373754014365881209649632547685657666691589606571865740595829983849941049450471212387808617247938941417000965198123059467/18163679611214677813643455199979098261849405189805364986036911945012016248297645596270602508015864371788974684317239728239847888960155365342460843559658233069613218442910226128113196984801126248862273503232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "733396724434554481470656964167233690851279923085197144879644750437402627936723531635898542414136943003236478432848965516925891956615111678444586384493883113385335463639674699443808084827715994137410743992130712903997815471369201406683862985677774155704267039224546352414417632475628136460919900347977754644214725932476856018335195927604771408949980634142255497812566866795799230501026066145434755838336990365184/145912495644159810313026420025053989609942265686388630266226856650796088768164358961644113076809511566125145395699271530802891523741636707532676065833327082092521989958971154798465784847092870457944857590623097781956884297103961713362268264159015928554707158239398721416218953003215109202771651993622244788505649098445109438104466256408060944298437033058380804126574878377874459371251056800895394904459469832875", "167606423853658713615749101123336326908381619586838606922565378505211386185130407423587264776519589295420758009764678759213587906216543160801059029133457062067529468464636376639307690657945597847080706144898920305379653754920571797771178341550808041652360635584401789901525709166172283390177673009483341826911179861584213314395893323035527116283758445038413646757280/33310364848744488727470761889861069993071965180756187311178124887286133554324042422503263994717993129539448310743598138364172889305532401505890384806078790034557049074169245078416704866867380089103064821732673967120808611636618526737138435792818828990403374766228037003927569643972203993263329403469747342204808360947840103843317533210523853631711601450617095736473", "22466735478643771803624909352181817912387732117378538284107485621001246177152644141853604633676939694208131243081227668237716194316732125445041260568403752325416203858329469477774720998849334961751541191761521224644520742691981372782009394826739249604257098248751626957528543558542443122470657230835176462612530464044652140581367666271771882198747182114685116336512604038833327707163107207664705120728068987996560512/4460342260599110071819142535903990817893424192972341872394014748315090430999224107274777695306032783105944721337053156074851240201179902835353097683269298594190456286888326067932777720561181760369783486872666974623910515795208353605697065447942804414120030678603538761538385793829787734830129764152263691296719726909633580318897787729004972323599773548689272008712427926734258913271101899780538635213826239542884125", "1972862002066252798837977155272535342727415329632252213508267781390870646909686724955861608046325765650407340102472833428905279473185818898693854344138403744757857928883601637909604082588338869612221777263582365745419719805587946558326048087138197694016224613118304623864709183681172362693106460535117459192992832969130895829916210933710820035479169562970982784580861/391262854245936198649509275719624152305206807261382621390946060636032376057385723427601113233050260359684153963520782285097664628279596618521963444574543409076428660874564026651742234728997339844161514273669735686516761239076529088145208958938384732800586298943281728435207452253170935715239392534815683367114290676180839217919539381651841151674859715992309727232000", "25408691426286653276004556426513401767718328640048945917745783225459709487487356095164164652218100925888847689099153320777389381851598236046402124684511968385325107497047025485302333503075085562533472482645023963717347867696861885363417595298751490212495932766872748125111115039311507374363000062513977436921772096443948159289707996749061007112458126301618769295162649600673247799961118662602756889448152517364992/5033870770817104909025512331238419776407331281944565644457345507262881100618908405924951559853352841154730802006750688581603270849880756026262217651685813584900300357685874044482329601894134443542753690048962260914642678445058891387041919581376195543193199307524572671344323361282633828144708683536721118910549933336800461248338059209853766305058943888965279863852107507075916981165164543199352920055389404296875", "616565940481577765011174617619124841631603944267256178093555235591208387588894068005162766513720546626399308168923904625210748051788652328072241494243040185611373035059619136712559505023703153194815611268503291295059648269772663939137446253437248541496631852986499688052678961495116210133458596866684413931188348798244969797973846568160999564540652111599082181871436/122025682149627484528651507368051367620578469392233875493556828623437869650284356703295836998178256875766319508797903923638967073687991229708051285605187358616531926112736402511567721889845693991963610192161413692928378708223712791930113386840109729368772998347036090902364801014045328348830748307179590755723160142468563977011700764517880467116766150322736003147125", "979882056834583241477188686550561625289337025747787132773853690143359657519481397575561812727394470125172272246774578404543257210124412718725081536309818383310896102958167337333430555168671327992395916735022711297435263157670501117734412587691271084981140167017421900852550822579410636184333142944411060788723653596377015359036101170054828623669169047118551010102258802465554033173968468183492058271365801755986560/193732066620504775981759812703028757608600125742477178751189607602983198559778039141192492589734277739017909889924488699372940787977794555519474807920198944109549023547259912324279741006975129518191081373554817584214941629021088206977532599055014150433581544599721903881284581257812850697423350805715586436114842183295730680490110793225514602133304729484547181740290534056445482186430729398701311563285494964645419", "1138059441890428903336718712159907364975959482163004276901676063186939296217569849990951930955270849692775077813359573394435924934540269310629731801376134549169322946310756738187834128956671195358413024062230774111935109203207768898525882417078119314003162592087920755572050993355843681931139257303484526223461840939880759908449181135029327442039666513325916729112853/224777393704985303260433439401503507705148576727364388720387174977154204629336985298082893443205223017966145098064861566754244624732671470935725326043491911142467178027013112527668183783450932992534517827863293825061296257420183669383719043873666284378647952385401303733274771042385666436214517205678674213118374889121542369996042313879258622144464565403138392064000", "614262617634904509410555695398092190166323289787703954329113412647342230855826568873946233136303566178604275296873234926652080462259552775254755109931312516616838091852915397846984381183732773411263828600108443070778861986849272794442105107285234729077818614332155890946804257724112143631642663084660012362691100872465148864413343598067567142977134846266425075195546265101720326272502009234689388355365794889444257557504/121200854655310345878069155190734381476914416893031941761756379148622591310152793328910334357724762079139509813381997287954319983165971628429295803162563856219211627796200599196263868781937234015821367575512548522790158101892507996780675863234181700253545912643548466256938936835469646114659598727592390628209362096738343417775009361678599075671154405137663077798419897932404104579113056038271753988669813988076515476125", "106893445531995430131837569895703697604978445859412739331042151546083234373443601923983714252801103551874986033841637079479794895452077803182698291822629713500021995241940133037200268381793282318691568234728329378829301282121562652452936297422136961147432559766896143081059518238234777055931999714973999553456547746825617168005650221542417216291412324174772893635832/21070287546583154895102927029203125577385528350171457634203261197137238923923245382493868134869009844094435068284335909266152042903157700510534904847257436666980671067329084409346149729385625108233234542133838924281113454526471855573271066865534480974484196644173270141056470857666632902827625475719738076524047736123182255306429677688129231682978570461273193359375", "1112742798776748551928744983308584493817112400536084744850969025063360679785378789764875076529575583792571198510306186417773101346425704969671256564494135750783642910394213727189639661184379341961737135764570942961692159177189753139209638929302928699705042832922774012622017270172331722295881412111812933593370743210214549038212395941675257558442878012136484052827439007483777859391215222647499741572327725689840850048/219121905514652575155579185322367175400669386131891843382447432851122462422992147756333729893028362013318264155489537138133372703295804002840920402482110260590055749843170064921843460498824128274420925357547023876488939786863662801268798987685503391058250902634999352652063668663245829496836853509616873246554292796823779397317819134891873583857621623143253788854530146303641400986028503534408870194989478421253057625", "983995170259637497940121707857673268620603982844439610076334749792119502557380361624096960070148627663305171311646851566811683351232268240169848810658089698606409195744471343416197434926513684882439596141368794175162315633192028977211909698595778839497844847281262559899914504080092844816319298286511436690429175757804604673752838786852277255064434365401871903307643705/193579499709739777577893639665643417521924510242119561765932078835121983190401762561436208758210519231103767232899529457440602166918701550386152070813526760823513884391055054076485295945972185402977095815609448651316824455250005505410192101148149284756928250258632031981439345164037318129987999546683113483700660879431801728391911161900686707231543216283304182063038464", "30691013076836380319652884848585431917439358375118437035944950498156836885409110087616602043242747413728866747975631727566613593257623099549583001362246649928075859944695060947434885707102684568632559339383409378997568182445019183928058902445738702610436187907199482604867148445903921474846103586253320950728989228898324829144701782792767763794895137313050381112872972806712570559942583906619373159053654481250809168128/6031936190594376585238407905469035598668211679521553144958053099463931217856780171872253258738635531385711702176347575597387389685526098889278278029314982721284691198967204664771178761416891317672705719303088746953644978471289001577698554025410820041497108311270431130911021653860874238212040640737171103823631718483572464361276703378587106311153455557896527384426327053165214814954154328483257657424873929502112904625", "33633002641218571027682690377239300567277297301791434890431645909447040830457253186262970747405514897340315490970846553666201190386457221846694126637998462873786334837901001833771510353365825087187582807843940479192544772559118293851131234910638705258664901225494129023244916125545283621607920983287799648992632814461828998517949449887522866259724675318233522060729654796/6603800575190864815125307817934327053530311915572323544225173935830559756077637251538096164499112411672913910767032482188570876526606118068929913515497400397562722669603861813453418621246538114872330536044519242663538662076583511078523573320035084744399535581216815034837553165853576616422592790103728141443697362408727056813977234078214386771115586436985105038873998875", "9090550743395453237608373761422705922989356346696677314277463900103283296889488490217663400349361962695279888433677856471792856853109469433355422802663947305503479561493033851081993247556828544308258821557994512133708656174864544457143793106703578476914924328960109390350040954158797845288786321215010324565010420734044059968931558099077932776525974187717655105951506223649947806568984848883258144616897526257038550656/1783219994432430133950472014582130883873515063182143523712063859964133099770763874744121895885645346884371273930727450069430704145915261127061538288702855011220545530326588799412076879985026006593893648911637986337776174555198865379578424838210466703683642106934154603710587408512357351455891557594977191641529451749437270208258072920514602243985184744955476557012910446023911358037761232253615162335336208343505859375", "396226087129511787616470716244996965529391571019620342657409150252952330537366537352182763477820160355931003174946109480036915624974500187179367618457008802667089004678925595775249725629495848146669773574395699032785024522882892752987825063933573399691764866816284097232869198405981830106568826923407996367321353003569052419999880089180418759265274331299787468134974811/77651132902382550540201641628906752945078964002822585000619340261128555048628863996784740469908853602590877726845475670110127527874088625214912598995012971630852593597027649154487264595100300180591016581254965295280089902497540043916128232871685159131211213497239568483141031137909208031392464815187505714066235868748950184065923236670418822911614780061752905170944000", "1288523130900767412477856952035690867153496584747510253984686336382980221603917538996138294311274357713893956725672062832264871415025750136690143411884111580335458539824573239771267043414225271729141508235839982033182605445173050590151912297720800168687369852280323356691345317649445843078291369394324862039143247087442309135074453265658730028145500871559458519282433012494054724678302957276371418936282902434203225600/252284450515080370603949213084529993395050575951188044032908270470514999880554862449223347761507020354321422785760279154913310488296485989979706208254206974075438570521939826124860483842758137231373182496438568202110337751291106165654945352183167578675508602832478752400011567482434301614269579368882858973850914513870297071866544875650189106576672289734326492492059816669288907018095832842249738081022227281715919357", "559506782175368748187145067236900803925823792088293851453005882621173124590368101213652371965740365119375069053747415415684193092607523211636912074219215053809881814859129515591479780669511533619258835199715146655774919418434080807837587396115955105126806762961292429904380132116986984435528307613054828929294602185927322238461491059740342387266084431988727321711184308176/109446188216864405154936682374609448082436347600301765944233278303643744736544109262794383069197271409398615846380701459882784547857821831816863216080069944818453908760476475874319791512782445408136169878207358663250499628002971644430164185578966399908622640732411885568638054229180673755690889471388585521113862492432946110902070139679164884208988489955874131206343597375", "365842109776085256207829452385781129402656684569922320812625438296958174120084800064669048017227033185969596458778213306152397766619692644694641677223213185977626940193107608138827771259334379895020377700759789774994800008933137569543592829220611543060189849601828342989023692876182148818363689293009174358168826340010491728715549904988196347316703985894355217235339548078187164176255405596310602921647203428200269666176/71497266937783826306774367225149833789788300609530680399994804704196212252148324552193149332755057982662844988588678159610516634667597707204818296457616315484973288944637139939912166034691155272078609876888919170894915224022982785138928008133003473320018151370486895637936102520353951511525996197267572355782608352075229547764732602557133494648237258900273354364050662921889937355682486287799239363976556848320046933875", "59378684894605773397070783936113244261297966863668546282887298999811950599772732377979382620766180662159460666220894896896564357533604962977968843474062092083279165837424210591042655271577974272394203253875965589611493384384257117088518521598379301169916060951350650621757237206805037261878212424267780312614942173870651684587166691539909068452932891649554575072205080763/11593916877920131260484148322810317629326850763057953025674154928920977965095141485536566217873796019006709247938019404840440511433467040918770165456925609124166970862430104329357419669175323763143377917913760028500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "440706629842402075137926797732405268015915199334341565218443748798479563505125605478061664327658137598204192554352688830679475840386882350034150077506804799859586772904929402683276898098601814091430598259347980573084686932949502809068565420937301632494387691284902026088950093888426872222813857928092871267130505744095697172494119689779474840037266295586359244899477781345249657455186847452249040895151288114085352974933708544/85971876318334010542313048056773419567285701852816309711738644074302467763075671531248793080425349570584102078764464196653843973936119037322000695949209283327606280423406302517302874806092835694196353778161663338667091195199032831587897410329509487165187753418615356836636352319310103639079123698118997500068644500893282438137614420288839230827096109835206605385673197123994357393257304049093683934224826006704198171592304125", "13220371178312284248107863849287558696210741535280184003301555188086761767176560823174196915070378763091889333203635784037294769747641959860810039816533609140662043493962707445564057197150603226797446933532133956054671103942520142568674339411250001585991743608723150284270101326419464088290151483823061613403673956918458456165552482913079283537536214967294211244361353060/2576683013797055224377707713704899315377379548630511095136568220145808780162671473907260623503552385384482723173913562423316997528913651044277418227616447815609873991028073011738113927961824632868956802271260292075825561646156680740323686126811928372672670917332613490241615850953660246271541592056143611581223295045062157404996958100136358649109693659623847024011265147", "1538372578072246705266078247950089219881197139399081643650271348770110178217959856819170325400476655944115553238940541695152110949081675985299189913515975242840473616169775880272489805123124548256666658584129873597192213080038937409046114908719298170078476325423466734429870048697383304265342125425087105698152643145531760853127801123272389134514333752173173161562273487752064850461823726948588221913540799816489566883798912/299566102446745552813544808169323270315327122249327394279467999308669285416179486075255023523726449428151807672528368606071047812907935426406886253284580296349349558797128593446316786243666290649442956134448480598303527795996222703837663605600624271807461605295956674925277658331760000117761013381199880905748188151556184620779667670278558839116983636972680749836497346863752662521197700717702790359162307617024566689271625", "281696937222363685333688097915539146272117417024070728031063821781398985795813333650547982965341298894634762289669256129805545549280355643122501181852136332529515756074502902204877664395456278205770206019663082511098956468724829475220996427130295010430751942126263620206886404244432409164651524408198286831329682605959881993845189585640874220032515465014097345759490750307207/54806274927935495596891312029173862473687610099325998583092091915101265393157631244775387832621032230434007486602816972765210205596482942091518459849775458089575743699797096697542306049628939919466378189656065461708686421130956996965004776108499273871055615413566043083634090083096967567965373203683231171594922347812966905149873265654962896456451681332216735396249206784000", "228506238533410805238253122961471637501498406104430046727793420497895852412513560203475440156216063574654372726194215013407325207763369075250819386897086702757125418327084312933061738392406321003231853349865003322697360659712771167066453430309997639548320673279964210730701373707765051246595806673865646607841876463608039111252607452843372970797479959213447237540830563469297144446069689149549515457318899981763489792/44418759813188470246596822974281932219088697005123285598909329328419879212164564561558656547678211265529803086702843380128457744445765859393426675396393053094588240457569380155526179040891009717323059641035189017918495485630657360525410506453554255734005459614858972904374739673834145083512160883402151636664208253116362089211658645312778404886460203600762546810897889629330022309705583438699250109493732452392578125", "2396110297187570506257836426251930521245117960980667897194680897478996322590925380310917400763581787981992131769075961259393685331523600287377841990678117113566991100720996059187144934569703045966210306282348527729533806882408323961336166190162075154579344185244957673138372347997134388801085788353482276257401005734929059700346687783400772331280644647089520646562669857652648/465370154262863030800729180763091967573522779260407615567563274096037297593764955820626213827962697601334935773802201919483657310282236100250543992334865461800976838791035335861420892967699843608855185710753433852279737724446294443337363478679601049432404435672469098850676302728116369979460222148206944323730586138087862719386327396334468302608499235112520318322763857676375", "1188272888075247520453568790651819187486389546755745961952033150576243575862120569399808467067800830890874391487822723879717525264875722720416173276963170672622214121308038530968291758445510982186014289745026439477197148445087614813262170975056866881909056450023324743409114115141145340480846088869807540798073417035168139476153897066325127540609756310068558610112731607522096096821938163134080426356894899245575410494080/230586762395914863625709048789913840511134004337945700368117795195769576856434588144361459740833007125516905017415184787078710001969815416281381427387949263792200577791644278234661952852149216540491852757174842146376788280677956350901082838474705227642420261641783722891948710833898248566893322144435457967452449965772543077421407816225704952270697016152452032506898311260979594550143344971416786595888053149375287120733", "1072184299258468249004114536023934869518152618369895613271618698908405514630154819453979477077738526673716264830106745031385951736108376866253955319711026042389282009348594845497252059906901748860111986811345742998968284077119165082435598381810306691078037018432766116865792677955520465319184311529667642995217214507658693259694586107847099911341219913576038605872218680562047/207882129535607118520818565811162643811811563516006836924341123976848022970024793004700710992938987476728640943834012473687892481059618823520721737479364352887178017866425027953255856440099446112508663603319745066750522936408781591578321031173620445865113295407603090322283539974563690157418931060565698315406021569491751612761888641141446406531645379264720684248398299136000", "158094023904374464057702010126993231151433474361820266584020400101533651587072432728050776506672527718975042616651177034635188178967462982926261516748842073587981953038445977514446838733557926696939591069712397947055261777416704028506441173540338327591514650398349069348381309688677335132100441905603664282735310299686268721634369502296867409514777359935022301425165750780988231639828675424239931533849896744198012747670272/30626384366513923671063955469537776291182594080083494737341604579575446319190916924682809546024369330706012653799783122328775875399363759308193432327358837772825609356553955350401725689682838701996446404559005896479618311357573203081153855961484398360670837599853294627153740224543175497655414585918231215639906924313779933211774291565425360415684556655021031131349317390382320286092667852173815259422737956767922154798375", "12216278924286401897470540169822542417611356797676160128176706721343511598951866107858729405615631246003458062949723290192242594609994613705183460814797527214549142043573863947658832694800184691222426521703728394203722420336773310908687071670107794543022567943478843065246011544888390757810534211554666736239506503613750756246364621509359804902243487113673014588325806249988332/2364584127734680580481708368927921125934330000162935118371174269642831409084634375654239735054363928748162229294829526339927907778510530444646754603322373712788147193691037688552857183116332292048731726305451516954679277320777955342295564000586923227775208580772868590742136150431152495718132142742153643081187691849828217592954519485869135930755646768375299870967864990234375", "578939195017447864385837341975558679292903716580114421030538728778491606282153588930983966100514147976321305616196463174070345884292672842497715966933722088536619333912687108737657068701352918582656105418491672377271304970407730786932913490869797471081081431072836814581099271832696990064828717287258860166842791984158634684078346453202928137987930328826212011774670396356151265781053547412633310327737900786639842674288716416/111966291649651600701875186827360807558960817589719096407887999108024557254221008849510152469119211567152616745769256123968832250104006560061907741567034087109512483357851919402017950812795426393415409198268246337542639470834168040295134130657073201020340432236723824670803498949071870597039309004562024033656488150406105175401372709011082725359382691270659245312133919518760328422827067578306005644825927050994860723405473375", "8041514821545833865350873212853873042112343327573364523948780030849543753072688526717886590013028227714585965095216381829914996539132359247488639692828639170075726301411777307168737667077730792892326979446426349813642680537699905651125068091362135055902152994216233622733424128982011248923051410141033146604688083721413402395290842738021365861670415833356403364696759583009635/1553937833499559104910551811592138833189892464446761247731330672284191313590708439680460540329836344767557599746234213006493842842879398684745864919973051635127080738612248150108793397855113122368507483429209127035263504194847798809612278864438287815470711036548695032421148125849669175729331459149833945183228413961985381338162155596008680906676498435954178226973272371625984", "12059659399309169167301353842123191409306995788633965680414620302285606896146667751472818541537183787935352700725982053536032930866708413010971856856768384974849695774437178790890015242323873769697407411558706626105140596160049735605389301414460825674631122462760014451298494875244754354054447697502521388381253293175367558014453865905104467382184997528879171136492277222127399012368677604910497789360212571238146627048080568400384/2328494054002703067219004484782931471919751585969487160602269605916676223315055450845942763690581877771159615428854802721943114463834992106300185328876910271612375509166975628540839858771078495267566008071532876816826751069408153323840515037497664871689085370699991860738368371510578076683395101062439493831773194498579620513073693022191702398601471237166387045790480861932005012807234071429628725981935147069738988682858417182625", "683009426705008850682549700382901603742691705123356866338951397347368059105140826655486518416578697931244347554322654428162554903861783227680935341690740579867651545205562690172425016836559678937794312287639193745517811234257062356826622207475918293015140472942579713388671782202262396642735640315948612572908444501108579457520714632371056288874351015666995549139003946314085696/131769214246522869780429817236150406548549044658474416909806179734873399109656411633488099249198882165279745627038984487365589625562901914030850178330133080409420340227179447548044572594184601425691821617928130423410997853384425373999967759499571890326740433081063424903098252502791477854302204200941376983295622430177445507316706609802292121282957519571162158620971952084486375", "1418116259749091420309271913909337143756589314597557128553117870573928055109322864794169592355058370891251425125187770724828108988587888087023982451205475980371440423992838481547236638456717520835668859093413956339261802305597694403381021863258753441889536361061407579332570493634254542013337999844407181346815549594836374497512447969751514466481466717590255369810506813543577735080228718660747940956248427356785784199073569408/273368882980516556922532339653303822104510203916024760371844491705599093435133738774975538364241630079468712981056336655766117378160822393876348755370711942273876284944422610974149712212944211513462921649872232656449940987552227525504529710373144228818606127541937831103642415534318303187393593236209298242574677293352798419428712873685798636474667204083938875672934235816396371477146089168375198141802684403955936431884765625", "546411077581845999248238069684194831621691193366466972898628141511422317954477211865167402284211971296286346492698354214043840080181702652132835681239302798339667835439189275457116051279366194551632712819028177402221815140045210690908631767786711675029194359998826252332434573121740830827417293557234891406021102083555472155479148332697839972702631641910213821827820374586459319/105246945889799140338072754365901705544530661781295362563214285953881890233987516230568663143342952799036341701952267011236663118111226623815975847494372076420199418712941018288738590264475520229651370015377608638075866459684692488079223686296541020897904588347083045723167762682959422858996673894180805702299907478685374065593161226849447131100462022089783265346597553176576000", "2398330640958841474772606439916070050977544535580605737383995160447105736276950196885906408317628083110923322157113892928963237845914017845444295040924101784423382681801754191301860383927129006953354739240926643562987838836997453985855576402628166875869041032631651591871962852884189548538272285387092843044669499688035134181859376665409767886188304314888753894905317929877238322615838524354191263502347881033855441181420399360/461588070868590122892265681879734295007029130965626060552783760068897000195207878227714842617470320231527222074701444349530952699708435668339712860464533455345665068841333232359698449088497137068713309811942968433868609329301082001752617420002377892756821532220676085014874112083615054550278903960627185675459015343606391094523511117705747842645927349130302549554534056269331809016770715819934970200483161548527932617036185253", "6041015879424725383006424536130409209607854044642113747266098198777011981328765528361630516108680392500990580908509403483891763219659726090675140672989657743882183951954294745396417829943469201306594018454995862321821016087416840247422350906412007336103086620396467456181771583200365740253389107968122850063607085957109965406634738740996318415514360956028575560979203447735121436/1161752799109428422288020947061281540989708937450568100764830251908850596717606701047413407636907934320789870175907792017513896999208892282137299070761467096211814586909598705615312819596495636017728313513520193786266452836805291464826226833593878504804389728477191170027729963773716267868284479768397603444919008915279522376004326398403851684761808785381609370767169521034383625", "13240077436443988749179508462267267187169441948722358165090554769250505713747934643200804819418670147225695324432684266924694524337920816452346599774452681831320005286326986675907899608537972384924882996757503264622991355949039882526389342174307168805166215838138277557052303430492669193939212362638263582899713198716541723383138016564027766560215944409353427176135895982596327685665844815618402881202645610620284792793420780517248/2544223084468158291883698813309541801455311468982232546872485444308211415529998472787377800559884210837213042932180479090277285630234238711851480232520137856848809986631784843528381778520727465146661792797924458540957133423665746229799675650290296217658444899605236550972043549278128087645211909479009099766619355677984218929672461506691980442071860591767266913041147587815452007726513853820116629482732060593116624596368806566625", "1953999166296955830935495158735359200362904181792947794529339487489730042568305997099959302322956898299616194932283060554261566410988618045107398092345476532371402134206635235570281738377188438407703089325315446371127042537576093536896282955524842632708645655481028161471313608974238110718242273935956977555610147714316158486553633871312187084618154014921190595222799283957140353/375191165084882521037046014569185165885459082629136124177286500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"];
        if (t2[e2]) return De.quick.apply(null, t2[e2].split("/"));
        e2 = new De(e2);
        for (var n3 = new De(0), r2 = e2.subtract(new De(1)), i2 = e2.add(new De(1)), s2 = 0; s2 < 80; s2++) var o2 = new De(2 * s2 + 1), a2 = Te.bigpow(r2.divide(i2), o2), a2 = o2.clone().invert().multiply(a2), n3 = n3.add(a2);
        return n3.multiply(new De(2));
      }, factorial: function(e2) {
        var t2 = e2 % 1 == 0;
        if (t2 && e2 < 0) return NaN;
        if (!t2) return Te.gamma(e2 + 1);
        for (var n3 = 1, r2 = 2; r2 <= e2; r2++) n3 *= r2;
        return n3;
      }, dfactorial: function(e2) {
        if (ue(e2)) {
          var t2 = e2 % 2 == 0, n3 = t2 ? e2 / 2 : (e2 + 1) / 2, r2 = new De(1);
          if (t2) for (var i2 = 1; i2 <= n3; i2++) r2 = r2.multiply(new De(2).multiply(new De(i2)));
          else for (i2 = 1; i2 <= n3; i2++) r2 = r2.multiply(new De(2).multiply(new De(i2)).subtract(new De(1)));
        } else r2 = Math.pow(2, (1 + 2 * e2 - Math.cos(Math.PI * e2)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * e2) - 1) / 4) * Te.gamma(1 + e2 / 2);
        return r2;
      }, GCD: function() {
        for (var e2 = a([].slice.call(arguments).map(function(e3) {
          return Math.abs(e3);
        })).sort(), t2 = Math.abs(e2.shift()), n3 = e2.length; 0 < n3--; ) for (var r2 = Math.abs(e2.shift()); ; ) {
          if (0 === (t2 %= r2)) {
            t2 = r2;
            break;
          }
          if (0 === (r2 %= t2)) break;
        }
        return t2;
      }, QGCD: function() {
        for (var e2 = [].slice.call(arguments), t2 = e2[0], n3 = 1; n3 < e2.length; n3++) {
          var r2 = e2[n3], i2 = t2.isNegative() && r2.isNegative() ? -1 : 1, t2 = r2.gcd(t2);
          i2 < 0 && t2.negate();
        }
        return t2;
      }, LCM: function(e2, t2) {
        return e2 * t2 / Te.GCD(e2, t2);
      }, pow: function(e2, t2) {
        return e2 < 0 && Math.abs(t2) < 1 ? 1 / t2 % 2 == 0 ? NaN : -Math.pow(Math.abs(e2), t2) : Math.pow(e2, t2);
      }, factor: function(e2) {
        e2 = Number(e2);
        var t2 = Math.sign(e2);
        e2 = Math.abs(e2);
        var n3, r2 = Te.ifactor(e2), i2 = new Fe();
        for (n3 in i2.symbols = {}, i2.group = X, r2) {
          var s2 = new Fe(1);
          s2.group = B, s2.value = n3, s2.power = new Fe(r2[n3]), i2.symbols[n3] = s2;
        }
        return i2.updateHash(), 1 === e2 && (i2 = new Fe(e2)), t2 < 0 && i2.negate(), i2;
      }, sfactor: function(e2, t2) {
        t2 = t2 || {};
        var n3 = Math.floor(Math.sqrt(e2));
        o[o.length - 1] < n3 && e2 < 1e6 && u(n3);
        for (var r2 = o.length, i2 = 0; i2 < r2; i2++) for (var s2 = o[i2]; e2 % s2 == 0; ) e2 /= s2, t2[s2] = (t2[s2] || 0) + 1;
        return 1 < e2 && (t2[e2] = 1), t2;
      }, ifactor: function(a2) {
        var t2 = new S(a2);
        if ("0" === (a2 = String(a2))) return { 0: 1 };
        var e2 = (a2 = new S(a2)).sign ? -1 : 1;
        a2 = a2.abs();
        var n3 = {};
        if (a2.lt("65536")) n3 = Te.sfactor(a2, n3);
        else {
          var r2 = function(e3) {
            e3.isPrime() ? n3[e3] = (n3[e3] || 0) + 1 : n3 = Te.sfactor(e3, n3);
          };
          try {
            for (var u2 = 1e3, l2 = 0; !a2.abs().equals(1); ) {
              if (a2.isPrime()) {
                r2(a2);
                break;
              }
              var i2 = function e3(t3) {
                for (var n4 = new S(t3), r3 = 2, i3 = new S(t3), s2 = new S(1); s2.equals(1); ) {
                  for (var o2 = 0; o2 <= r3 && s2.equals(1); o2++) {
                    if (l2++ > u2) throw new Error("stopping");
                    i3 = i3.pow(2).add(1).mod(a2), s2 = S.gcd(i3.minus(n4).abs(), a2);
                  }
                  r3 *= 2, n4 = i3;
                }
                return s2.equals(a2) ? e3(t3 + 1) : s2;
              }(2);
              r2(i2), a2 = a2.divide(i2);
            }
          } catch (e3) {
            n3 = {}, r2(t2);
          }
        }
        return -1 == e2 && (e2 = c(q(n3)), n3["-" + e2] = n3[e2], delete n3[e2]), n3;
      }, boxfactor: function(e2, t2) {
        t2 = t2 || 200;
        for (var n3, r2, i2 = Math.floor(5 / 12 * e2), s2 = 0, o2 = false; n3 = Math.floor(e2 / i2), 0 != (r2 = e2 % i2); ) {
          if (o2) return [e2, 1];
          i2 = Math.max(r2, i2 - r2), o2 = t2 < ++s2;
        }
        return [n3, i2, s2];
      }, fib: function(e2) {
        var t2 = Math.sign(e2);
        e2 = Math.abs(e2);
        for (var t2 = ge(e2) ? t2 : Math.abs(t2), n3 = 0, r2 = 1, i2 = 1, s2 = 2; s2 <= e2; s2++) i2 = n3 + r2, n3 = r2, r2 = i2;
        return i2 * t2;
      }, mod: function(e2, t2) {
        return e2 % t2;
      }, integer_part: function(e2) {
        return Math.sign(e2) * Math.floor(Math.abs(e2));
      }, simpson: function(e2, t2, n3, r2) {
        function i2(e3, t3, n4) {
          var r3 = e3(t3);
          return r3 = isNaN(r3) ? e3(1 === n4 ? t3 + 1e-12 : t3 - 1e-12) : r3;
        }
        r2 = r2 || 1e-4;
        var s2 = Math.abs(Math.floor((n3 - t2) / r2));
        s2 % 2 != 0 && s2++;
        for (var o2 = (n3 - t2) / s2, a2 = i2(e2, t2, 1), u2 = false, l2 = t2 + o2, c2 = 1; c2 < s2; c2++) a2 += (u2 ? 2 : 4) * i2(e2, l2, 1), u2 = !u2, l2 += o2;
        return (a2 + i2(e2, l2, 2)) * (o2 / 3);
      }, num_integrate: function(t2, n3, r2, e2, i2) {
        if (i2 < 0) throw new Error("max depth cannot be negative");
        function s2(e3, t3, n4, r3, i3) {
          var s3 = { maxDepthCount: 0, nanEncountered: false };
          void 0 === r3 && (r3 = 1e-9), void 0 === i3 && (i3 = 45);
          var o3 = e3(t3), a2 = e3(0.5 * (t3 + n4)), u2 = e3(n4), r3 = function e4(t4, n5, r4, i4, s4, o4, a3, u3, l2, c2, p2) {
            if (p2.nanEncountered) return NaN;
            var f2, h2, m2, g2 = r4 - n5, d2 = t4(n5 + 0.25 * g2), v2 = t4(r4 - 0.25 * g2);
            if (isNaN(d2)) p2.nanEncountered = true;
            else if (isNaN(v2)) p2.nanEncountered = true;
            else if (a3 = ((h2 = (m2 = g2 * (i4 + 4 * d2 + s4) / 12) + (f2 = g2 * (s4 + 4 * v2 + o4) / 12)) - a3) / 15, !(p2.maxDepthCount > 1e3 * l2)) return l2 < c2 ? (p2.maxDepthCount++, h2 + a3) : Math.abs(a3) < u3 ? h2 + a3 : (m2 = e4(t4, n5, g2 = n5 + 0.5 * g2, i4, d2, s4, m2, 0.5 * u3, l2, c2 + 1, p2), isNaN(m2) ? (p2.nanEncountered = true, NaN) : (c2 = e4(t4, g2, r4, s4, v2, o4, f2, 0.5 * u3, l2, c2 + 1, p2), isNaN(c2) ? (p2.nanEncountered = true, NaN) : m2 + c2));
          }(e3, t3, n4, o3, a2, u2, (o3 + 4 * a2 + u2) * (n4 - t3) / 6, r3, i3, 1, s3);
          if (0 < s3.maxDepthCount && ee("integrate-adaptive-simpson: Warning: maximum recursion depth (" + i3 + ") reached " + s3.maxDepthCount + " times"), s3.nanEncountered) throw new Error("Function does not converge over interval!");
          return r3;
        }
        var o2;
        try {
          o2 = s2(t2, n3, r2, e2, i2);
        } catch (e3) {
          return Te.simpson(t2, n3, r2);
        }
        return me(o2, 12);
      }, Ci: function(e2) {
        for (var t2 = 0, n3 = 1; n3 < 20; n3++) {
          var r2 = 2 * n3;
          t2 += Math.pow(-1, n3) * Math.pow(e2, r2) / (r2 * Te.factorial(r2));
        }
        return Math.log(e2) + 0.5772156649015329 + t2;
      }, Si: function(e2) {
        for (var t2 = 0, n3 = 0; n3 < 20; n3++) {
          var r2 = 2 * n3;
          t2 += Math.pow(-1, n3) * Math.pow(e2, 1 + r2) / ((1 + r2) * Te.factorial(1 + r2));
        }
        return t2;
      }, Ei: function(e2) {
        if (0 === Number(e2)) return -1 / 0;
        for (var t2 = 0, n3 = 1; n3 < 30; n3++) t2 += Math.pow(e2, n3) / (n3 * Te.factorial(n3));
        return 0.5772156649015329 + Math.abs(Math.log(e2)) + t2;
      }, Shi: function(e2) {
        for (var t2, n3, r2 = 0, i2 = 0; i2 < 30; i2++) n3 = 1 + (t2 = 2 * i2), r2 += Math.pow(e2, n3) / (n3 * n3 * Te.factorial(t2));
        return r2;
      }, Chi: function(e2) {
        var t2 = function(e3) {
          return (Math.cosh(e3) - 1) / e3;
        };
        return Math.log(e2) + 0.5772156649015329 + Te.num_integrate(t2, 2e-3, e2, 1e-3);
      }, Li: function(e2) {
        return Te.Ei(Te.bigLog(e2));
      }, gamma_incomplete: function(e2, t2) {
        for (var n3 = e2 - 1, r2 = 0, t2 = t2 || 0, i2 = 0; i2 < n3; i2++) r2 += Math.pow(t2, i2) / Te.factorial(i2);
        return Te.factorial(n3) * Math.exp(-t2) * r2;
      }, step: function(e2) {
        return 0 < e2 ? 1 : e2 < 0 ? 0 : 0.5;
      }, rect: function(e2) {
        return 0.5 === (e2 = Math.abs(e2)) ? e2 : 0.5 < e2 ? 0 : 1;
      }, sinc: function(e2) {
        return e2.equals(0) ? 1 : Math.sin(e2) / e2;
      }, tri: function(e2) {
        return 1 <= (e2 = Math.abs(e2)) ? 0 : 1 - e2;
      }, nthroot: function(e2, t2) {
        if (e2 instanceof De || (e2 = new De(e2.toString())), (t2 = !(t2 instanceof De) ? new De(t2.toString()) : t2).equals(1)) return e2;
        var n3 = e2.divide(new De(2)), r2 = new De(1e-15), i2 = t2.clone().invert(), s2 = t2.subtract(new De(1));
        do {
          var o2 = Te.bigpow(n3, s2), a2 = i2.multiply(e2.divide(o2).subtract(n3)).toDecimal(25), o2 = De.create(a2);
          if (u2) break;
          var n3 = n3.add(o2), a2 = o2.toDecimal(), u2 = !!l2 && l2 === a2, l2 = a2;
        } while (o2.abs().gte(r2));
        return n3;
      }, sqrt: function(e2) {
        var t2, n3, r2;
        e2 instanceof De || (e2 = new De(e2));
        var i2 = 0, s2 = false, o2 = new De(1e-20), a2 = e2.divide(new De(2));
        do {
          if (1e3 < i2) throw new Error("Unable to calculate square root for " + e2);
        } while (a2 = a2.add(e2.divide(a2)).divide(new De(2)), a2 = new De(a2.decimal(30)), t2 = e2.subtract(a2.multiply(a2)), r2 = !!n3 && n3.equals(t2), (t2.clone().abs().lessThan(o2) || r2) && (s2 = true), n3 = t2, i2++, !s2);
        return a2;
      } };
      function Pe(e2, m2, t2, n3) {
        var r2 = "hash" === m2, g2 = void 0, i2 = r2 ? void 0 : m2, s2 = "decimal" === i2 || "decimals" === i2;
        function o2(e3) {
          switch (m2) {
            case "decimals":
            case "decimal":
              return g2 = g2 || function(e4) {
                return false;
              }, e3.valueOf();
            case "recurring":
              g2 = g2 || function(e4) {
                return -1 !== e4.indexOf("'");
              };
              var t3 = e3.toString();
              if (0 === (f3 = /^-?\d+(?:\/\d+)?$/.exec(t3)).length) return t3;
              var n4 = f3[0].split("/"), r3 = false, i3 = Number(n4[0]);
              i3 < 0 && (i3 = -i3, r3 = true);
              var s3 = (s3 = Number(n4[1])) || 1, o3 = 10 * (i3 - (h3 = Math.floor(i3 / s3)) * s3);
              for (h3 = h3.toString() + "."; o3 && o3 < s3; ) o3 *= 10, h3 += "0";
              for (var a3 = "", u3 = [], l3 = 0; ; ) {
                if (void 0 !== u3[o3]) return (r3 ? "-" : "") + (h3 + a3.slice(0, u3[o3]) + "'" + a3.slice(u3[o3]) + "'").replace("'0'", "").replace(/\.$/, "");
                var c3 = Math.floor(o3 / s3), p3 = o3 - c3 * s3;
                u3[o3] = l3, a3 += c3.toString(), l3 += 1, o3 = 10 * p3;
              }
            case "mixed":
              g2 = g2 || function(e4) {
                return -1 !== e4.indexOf("/");
              };
              t3 = e3.toString();
              if (0 === (f3 = /^-?\d+(?:\/\d+)?$/.exec(t3)).length) return t3;
              var n4 = f3[0].split("/"), t3 = new S(n4[0]), f3 = new S(n4[1]);
              f3.equals(0) && (f3 = new S(1));
              var t3 = t3.divmod(f3), h3 = t3.quotient, f3 = t3.remainder, t3 = "-" === n4[0][0] || h3.equals(0) || f3.equals(0) ? "" : "+";
              return (h3.equals(0) ? "" : h3.toString()) + t3 + (f3.equals(0) ? "" : f3.toString() + "/" + n4[1]);
            case "scientific":
              return g2 = g2 || function(e4) {
                return false;
              }, new T(e3.valueOf()).toString(D.SCIENTIFIC_MAX_DECIMAL_PLACES);
            default:
              return g2 = g2 || function(e4) {
                return -1 !== e4.indexOf("/");
              }, e3.toString();
          }
        }
        if (s2 && void 0 === n3 && (n3 = D.DEFAULT_DECP), ne(e2)) {
          var a2, u2, l2 = "", c2 = "", p2 = "", f2 = e2.group || t2, h2 = e2.value;
          switch (r2 || ("-1" == (a2 = o2(e2.multiplier)) && "-1" === String(e2.multiplier) && (p2 = "-", a2 = "1"), "1" != a2 && (l2 = a2), "1" != (u2 = e2.power ? o2(e2.power) : "") && (c2 = ne(u2) ? Pe(u2, i2) : u2)), f2) {
            case F:
              var l2 = "", d2 = n3 && s2 ? e2.multiplier.toDecimal(n3) : o2(e2.multiplier), h2 = "-1" == String(e2.multiplier) ? "1" : d2, c2 = "";
              break;
            case j:
              h2 = e2.collectSymbols().map(function(e3) {
                e3 = Pe(e3, i2, t2, n3);
                return e3 = "0" == e3 ? "" : e3;
              }).sort().join("+").replace(/\+\-/g, "-");
              break;
            case $:
              h2 = e2.collectSymbols().map(function(e3) {
                e3 = Pe(e3, i2, t2, n3);
                return e3 = "0" == e3 ? "" : e3;
              }).sort().join("+").replace(/\+\-/g, "-");
              break;
            case X:
              h2 = e2.collectSymbols(function(e3) {
                var t3 = e3.group;
                return (t3 === j || t3 === $) && e3.power.equals(1) && e3.multiplier.equals(1) ? E(Pe(e3, i2)) : Pe(e3, i2);
              }).join("*");
              break;
            case V:
              var v2 = e2.previousGroup, d2 = e2.power.group;
              v2 === j && (h2 = e2.collectSymbols(Pe, i2).join("+").replace("+-", "-")), v2 === F || v2 === G || v2 === H || r2 || (h2 = E(h2)), d2 !== $ && d2 !== X && d2 !== j && "1" == e2.power.multiplier.toString() || !c2 || (c2 = E(c2));
          }
          f2 === H && (h2 = e2.fname + E(e2.args.map(function(e3) {
            return Pe(e3, i2);
          }).join(","))), f2 === H && e2.fname in M && (a2 = Pe(e2.args[0]), u2 = Pe(e2.args[1]), e2.args[0].isComposite() && (a2 = E(a2)), e2.args[1].isComposite() && (u2 = E(u2)), h2 = a2 + M[e2.fname] + u2), c2 && f2 !== V && g2(c2) && (c2 = E(c2)), ((f2 === $ || f2 === j) && (l2 && "1" != l2 || "-" === p2) || (f2 === X || f2 === $ || f2 === j) && c2 && "1" != c2 || !r2 && f2 === B && -1 == h2 || e2.fname === Z) && (h2 = E(h2));
          var w2 = p2 + (l2 = n3 && ("decimal" === m2 || "decimals" === m2 && l2) ? me(l2, n3) : l2);
          if (l2 && g2(l2) && (w2 = E(w2)), l2 && (w2 += "*"), c2 = c2 < 0 ? E(c2) : c2) {
            if ("e" === h2 && D.E_TO_EXP) return w2 + "exp" + E(c2);
            c2 = D.POWER_OPERATOR + c2;
          }
          f2 = w2 + (h2 = f2 === V && "-" === h2.charAt(0) ? E(h2) : h2);
          return (f2 = e2.parens ? E(f2) : f2) + c2;
        }
        if (re(e2)) {
          for (var y2 = e2.elements.length, w2 = [], b2 = 0; b2 < y2; b2++) w2.push(e2.elements[b2].text(m2));
          return "[" + w2.join(",") + "]";
        }
        try {
          return e2.toString();
        } catch (e3) {
          return "";
        }
      }
      function ke(e2) {
        if (g(e2)) return [e2];
        for (var t2 = e2, n3 = 1, r2 = []; n3 < t2; ) {
          var i2 = e2 / n3, s2 = Math.floor(i2);
          if (i2 - s2 <= 2220446049250313e-31 && 1 < n3) {
            if (g(n3) && (-1 === o.indexOf(n3) && o.push(n3), r2.push(n3)), g(s2)) {
              r2.push(s2);
              break;
            }
            t2 = s2;
          }
          n3++;
        }
        return r2.sort(function(e3, t3) {
          return e3 - t3;
        });
      }
      function R(e2) {
        this.symbol = e2;
      }
      function T(e2) {
        return this instanceof T ? ((e2 = String(void 0 === e2 ? 0 : e2)).startsWith("-") ? (this.sign = -1, e2 = e2.substr(1, e2.length)) : this.sign = 1, T.isScientific(e2) ? this.fromScientific(e2) : this.convert(e2), this) : new T(e2);
      }
      function De(t2) {
        if (t2 instanceof De) return t2;
        if (void 0 === t2) return this;
        try {
          if (ue(t2)) try {
            this.num = S(t2), this.den = S(1);
          } catch (e3) {
            return De.simple(t2);
          }
          else {
            var e2 = t2 instanceof k ? Be.quickConversion(t2) : Be.convert(t2);
            this.num = new S(e2[0]), this.den = new S(e2[1]);
          }
        } catch (e3) {
          return De.simple(t2);
        }
      }
      function Fe(e2) {
        var t2 = "Infinity" === e2;
        return this instanceof Fe ? (e2 instanceof k && (e2 = e2.toString()), /^(\-?\+?\d+)\.?\d*e?\-?\+?\d*/i.test(e2) || e2 instanceof k ? (this.group = F, this.value = l, this.multiplier = new De(e2)) : (this.group = G, m(e2), this.value = e2, this.multiplier = new De(1), this.imaginary = e2 === D.IMAGINARY, this.isInfinity = t2), this.power = new De(1), this) : new Fe(e2);
      }
      function P() {
        var C2 = this, n3 = {}, o2 = { names: [], actions: [] };
        function x2(e3, t3) {
          this.start = e3, this.end = t3;
        }
        function L2() {
          this.elements = [];
        }
        function A2(e3, t3, n4) {
          if (this.type = t3, this.value = e3, void 0 !== n4 && (this.column = n4 + 1), t3 === A2.OPERATOR) {
            var r3, i3 = E2[e3];
            for (r3 in i3) this[r3] = i3[r3];
          } else t3 === A2.FUNCTION && (this.precedence = A2.MAX_PRECEDENCE, this.leftAssoc = false);
        }
        x2.prototype.isConstant = function() {
          return this.start.isConstant() && this.end.isConstant();
        }, x2.prototype.text = function() {
          return Pe(this.start) + ":" + Pe(this.end);
        }, L2.prototype.append = function(e3) {
          this.elements.push(e3);
        }, L2.prototype.getItems = function() {
          return this.elements;
        }, L2.prototype.toString = function() {
          return C2.pretty_print(this.elements);
        }, L2.create = function(e3) {
          var t3 = new L2();
          return e3 && t3.append(e3), t3;
        }, A2.prototype.toString = function() {
          return this.value;
        }, A2.prototype.toString = function() {
          return this.is_prefix ? "`" + this.value : this.value;
        }, A2.OPERATOR = "OPERATOR", A2.VARIABLE_OR_LITERAL = "VARIABLE_OR_LITERAL", A2.FUNCTION = "FUNCTION", A2.UNIT = "UNIT", A2.KEYWORD = "KEYWORD", A2.MAX_PRECEDENCE = 999, this.classes = { Collection: L2, Slice: x2, Token: A2 };
        var b2 = { prec: void 0, cos: function(e3, t3) {
          var n4 = C2.parse(Math.cos(e3) * Math.cosh(t3)), t3 = C2.parse(Math.sin(e3) * Math.sinh(t3));
          return C2.subtract(n4, C2.multiply(t3, Fe.imaginary()));
        }, sin: function(e3, t3) {
          var n4 = C2.parse(Math.sin(e3) * Math.cosh(t3)), t3 = C2.parse(Math.cos(e3) * Math.sinh(t3));
          return C2.subtract(n4, C2.multiply(t3, Fe.imaginary()));
        }, tan: function(e3, t3) {
          var n4 = C2.parse(Math.sin(2 * e3) / (Math.cos(2 * e3) + Math.cosh(2 * t3))), t3 = C2.parse(Math.sinh(2 * t3) / (Math.cos(2 * e3) + Math.cosh(2 * t3)));
          return C2.add(n4, C2.multiply(t3, Fe.imaginary()));
        }, sec: function(e3, t3) {
          t3 = this.removeDen(this.cos(e3, t3));
          return C2.subtract(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, csc: function(e3, t3) {
          t3 = this.removeDen(this.sin(e3, t3));
          return C2.add(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, cot: function(e3, t3) {
          t3 = this.removeDen(this.tan(e3, t3));
          return C2.subtract(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, acos: function(e3, t3) {
          var e3 = this.fromArray([e3, t3]), t3 = C2.pow(e3.clone(), new Fe(2)), t3 = C2.expand(t3), t3 = C2.multiply(O2(C2.subtract(new Fe(1), t3)), Fe.imaginary()), t3 = R2(C2.expand(C2.add(e3.clone(), t3)));
          return C2.expand(C2.multiply(Fe.imaginary().negate(), t3));
        }, asin: function(e3, t3) {
          return C2.subtract(C2.parse("pi/2"), this.acos(e3, t3));
        }, atan: function(e3, t3) {
          if (e3.equals(0) && (t3.equals(1) || t3.equals(-1))) return C2.parse(`${Fe.infinity()}*${D.IMAGINARY}*${t3}`);
          var e3 = b2.fromArray([e3, t3]), t3 = C2.expand(C2.multiply(Fe.imaginary(), e3.clone())), e3 = R2(C2.expand(C2.subtract(new Fe(1), t3.clone()))), t3 = R2(C2.expand(C2.add(new Fe(1), t3.clone())));
          return C2.expand(C2.multiply(C2.divide(Fe.imaginary(), new Fe(2)), C2.subtract(e3, t3)));
        }, asec: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.acos.apply(this, t3);
        }, acsc: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.asin.apply(this, t3);
        }, acot: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.atan.apply(this, t3);
        }, cosh: function(e3, t3) {
          var n4 = C2.parse(Math.cosh(e3) * Math.cos(t3)), t3 = C2.parse(Math.sinh(e3) * Math.sin(t3));
          return C2.add(n4, C2.multiply(t3, Fe.imaginary()));
        }, sinh: function(e3, t3) {
          var n4 = C2.parse(Math.sinh(e3) * Math.cos(t3)), t3 = C2.parse(Math.cosh(e3) * Math.sin(t3));
          return C2.add(n4, C2.multiply(t3, Fe.imaginary()));
        }, tanh: function(e3, t3) {
          var n4 = C2.parse(Math.sinh(2 * e3) / (Math.cos(2 * t3) + Math.cosh(2 * e3))), e3 = C2.parse(Math.sin(2 * t3) / (Math.cos(2 * t3) + Math.cosh(2 * e3)));
          return C2.subtract(n4, C2.multiply(e3, Fe.imaginary()));
        }, sech: function(e3, t3) {
          t3 = this.removeDen(this.cosh(e3, t3));
          return C2.subtract(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, csch: function(e3, t3) {
          t3 = this.removeDen(this.sinh(e3, t3));
          return C2.subtract(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, coth: function(e3, t3) {
          t3 = this.removeDen(this.tanh(e3, t3));
          return C2.add(t3[0], C2.multiply(t3[1], Fe.imaginary()));
        }, acosh: function(e3, t3) {
          var n4 = this.fromArray([e3, t3]), e3 = O2(C2.add(n4.clone(), new Fe(1))), t3 = O2(C2.subtract(n4.clone(), new Fe(1)));
          return C2.expand(R2(C2.add(n4, C2.expand(C2.multiply(e3, t3)))));
        }, asinh: function(e3, t3) {
          e3 = this.fromArray([e3, t3]), t3 = O2(C2.add(new Fe(1), C2.expand(C2.pow(e3.clone(), new Fe(2)))));
          return C2.expand(R2(C2.add(e3, t3)));
        }, atanh: function(e3, t3) {
          var e3 = this.fromArray([e3, t3]), t3 = R2(C2.add(e3.clone(), new Fe(1))), e3 = R2(C2.subtract(new Fe(1), e3));
          return C2.expand(C2.divide(C2.subtract(t3, e3), new Fe(2)));
        }, asech: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.acosh.apply(this, t3);
        }, acsch: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.asinh.apply(this, t3);
        }, acoth: function(e3, t3) {
          t3 = this.removeDen([e3, t3]);
          return t3[1].negate(), this.atanh.apply(this, t3);
        }, sqrt: function(e3) {
          var t3 = e3.realpart(), n4 = e3.imagpart(), e3 = Fe.hyp(t3, n4), t3 = C2.add(t3.clone(), e3), e3 = O2(C2.multiply(new Fe(2), t3.clone()));
          return C2.add(C2.divide(t3.clone(), e3.clone()), C2.multiply(C2.divide(n4, e3), Fe.imaginary()));
        }, log: function(e3, t3) {
          var n4 = R2(Fe.hyp(e3, t3)), e3 = D.USE_BIG ? Fe(k.atan2(t3.multiplier.toDecimal(), e3.multiplier.toDecimal())) : Math.atan2(t3, e3), e3 = C2.parse(e3);
          return C2.add(n4, C2.multiply(Fe.imaginary(), e3));
        }, erf(e3, t3) {
          return C2.symfunction("erf", [e3]);
        }, removeDen: function(e3) {
          var t3, n4 = ae(e3) ? (t3 = e3[0], e3[1]) : (t3 = e3.realpart(), e3.imagpart()), e3 = Math.pow(t3, 2) + Math.pow(n4, 2);
          return [C2.parse(t3 / e3), C2.parse(n4 / e3)];
        }, fromArray: function(e3) {
          return C2.add(e3[0], C2.multiply(Fe.imaginary(), e3[1]));
        }, evaluate: function(e3, t3) {
          var n4, r3, i3 = e3.power.sign();
          return e3.power = e3.power.abs(), e3.power.greaterThan(1) && (e3 = C2.expand(e3)), r3 = i3 < 0 ? (n4 = (r3 = this.removeDen(e3))[0], r3[1]) : (n4 = e3.realpart(), e3.imagpart()), n4.isConstant("all") && r3.isConstant("all") ? this[t3].call(this, n4, r3) : C2.symfunction(t3, [e3]);
        } }, I2 = this.trig = { cos: function(e3) {
          if (e3.equals("pi") && e3.multiplier.den.equals(2)) return new Fe(0);
          if (D.PARSE2NUMBER) {
            if (e3.equals(new Fe(D.PI / 2))) return new Fe(0);
            if (e3.isConstant()) return D.USE_BIG ? new Fe(k.cos(e3.multiplier.toDecimal())) : new Fe(Math.cos(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "cos");
          }
          if (e3.equals(0)) return new Fe(1);
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier.abs();
          return e3.multiplier = i3, e3.isPi() && e3.isLinear() && (ue(i3) ? t3 = new Fe(ge(i3) ? 1 : -1) : (Number(i3.num), 2 === (i3 = Number(i3.den)) ? t3 = new Fe(0) : 3 === i3 ? (t3 = C2.parse("1/2"), n4 = true) : 4 === i3 ? (t3 = C2.parse("1/sqrt(2)"), n4 = true) : 6 === i3 ? (t3 = C2.parse("sqrt(3)/2"), n4 = true) : t3 = C2.symfunction("cos", [e3]))), !n4 || 2 !== r3 && 3 !== r3 || t3.negate(), t3 = t3 || C2.symfunction("cos", [e3]);
        }, sin: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return e3 % Math.PI == 0 ? new Fe(0) : D.USE_BIG ? new Fe(k.sin(e3.multiplier.toDecimal())) : new Fe(Math.sin(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "sin");
          }
          if (e3.equals(0)) return new Fe(0);
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier.sign(), s3 = e3.multiplier.abs();
          return e3.multiplier = s3, e3.equals("pi") ? t3 = new Fe(0) : e3.isPi() && e3.isLinear() && (ue(s3) ? t3 = new Fe(0) : (s3.num, 2 == (s3 = s3.den) ? (t3 = new Fe(1), n4 = true) : 3 == s3 ? (t3 = C2.parse("sqrt(3)/2"), n4 = true) : 4 == s3 ? (t3 = C2.parse("1/sqrt(2)"), n4 = true) : 6 == s3 ? (t3 = C2.parse("1/2"), n4 = true) : t3 = C2.multiply(new Fe(i3), C2.symfunction("sin", [e3])))), t3 = t3 || C2.multiply(new Fe(i3), C2.symfunction("sin", [e3])), !n4 || 3 !== r3 && 4 !== r3 || t3.negate(), t3;
        }, tan: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3 % Math.PI == 0 && e3.isLinear()) return new Fe(0);
            if (e3.isConstant()) return D.USE_BIG ? new Fe(k.tan(e3.multiplier.toDecimal())) : new Fe(Math.tan(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "tan");
          }
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier;
          if (e3.multiplier = i3, e3.isPi() && e3.isLinear()) if (ue(i3)) t3 = new Fe(0);
          else {
            i3.num;
            i3 = i3.den;
            if (2 == i3) throw new Ae("tan is undefined for " + e3.toString());
            3 == i3 ? (t3 = C2.parse("sqrt(3)"), n4 = true) : 4 == i3 ? (t3 = new Fe(1), n4 = true) : 6 == i3 ? (t3 = C2.parse("1/sqrt(3)"), n4 = true) : t3 = C2.symfunction("tan", [e3]);
          }
          return t3 = t3 || C2.symfunction("tan", [e3]), !n4 || 2 !== r3 && 4 !== r3 || t3.negate(), t3;
        }, sec: function(e3) {
          if (D.PARSE2NUMBER) return e3.isConstant() ? D.USE_BIG ? new Fe(new k(1).dividedBy(k.cos(e3.multiplier.toDecimal()))) : new Fe(Te.sec(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "sec") : C2.parse(ce("1/cos({0})", e3));
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier.abs();
          if (e3.multiplier = i3, e3.isPi() && e3.isLinear()) if (ue(i3)) t3 = new Fe(ge(i3) ? 1 : -1);
          else {
            i3.num;
            i3 = i3.den;
            if (2 == i3) throw new Ae("sec is undefined for " + e3.toString());
            3 == i3 ? (t3 = new Fe(2), n4 = true) : 4 == i3 ? (t3 = C2.parse("sqrt(2)"), n4 = true) : 6 == i3 ? (t3 = C2.parse("2/sqrt(3)"), n4 = true) : t3 = C2.symfunction("sec", [e3]);
          }
          return !n4 || 2 !== r3 && 3 !== r3 || t3.negate(), t3 = t3 || C2.symfunction("sec", [e3]);
        }, csc: function(e3) {
          if (D.PARSE2NUMBER) return e3.isConstant() ? D.USE_BIG ? new Fe(new k(1).dividedBy(k.sin(e3.multiplier.toDecimal()))) : new Fe(Te.csc(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "csc") : C2.parse(ce("1/sin({0})", e3));
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier.sign(), s3 = e3.multiplier.abs();
          if (e3.multiplier = s3, e3.isPi() && e3.isLinear()) {
            if (ue(s3)) throw new Ae("csc is undefined for " + e3.toString());
            s3.num;
            s3 = s3.den;
            2 == s3 ? (t3 = new Fe(1), n4 = true) : 3 == s3 ? (t3 = C2.parse("2/sqrt(3)"), n4 = true) : 4 == s3 ? (t3 = C2.parse("sqrt(2)"), n4 = true) : 6 == s3 ? (t3 = new Fe(2), n4 = true) : t3 = C2.multiply(new Fe(i3), C2.symfunction("csc", [e3]));
          }
          return t3 = t3 || C2.multiply(new Fe(i3), C2.symfunction("csc", [e3])), !n4 || 3 !== r3 && 4 !== r3 || t3.negate(), t3;
        }, cot: function(e3) {
          if (D.PARSE2NUMBER) return e3 % (Math.PI / 2) == 0 ? new Fe(0) : e3.isConstant() ? D.USE_BIG ? new Fe(new k(1).dividedBy(k.tan(e3.multiplier.toDecimal()))) : new Fe(Te.cot(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "cot") : C2.parse(ce("1/tan({0})", e3));
          var t3, n4 = false, r3 = g2(e3.multiplier.toDecimal()), i3 = e3.multiplier;
          if (e3.multiplier = i3, e3.isPi() && e3.isLinear()) {
            if (ue(i3)) throw new Ae("cot is undefined for " + e3.toString());
            i3.num;
            i3 = i3.den;
            2 == i3 ? t3 = new Fe(0) : 3 == i3 ? (t3 = C2.parse("1/sqrt(3)"), n4 = true) : 4 == i3 ? (t3 = new Fe(1), n4 = true) : 6 == i3 ? (t3 = C2.parse("sqrt(3)"), n4 = true) : t3 = C2.symfunction("cot", [e3]);
          }
          return t3 = t3 || C2.symfunction("cot", [e3]), !n4 || 2 !== r3 && 4 !== r3 || t3.negate(), t3;
        }, acos: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) {
              if (e3.gt(1) || e3.lt(-1)) {
                var t3 = e3.toString();
                return T2(Se(`pi/2-asin(${t3})`));
              }
              return D.USE_BIG ? new Fe(k.acos(e3.multiplier.toDecimal())) : new Fe(Math.acos(e3.valueOf()));
            }
            if (e3.isImaginary()) return b2.evaluate(e3, "acos");
          }
          return C2.symfunction("acos", arguments);
        }, asin: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) {
              if (e3.gt(1) || e3.lt(-1)) {
                var t3 = D.IMAGINARY, n4 = e3.multiplier.toDecimal();
                return T2(Se(`${t3}*log(sqrt(1-${n4}^2)-${t3}*${n4})`));
              }
              return D.USE_BIG ? new Fe(k.asin(e3.multiplier.toDecimal())) : new Fe(Math.asin(e3.valueOf()));
            }
            if (e3.isImaginary()) return b2.evaluate(e3, "asin");
          }
          return C2.symfunction("asin", arguments);
        }, atan: function(e3) {
          var t3;
          if (e3.equals(0)) t3 = new Fe(0);
          else {
            if (D.PARSE2NUMBER) return e3.isConstant() ? D.USE_BIG ? new Fe(k.atan(e3.multiplier.toDecimal())) : new Fe(Math.atan(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "atan") : C2.symfunction("atan", arguments);
            t3 = e3.equals(-1) ? C2.parse("-pi/4") : C2.symfunction("atan", arguments);
          }
          return t3;
        }, asec: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.equals(0)) throw new Ce("Input is out of the domain of sec!");
            if (e3.isConstant()) return I2.acos(e3.invert());
            if (e3.isImaginary()) return b2.evaluate(e3, "asec");
          }
          return C2.symfunction("asec", arguments);
        }, acsc: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return I2.asin(e3.invert());
            if (e3.isImaginary()) return b2.evaluate(e3, "acsc");
          }
          return C2.symfunction("acsc", arguments);
        }, acot: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return new C2.add(C2.parse("pi/2"), I2.atan(e3).negate());
            if (e3.isImaginary()) return b2.evaluate(e3, "acot");
          }
          return C2.symfunction("acot", arguments);
        }, atan2: function(e3, t3) {
          if (e3.equals(0) && t3.equals(0)) throw new Ae("atan2 is undefined for 0, 0");
          return D.PARSE2NUMBER && e3.isConstant() && t3.isConstant() ? new Fe(Math.atan2(e3, t3)) : C2.symfunction("atan2", arguments);
        } }, e2 = this.trigh = { cosh: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return new Fe(Math.cosh(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "cosh");
          }
          return C2.symfunction("cosh", arguments);
        }, sinh: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return new Fe(Math.sinh(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "sinh");
          }
          return C2.symfunction("sinh", arguments);
        }, tanh: function(e3) {
          if (D.PARSE2NUMBER) {
            if (e3.isConstant()) return new Fe(Math.tanh(e3.valueOf()));
            if (e3.isImaginary()) return b2.evaluate(e3, "tanh");
          }
          return C2.symfunction("tanh", arguments);
        }, sech: function(e3) {
          return D.PARSE2NUMBER ? e3.isConstant() ? new Fe(Math.sech(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "sech") : C2.parse(ce("1/cosh({0})", e3)) : C2.symfunction("sech", arguments);
        }, csch: function(e3) {
          return D.PARSE2NUMBER ? e3.isConstant() ? new Fe(Math.csch(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "csch") : C2.parse(ce("1/sinh({0})", e3)) : C2.symfunction("csch", arguments);
        }, coth: function(e3) {
          return D.PARSE2NUMBER ? e3.isConstant() ? new Fe(Math.coth(e3.valueOf())) : e3.isImaginary() ? b2.evaluate(e3, "coth") : C2.parse(ce("1/tanh({0})", e3)) : C2.symfunction("coth", arguments);
        }, acosh: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "acosh") : D.PARSE2NUMBER ? Se(C2.parse(ce(D.LOG + "(({0})+sqrt(({0})^2-1))", e3.toString()))) : C2.symfunction("acosh", arguments);
          return e3;
        }, asinh: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "asinh") : D.PARSE2NUMBER ? Se(C2.parse(ce(D.LOG + "(({0})+sqrt(({0})^2+1))", e3.toString()))) : C2.symfunction("asinh", arguments);
          return e3;
        }, atanh: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "atanh") : D.PARSE2NUMBER ? Se(C2.parse(ce("(1/2)*" + D.LOG + "((1+({0}))/(1-({0})))", e3.toString()))) : C2.symfunction("atanh", arguments);
          return e3;
        }, asech: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "asech") : D.PARSE2NUMBER ? Se(R2(C2.add(e3.clone().invert(), O2(C2.subtract(C2.pow(e3, new Fe(-2)), new Fe(1)))))) : C2.symfunction("asech", arguments);
          return e3;
        }, acsch: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "acsch") : D.PARSE2NUMBER ? Se(C2.parse(ce(D.LOG + "((1+sqrt(1+({0})^2))/({0}))", e3.toString()))) : C2.symfunction("acsch", arguments);
          return e3;
        }, acoth: function(e3) {
          e3 = D.PARSE2NUMBER && e3.isImaginary() ? b2.evaluate(e3, "acoth") : D.PARSE2NUMBER ? e3.equals(1) ? Fe.infinity() : Se(C2.divide(R2(C2.divide(C2.add(e3.clone(), new Fe(1)), C2.subtract(e3.clone(), new Fe(1)))), new Fe(2))) : C2.symfunction("acoth", arguments);
          return e3;
        } }, E2 = { "\\": { precedence: 8, operator: "\\", action: "slash", prefix: true, postfix: !(this.units = {}), leftAssoc: true, operation: function(e3) {
          return e3;
        } }, "!!": { precedence: 7, operator: "!!", action: "dfactorial", prefix: false, postfix: true, leftAssoc: true, operation: function(e3) {
          return C2.symfunction(D.DOUBLEFACTORIAL, [e3]);
        } }, "!": { precedence: 7, operator: "!", action: "factorial", prefix: false, postfix: true, leftAssoc: true, operation: u2 }, "^": { precedence: 6, operator: "^", action: "pow", prefix: false, postfix: false, leftAssoc: true }, "**": { precedence: 6, operator: "**", action: "pow", prefix: false, postfix: false, leftAssoc: true }, "%": { precedence: 4, operator: "%", action: "percent", prefix: false, postfix: true, leftAssoc: true, overloaded: true, overloadAction: "mod", overloadLeftAssoc: false, operation: function(e3) {
          return C2.divide(e3, new Fe(100));
        } }, "*": { precedence: 4, operator: "*", action: "multiply", prefix: false, postfix: false, leftAssoc: false }, "/": { precedence: 4, operator: "/", action: "divide", prefix: false, postfix: false, leftAssoc: false }, "+": { precedence: 3, operator: "+", action: "add", prefix: true, postfix: false, leftAssoc: false, operation: function(e3) {
          return e3;
        } }, plus: { precedence: 3, operator: "plus", action: "add", prefix: true, postfix: false, leftAssoc: false, operation: function(e3) {
          return e3;
        } }, "-": { precedence: 3, operator: "-", action: "subtract", prefix: true, postfix: false, leftAssoc: false, operation: function(e3) {
          return e3.negate();
        } }, "=": { precedence: 2, operator: "=", action: "equals", prefix: false, postfix: false, leftAssoc: false }, "==": { precedence: 1, operator: "==", action: "eq", prefix: false, postfix: false, leftAssoc: false }, "<": { precedence: 1, operator: "<", action: "lt", prefix: false, postfix: false, leftAssoc: false }, "<=": { precedence: 1, operator: "<=", action: "lte", prefix: false, postfix: false, leftAssoc: false }, ">": { precedence: 1, operator: ">", action: "gt", prefix: false, postfix: false, leftAssoc: false }, "=>": { precedence: 1, operator: "=>", action: "gte", prefix: false, postfix: false, leftAssoc: false }, ",": { precedence: 0, operator: ",", action: "comma", prefix: false, postfix: false, leftAssoc: false }, ":": { precedence: 0, operator: ",", action: "assign", prefix: false, postfix: false, leftAssoc: false, vectorFn: "slice" }, ":=": { precedence: 0, operator: ",", action: "function_assign", prefix: false, postfix: false, leftAssoc: true } }, q2 = { "(": { type: "round", id: 1, is_open: true, is_close: false }, ")": { type: "round", id: 2, is_open: false, is_close: true }, "[": { type: "square", id: 3, is_open: true, is_close: false, maps_to: "vector" }, "]": { type: "square", id: 4, is_open: false, is_close: true }, "{": { type: "curly", id: 5, is_open: true, is_close: false, maps_to: "Set" }, "}": { type: "curly", id: 6, is_open: false, is_close: true } }, U2 = this.functions = { cos: [I2.cos, 1], sin: [I2.sin, 1], tan: [I2.tan, 1], sec: [I2.sec, 1], csc: [I2.csc, 1], cot: [I2.cot, 1], acos: [I2.acos, 1], asin: [I2.asin, 1], atan: [I2.atan, 1], arccos: [I2.acos, 1], arcsin: [I2.asin, 1], arctan: [I2.atan, 1], asec: [I2.asec, 1], acsc: [I2.acsc, 1], acot: [I2.acot, 1], atan2: [I2.atan2, 2], acoth: [e2.acoth, 1], asech: [e2.asech, 1], acsch: [e2.acsch, 1], sinh: [e2.sinh, 1], cosh: [e2.cosh, 1], tanh: [e2.tanh, 1], asinh: [e2.asinh, 1], sech: [e2.sech, 1], csch: [e2.csch, 1], coth: [e2.coth, 1], acosh: [e2.acosh, 1], atanh: [e2.atanh, 1], log10: [, 1], exp: [function(e3) {
          if (e3.fname === D.LOG && e3.isLinear()) return C2.pow(e3.args[0], Fe.create(e3.multiplier));
          return C2.parse(ce("e^({0})", e3));
        }, 1], radians: [function(e3) {
          return C2.parse(ce("({0})*pi/180", e3));
        }, 1], degrees: [function(e3) {
          return C2.parse(ce("({0})*180/pi", e3));
        }, 1], min: [function() {
          var e3 = [].slice.call(arguments);
          return w(e3) ? e3[0] : Me(e3) ? new Fe(Math.min.apply(null, e3)) : D.SYMBOLIC_MIN_MAX && Ne(e3) ? h2("min", e3) : C2.symfunction("min", e3);
        }, -1], max: [function() {
          var e3 = [].slice.call(arguments);
          return w(e3) ? e3[0] : Me(e3) ? new Fe(Math.max.apply(null, e3)) : D.SYMBOLIC_MIN_MAX && Ne(e3) ? h2("max", e3) : C2.symfunction("max", e3);
        }, -1], erf: [, 1], floor: [, 1], ceil: [, 1], trunc: [, 1], Si: [, 1], step: [, 1], rect: [, 1], sinc: [function(e3) {
          if (D.PARSE2NUMBER) return e3.isConstant() ? new Fe(Te.sinc(e3)) : C2.parse(ce("sin({0})/({0})", e3));
          return C2.symfunction("sinc", [e3]);
        }, 1], tri: [, 1], sign: [function(e3) {
          return e3.isConstant(true) ? new Fe(Math.sign(Se(e3))) : C2.symfunction("sign", arguments);
        }, 1], Ci: [, 1], Ei: [, 1], Shi: [, 1], Chi: [, 1], Li: [, 1], fib: [, 1], fact: [u2, 1], factorial: [u2, 1], continued_fraction: [function(e3, t3) {
          e3 = Se(e3);
          if (e3.isConstant()) {
            e3 = Te.continuedFraction(e3, t3), t3 = Ve.fromArray(e3.fractions.map(function(e4) {
              return new Fe(e4);
            }));
            return Ve.fromArray([new Fe(e3.sign), new Fe(e3.whole), t3]);
          }
          return C2.symfunction("continued_fraction", arguments);
        }, [1, 2]], dfactorial: [, 1], gamma_incomplete: [, [1, 2]], round: [m2, [1, 2]], scientific: [function(e3, t3) {
          return e3.scientific = t3 || 10, e3;
        }, [1, 2]], mod: [t2, 2], pfactor: [N2, 1], vector: [function() {
          return new Ve([].slice.call(arguments));
        }, -1], matrix: [function() {
          return He.fromArray(arguments);
        }, -1], Set: [function() {
          return je.fromArray(arguments);
        }, -1], imatrix: [function(e3) {
          return He.identity(e3);
        }, -1], parens: [function(e3) {
          if (D.PARSE2NUMBER) return e3;
          return C2.symfunction("parens", [e3]);
        }, -1], sqrt: [O2, 1], cbrt: [i2, 1], nthroot: [s2, 2], log: [R2, [1, 2]], expand: [function(e3, t3) {
          return T2(e3, t3 = t3 || { expand_denominator: true, expand_functions: true });
        }, 1], abs: [_2, 1], invert: [function(e3) {
          if (ie(e3)) return e3.invert();
          K("invert expects a matrix");
        }, 1], determinant: [function(e3) {
          if (ie(e3)) return e3.determinant();
          return e3;
        }, 1], size: [function(e3) {
          var t3;
          ie(e3) ? t3 = [new Fe(e3.cols()), new Fe(e3.rows())] : re(e3) || se(e3) ? t3 = new Fe(e3.elements.length) : K("size expects a matrix or a vector");
          return t3;
        }, 1], transpose: [function(e3) {
          if (ie(e3)) return e3.transpose();
          K("function transpose expects a matrix");
        }, 1], dot: [function(e3, t3) {
          if (re(e3) && re(t3)) return e3.dot(t3);
          K("function dot expects 2 vectors");
        }, 2], cross: [function(e3, t3) {
          if (re(e3) && re(t3)) return e3.cross(t3);
          K("function cross expects 2 vectors");
        }, 2], vecget: [function(e3, t3) {
          return t3.isConstant() && ue(t3) ? e3.elements[t3] : C2.symfunction("vecget", arguments);
        }, 2], vecset: [function(e3, t3, n4) {
          return t3.isConstant ? (e3.elements[t3] = n4, e3) : C2.symfunction("vecset", arguments);
        }, 3], vectrim: [function(e3, n4) {
          return n4 = void 0 === n4 ? 1e-14 : n4, e3 = e3.clone(), n4 = Number(n4), e3.elements.sort(function(e4, t3) {
            return t3.group - e4.group;
          }), e3.elements = ve(e3.elements, function(e4, t3) {
            return Number(C2.subtract(Se(e4), Se(t3)).abs()) <= n4;
          }), e3;
        }, [1, 2]], matget: [function(e3, t3, n4) {
          return t3.isConstant() && n4.isConstant() ? e3.elements[t3][n4] : C2.symfunction("matget", arguments);
        }, 3], matset: [function(e3, t3, n4, r3) {
          return e3.elements[t3][n4] = r3, e3;
        }, 4], matgetrow: [function(e3, t3) {
          return t3.isConstant() ? new He(e3.elements[t3]) : C2.symfunction("matgetrow", arguments);
        }, 2], matsetrow: [function(e3, t3, n4) {
          if (!t3.isConstant()) return C2.symfunction("matsetrow", arguments);
          if (e3.elements[t3].length !== n4.elements.length) throw new _e("Matrix row must match row dimensions!");
          e3 = e3.clone();
          return e3.elements[t3] = n4.clone().elements, e3;
        }, 3], matgetcol: [function(e3, r3) {
          if (!r3.isConstant()) return C2.symfunction("matgetcol", arguments);
          r3 = Number(r3);
          var i3 = He.fromArray([]);
          return e3.each(function(e4, t3, n4) {
            n4 === r3 && i3.elements.push([e4.clone()]);
          }), i3;
        }, 2], matsetcol: [function(n4, r3, e3) {
          if (!r3.isConstant()) return C2.symfunction("matsetcol", arguments);
          if (r3 = Number(r3), n4.rows() !== e3.elements.length) throw new _e("Matrix columns must match number of columns!");
          return e3.each(function(e4, t3) {
            n4.set(t3 - 1, r3, e4.elements[0].clone());
          }), n4;
        }, 3], rationalize: [r2, 1], IF: [function(e3, t3, n4) {
          "boolean" != typeof e3 && oe(e3) && (e3 = !!Number(e3));
          return e3 ? t3 : n4;
        }, 3], is_in: [function(e3, t3) {
          if (ie(e3)) {
            for (var n4 = 0, r3 = e3.rows(); n4 < r3; n4++) for (var i3 = 0, s3 = e3.cols(); i3 < s3; i3++) if (e3.elements[n4][i3].equals(t3)) return new Fe(1);
          } else if (e3.elements) {
            for (n4 = 0, r3 = e3.elements.length; n4 < r3; n4++) if (e3.elements[n4].equals(t3)) return new Fe(1);
          }
          return new Fe(0);
        }, 2], realpart: [l2, 1], imagpart: [c2, 1], conjugate: [p2, 1], arg: [f2, 1], polarform: [function(e3) {
          var t3;
          return t3 = Fe.toPolarFormArray(e3), e3 = t3[1], t3 = t3[0], e3 = C2.parse(ce("e^({0}*({1}))", D.IMAGINARY, e3)), C2.multiply(t3, e3);
        }, 1], rectform: [function(e3) {
          var t3, n4, r3, i3, s3, o3 = e3.clone();
          try {
            return t3 = he(e3, "e", true), n4 = C2.divide(t3.x.power, Fe.imaginary()), r3 = Se(I2.tan(n4)), C2.pow(t3.a, new Fe(2)), i3 = r3.getDenom(true), s3 = r3.getNum(), Fe.hyp(s3, i3).equals(t3.a) ? C2.add(i3, C2.multiply(Fe.imaginary(), s3)) : o3;
          } catch (e4) {
            return o3;
          }
        }, 1], sort: [function(e3, n4) {
          n4 = n4 ? n4.toString() : "asc";
          var r3 = function(e4) {
            return e4.group === F ? e4.multiplier : e4.group === H ? "" === e4.fname ? r3(e4.args[0]) : e4.fname : e4.group === G ? e4.power : e4.value;
          };
          return new Ve((re(e3) ? e3.elements : e3.collectSymbols()).sort(function(e4, t3) {
            e4 = r3(e4), t3 = r3(t3);
            return "desc" === n4 ? t3 - e4 : e4 - t3;
          }));
        }, [1, 2]], integer_part: [, 1], union: [function(e3, t3) {
          return e3.union(t3);
        }, 2], contains: [function(e3, t3) {
          return e3.contains(t3);
        }, 2], intersection: [function(e3, t3) {
          return e3.intersection(t3);
        }, 2], difference: [function(e3, t3) {
          return e3.difference(t3);
        }, 2], intersects: [function(e3, t3) {
          return new Fe(Number(e3.intersects(t3)));
        }, 2], is_subset: [function(e3, t3) {
          return new Fe(Number(e3.is_subset(t3)));
        }, 2], print: [function() {
          be(arguments).map(function(e3) {
            console.log(e3.toString());
          });
        }, -1] };
        this.error = K;
        this.override = function(e3, t3) {
          n3[e3] || (n3[e3] = []), n3[e3].push(this[e3]), this[e3] = t3;
        }, this.restore = function(e3) {
          this[e3] && (this[e3] = n3[e3].pop());
        }, this.extend = function(e3, n4, r3) {
          var i3, s3 = this;
          "function" == typeof this[e3] && "function" == typeof n4 && (i3 = this[e3], this[e3] = function(e4, t3) {
            return ne(e4) && ne(t3) && !r3 ? i3.call(s3, e4, t3) : n4.call(s3, e4, t3, i3);
          });
        }, this.symfunction = function(e3, t3) {
          var n4 = new Fe(e3);
          return n4.group = H, "object" == typeof t3 && (t3 = [].slice.call(t3)), n4.args = t3, n4.fname = e3 === Z ? "" : e3, n4.updateHash(), n4;
        }, this.callfunction = function(e3, t3, n4) {
          var r3 = U2[e3];
          r3 || K("Nerdamer currently does not support the function " + e3);
          var i3, s3 = r3[1] || n4, o3 = r3[0];
          t3 instanceof Array || (t3 = void 0 !== t3 ? [t3] : []), -1 !== s3 && (i3 = (a3 = ae(s3)) ? s3[0] : s3, n4 = a3 ? s3[1] : s3, s3 = e3 + " requires a {0} of {1} arguments. {2} provided!", (a3 = t3.length) < i3 && K(ce(s3, "minimum", i3, a3)), n4 < a3 && K(ce(s3, "maximum", n4, a3)));
          var a3 = Me(t3);
          return o3 ? o3.apply(r3[2], t3) : (o3 = function(e4) {
            for (var t4 = D.FUNCTION_MODULES, n5 = t4.length, r4 = 0; r4 < n5; r4++) {
              var i4 = t4[r4];
              if (e4 in i4) return i4[e4];
            }
            K("The function " + e4 + " is undefined!");
          }(e3), D.PARSE2NUMBER && a3 ? d2(o3.apply(o3, t3)) : C2.symfunction(e3, t3));
        }, this.operator_filter_regex = (e2 = "^\\" + Object.keys(E2).filter(function(e3) {
          if (1 === e3.length) return e3;
        }).join("\\"), new RegExp("([" + e2 + "])\\s+([" + e2 + "])")), this.setOperator = function(e3, t3, n4) {
          var r3 = e3.operator;
          if (E2[r3] = e3, t3 && (this[e3.action] = t3), C2[r3] = e3.operation, e3.action || e3.prefix || e3.postif || (e3.action = r3), "over" === n4 || "under" === n4) {
            var i3, s3 = e3.precedence;
            for (i3 in E2) {
              var o3 = E2[i3];
              ("over" === n4 ? o3.precedence >= s3 : o3.precedence > s3) && o3.precedence++;
            }
          }
        }, this.getOperator = function(e3) {
          return E2[e3];
        }, this.aliasOperator = function(e3, t3) {
          var n4, r3 = {}, i3 = E2[e3];
          for (n4 in i3) r3[n4] = i3[n4];
          r3.operator = t3, this.setOperator(r3);
        }, this.getOperators = function() {
          return E2;
        }, this.getBrackets = function() {
          return q2;
        };
        function a2(e3) {
          this.type = e3.type, this.value = e3.value, this.left = e3.left, this.right = e3.right;
        }
        this.initConstants = function() {
          this.CONSTANTS = { E: new Fe(D.E), PI: new Fe(D.PI) };
        }, this.pretty_print = function(e3) {
          if (Array.isArray(e3)) {
            var t3 = e3.map((e4) => C2.pretty_print(e4)).join(", ");
            return "vector" === e3.type ? "vector<" + t3 + ">" : "(" + t3 + ")";
          }
          return e3.toString();
        }, this.peekers = { pre_operator: [], post_operator: [], pre_function: [], post_function: [] }, this.callPeekers = function(e3) {
          if (D.callPeekers) for (var t3 = this.peekers[e3], n4 = be(arguments).slice(1).map(le), r3 = 0; r3 < t3.length; r3++) t3[r3].apply(null, n4);
        }, this.tokenize = function(n4) {
          for (var e3 in n4 = (n4 = String(n4)).trim().replace(/\s+/g, " "), q2) {
            var t3 = new RegExp(q2[e3].is_close ? "\\s+\\" + e3 : "\\" + e3 + "\\s+", "g");
            n4 = n4.replace(t3, e3);
          }
          for (var u3 = 0, r3 = n4.length, i3 = 0, s3 = [], o3 = [s3], a3 = o3[0], l3 = 0, c3 = [], p3 = false, f3 = function(e4, t4) {
            var n5 = [];
            void 0 !== e4 && (n5.type = e4), n5.column = t4, o3.push(n5), a3.push(n5), a3 = n5, l3++;
          }, h3 = function() {
            o3.pop(), a3 = o3[--l3];
          }, m3 = function(e4, t4) {
            (t4 = void 0 === t4 ? n4.substring(i3, e4) : t4) in C2.units ? a3.push(new A2(t4, A2.UNIT, i3)) : "" !== t4 && a3.push(new A2(t4, A2.VARIABLE_OR_LITERAL, i3));
          }, g3 = function(e4) {
            a3.push(new A2(e4, A2.FUNCTION, i3));
          }, d3 = function(e4) {
            i3 = e4 + 1;
          }; u3 < r3; u3++) {
            var v3 = n4.charAt(u3);
            if (v3 in E2) {
              m3(u3);
              var w2 = a3[0] && te(a3[0]);
              p3 && i3 < u3 && "," !== v3 && !(w2 && "*" === v3) && (p3 = false, h3()), d3(u3 + 1);
              var y2 = function(e4) {
                for (var t4 = (e4 = void 0 !== e4 ? e4 : u3) + 1; n4.charAt(t4++) in E2; ) ;
                return n4.substring(e4, t4 - 1);
              }(u3), u3 = (i3 = i3 + y2.length - 2) - 1;
              a3.push.apply(a3, function(e4) {
                for (var t4 = u3 - e4.length, n5 = [], r4 = e4.charAt(0), i4 = 1, s4 = e4.length; i4 < s4; i4++) var o4 = e4.charAt(i4), a4 = r4 + o4, r4 = a4 in E2 ? a4 : (n5.push(new A2(r4, A2.OPERATOR, t4 + i4)), o4);
                return n5.push(new A2(r4, A2.OPERATOR, t4 + i4)), n5;
              }(y2));
            } else if (v3 in q2) {
              var b3, S3 = q2[v3];
              if (S3.is_open) c3.push([S3, i3]), (b3 = n4.substring(i3, u3)) in U2 ? g3(b3) : "" !== b3 && a3.push(new A2(b3, A2.VARIABLE_OR_LITERAL, i3)), f3(S3.maps_to, u3);
              else if (S3.is_close) {
                var M3 = c3.pop();
                if (!M3) throw new Le("Missing open bracket for bracket at: " + (u3 + 1));
                if (M3[0].id !== S3.id - 1) throw new Le("Parity error");
                m3(u3), h3();
              }
              d3(u3);
            } else " " === v3 && (M3 = n4.substring(i3, u3), S3 = n4.charAt(u3 + 1), p3 ? (M3 in E2 ? a3.push(new A2(M3, A2.OPERATOR, u3)) : (m3(void 0, M3), h3(), ((v3 = S3 in E2) && "-" === E2[S3].value || !v3) && a3.push(new A2("*", A2.OPERATOR, u3))), p3 = false) : (b3 = n4.substring(i3, u3)) in U2 ? (p3 = true, g3(b3), f3()) : b3 in E2 ? a3.push(new A2(b3, A2.OPERATOR, u3)) : (m3(void 0, b3), S3 = n4.charAt(u3 + 1), "" === M3 || "" === S3 || M3 in E2 || S3 in E2 || a3.push(new A2("*", A2.OPERATOR, u3))), d3(u3));
          }
          if (c3.length) {
            var N3 = c3.pop();
            throw new Le("Missing closed bracket for bracket at " + (N3[1] + 1));
          }
          return m3(u3), s3;
        }, this.toRPN = function(e3) {
          for (var t3 = e3.type, n4 = e3.length, r3 = [], i3 = [], s3 = [], o3 = function(e4, t4) {
            for (; e4.length; ) t4.push(e4.pop());
          }, a3 = 0; a3 < n4; a3++) {
            var u3 = e3[a3];
            if (u3.type !== A2.OPERATOR) break;
            if (!u3.prefix) throw new Ie("Not a prefix operator");
            u3.is_prefix = true, i3.push(u3);
          }
          for (; a3 < n4; a3++) {
            var l3 = e3[a3];
            if (l3.type === A2.OPERATOR) {
              var c3 = l3;
              for (c3.overloaded && (h3 = e3[a3 + 1]) && h3.type === A2.VARIABLE_OR_LITERAL && (c3.postfix = false, c3.action = c3.overloadAction, c3.leftAssoc = c3.overloadLeftAssoc); i3.length; ) {
                var p3 = i3[i3.length - 1];
                if (!(p3.precedence > c3.precedence || !c3.leftAssoc && p3.precedence === c3.precedence)) break;
                r3.push(i3.pop());
              }
              if (("vector" === t3 || "set" === t3) && "vectorFn" in c3 && (c3.action = c3.vectorFn), c3.postfix) {
                var f3 = e3[a3 - 1];
                if (!f3) throw new Ie("Unexpected prefix operator '" + l3.value + "'! at " + l3.column);
                if (f3.type === A2.OPERATOR && !f3.postfix) throw new Ie("Unexpected prefix operator '" + f3.value + "'! at " + f3.column);
              } else do {
                var h3, m3 = !!(h3 = e3[a3 + 1]) && h3.type === A2.OPERATOR;
                if (m3) {
                  if (!h3.prefix) throw new Ie("A prefix operator was expected at " + h3.column);
                  h3.is_prefix = true, s3.push(h3), a3++;
                }
              } while (m3);
              for ((c3.is_prefix ? s3 : i3).push(c3); s3.length && (c3.leftAssoc || !c3.leftAssoc && s3[s3.length - 1].precedence >= c3.precedence); ) i3.push(s3.pop());
            } else l3.type === A2.VARIABLE_OR_LITERAL ? (0 === r3.length && o3(s3, i3), r3.push(l3), (f3 = i3[i3.length - 1]) && f3.leftAssoc || o3(s3, r3)) : l3.type === A2.FUNCTION ? i3.push(l3) : l3.type === A2.UNIT && r3.push(l3);
            Array.isArray(l3) && (r3.push(this.toRPN(l3)), l3.type && r3.push(new A2(l3.type, A2.FUNCTION, l3.column)));
          }
          return o3(i3, r3), o3(s3, r3), r3;
        }, this.parseRPN = function(e3, t3) {
          try {
            for (var n4 in t3 = t3 || {}) t3[n4] = C2.parse(t3[n4], {});
            D.PARSE2NUMBER && ("e" in t3 || (t3.e = new Fe(D.E)), "pi" in t3 || (t3.pi = new Fe(D.PI)));
            for (var r3 = [], i3 = 0, s3 = e3.length; i3 < s3; i3++) {
              var o3 = e3[i3];
              if (o3 = Array.isArray(o3) ? this.parseRPN(o3, t3) : o3) if (o3.type === A2.OPERATOR) if (o3.is_prefix || o3.postfix) r3.push(o3.operation(r3.pop()));
              else {
                var a3 = r3.pop(), u3 = r3.pop();
                if (void 0 === u3) throw new Ie(o3 + " is not a valid postfix operator at " + o3.column);
                var l3 = "comma" === o3.action;
                u3 instanceof je && !l3 && (u3 = Ve.fromSet(u3)), a3 instanceof je && !l3 && (a3 = Ve.fromSet(a3)), this.callPeekers("pre_operator", u3, a3, o3);
                var c3 = C2[o3.action](u3, a3);
                this.callPeekers("post_operator", c3, u3, a3, o3), r3.push(c3);
              }
              else if (o3.type === A2.FUNCTION) {
                var p3 = r3.pop(), f3 = p3.parent;
                p3 instanceof L2 || (p3 = L2.create(p3));
                var h3 = o3.value, m3 = p3.getItems();
                this.callPeekers("pre_function", h3, m3);
                var g3 = C2.callfunction(h3, m3);
                this.callPeekers("post_function", g3, h3, m3);
                var d3 = r3[r3.length - 1], v3 = e3[i3 + 1];
                if (!(v3 && v3.type === A2.OPERATOR && "," === v3.value) && g3 instanceof Ve && d3 && d3.elements && !(d3 instanceof L2)) {
                  var w2 = r3.pop(), y2 = g3.elements[0];
                  if (y2.isConstant()) if (y2 instanceof x2) r3.push(Ve.fromArray(w2.elements.slice(y2.start, y2.end)));
                  else {
                    var b3 = Number(y2), S3 = w2.elements.length;
                    if ((b3 = b3 < 0 ? S3 + b3 : b3) < 0 || S3 <= b3) throw new Ue("Index out of range " + (o3.column + 1));
                    var M3 = w2.elements[b3];
                    w2.getter = b3, M3.parent = w2, r3.push(M3);
                  }
                  else w2.getter = y2, r3.push(w2), r3.push(g3);
                } else f3 && (g3.parent = f3), r3.push(g3);
              } else {
                var N3, E3 = o3.value;
                E3 in D.ALIASES ? o3 = C2.parse(D.ALIASES[o3]) : o3.type === A2.VARIABLE_OR_LITERAL ? o3 = new Fe(E3) : o3.type === A2.UNIT && ((o3 = new Fe(E3)).isUnit = true), E3 in C2.CONSTANTS ? (N3 = o3, o3 = new Fe(C2.CONSTANTS[E3])) : E3 in t3 && E3 !== t3[E3].toString() ? (N3 = o3, o3 = t3[E3].clone()) : E3 in J && (N3 = o3, o3 = J[E3].clone()), N3 && (o3.subbed = N3), r3.push(o3);
              }
            }
            var q3 = r3[0];
            if (-1 !== ["undefined", "string", "number"].indexOf(typeof q3)) throw new Re("Unexpected token!");
            return q3;
          } catch (t4) {
            throw [Ce].forEach(function(e4) {
              if (t4 instanceof e4) throw new e4(t4.message + ": " + o3.column);
            }), new xe(t4.message + ": " + o3.column);
          }
        }, a2.prototype.toString = function() {
          var e3 = this.left ? this.left.toString() + "---" : "", t3 = this.right ? "---" + this.right.toString() : "";
          return e3 + "(" + this.value + ")" + t3;
        }, a2.prototype.toHTML = function(e3, t3) {
          e3 = e3 || 0, t3 = void 0 === t3 ? 4 : t3;
          function n4(e4) {
            return " ".repeat(t3 * e4);
          }
          var r3 = "", i3 = this.left ? n4(e3 + 1) + "<li>\n" + this.left.toHTML(e3 + 2, t3) + n4(e3 + 1) + "</li> \n" : "", s3 = this.right ? n4(e3 + 1) + "<li>\n" + this.right.toHTML(e3 + 2, t3) + n4(e3 + 1) + "</li>\n" : "", r3 = n4(e3) + '<div class="' + this.type.toLowerCase() + '"><span>' + this.value + "</span></div>" + n4(e3) + "\n";
          return (i3 || s3) && (r3 += n4(e3) + "<ul>\n" + i3 + s3 + n4(e3) + "</ul>\n"), r3 += "";
        }, this.tree = function(e3) {
          for (var t3 = [], n4 = 0; n4 < e3.length; n4++) {
            var r3 = e3[n4];
            if (Array.isArray(r3)) r3 = this.tree(r3), t3.push(r3);
            else if (r3.type === A2.OPERATOR) r3.is_prefix || r3.postfix ? (s3 = r3.is_prefix ? "left" : "right", i3 = t3.pop(), (r3 = new a2(r3))[s3] = i3) : ((r3 = new a2(r3)).right = t3.pop(), r3.left = t3.pop()), t3.push(r3);
            else if (r3.type === A2.FUNCTION) {
              r3 = new a2(r3);
              var i3, s3 = t3.pop();
              if (r3.right = s3, "object" === r3.value) {
                if (i3 = t3[t3.length - 1]) {
                  for (; i3.right; ) i3 = i3.right;
                  i3.right = r3;
                  continue;
                }
              }
              t3.push(r3);
            } else t3.push(new a2(r3));
          }
          return t3[0];
        }, this.parse = function(e3, t3) {
          e3 = function(e4) {
            e4 = String(e4);
            for (var t4 = 0; t4 < o2.actions.length; t4++) e4 = o2.actions[t4].call(this, e4);
            for (e4 = e4.replace(/\s+/g, " "), e4 = (e4 = /e/gi.test(e4) ? e4.replace(/\-*\d+\.*\d*e\+?\-?\d+/gi, function(e5) {
              return y(e5);
            }) : e4).replace(D.IMPLIED_MULTIPLICATION_REGEX, function() {
              var e5 = arguments[4], t5 = arguments[1], n4 = arguments[2], r3 = arguments[3], i3 = "", s3 = "*";
              return t5 + (s3 = (i3 = !e5.charAt(r3).match(/[\+\-\/\*]/) ? e5.charAt(r3 - 1) : i3).match(/[a-z]/i) ? "" : s3) + n4;
            }).replace(/([a-z0-9_]+)/gi, function(e5, t5) {
              return !(false !== D.USE_MULTICHARACTER_VARS || t5 in U2) && isNaN(t5) ? t5.split("").join("*") : t5;
            }).replace(/\)\(/g, ")*(") || "0"; ; ) if (e4 === (e4 = e4.replace(/([a-z0-9_]+)(\()|(\))([a-z0-9]+)/gi, function(e5, t5, n4, r3, i3) {
              r3 = t5 || r3, i3 = n4 || i3;
              return r3 in U2 ? r3 + i3 : r3 + "*" + i3;
            }))) break;
            return e4;
          }(e3), t3 = t3 || {};
          e3 = this.tokenize(e3), e3 = this.toRPN(e3);
          return this.parseRPN(e3, t3);
        }, this.toObject = function(e3) {
          var a3 = function(e4) {
            for (var t3 = [], n4 = 0, r3 = e4.length; n4 < r3; n4++) {
              var i3, s3 = e4[n4], o3 = s3.value;
              s3.type === A2.VARIABLE_OR_LITERAL ? t3.push(new Fe(o3)) : s3.type === A2.FUNCTION ? (n4++, (i3 = C2.symfunction(o3, a3(e4[n4]))).isConversion = true, t3.push(i3)) : s3.type === A2.OPERATOR ? t3.push(o3) : t3.push(a3(s3));
            }
            return t3;
          };
          return a3(C2.tokenize(e3));
        };
        function S2(e3) {
          for (var t3 = 0, n4 = [[]], r3 = 0, i3 = e3.length; r3 < i3; r3++) "," === e3[r3] ? n4[++t3] = [] : n4[t3].push(e3[r3]);
          return n4;
        }
        function M2(e3) {
          return e3.replace(/^\\left\((.+)\\right\)$/g, function(e4, t3) {
            return t3 || e4;
          });
        }
        function _2(e3) {
          if (e3.isInfinity) return Fe.infinity();
          if (e3.multiplier.lessThan(0) && e3.multiplier.negate(), e3.isImaginary()) {
            var t3 = e3.realpart(), n4 = e3.imagpart();
            if (t3.isConstant() && n4.isConstant()) return O2(C2.add(C2.pow(t3, new Fe(2)), C2.pow(n4, new Fe(2))));
          } else if (oe(e3) || ge(e3.power)) return e3;
          var r3;
          e3.isComposite() && (r3 = [], e3.each(function(e4) {
            r3.push(e4.multiplier);
          }), Te.QGCD.apply(null, r3).lessThan(0) && (e3.multiplier = e3.multiplier.multiply(new De(-1)), e3.distributeMultiplier()));
          n4 = C2.parse(e3.multiplier);
          return e3.toUnitMultiplier(), C2.multiply(n4, C2.symfunction(Q, [e3]));
        }
        function u2(e3) {
          if (re(e3)) {
            var n4 = new Ve();
            return e3.each(function(e4, t4) {
              n4.set(t4 - 1, u2(e4));
            }), n4;
          }
          if (ie(e3)) {
            var r3 = new He();
            return e3.each(function(e4, t4, n5) {
              r3.set(t4, n5, u2(e4));
            }), r3;
          }
          if (D.PARSE2NUMBER && e3.isConstant()) return d2(ue(e3) ? Te.bigfactorial(e3) : Te.gamma(e3.multiplier.add(new De(1)).toDecimal()));
          if (e3.isConstant() && e3.getDenom().equals(2)) {
            var t3, i3 = e3.getNum(), s3 = e3.multiplier.isNegative() ? (s3 = C2.subtract(i3.negate(), new Fe(1)).multiplier.divide(new De(2)), t3 = C2.pow(new Fe(-4), new Fe(s3)).multiplier.multiply(Te.bigfactorial(s3)), Te.bigfactorial(new De(2).multiply(s3))) : (s3 = C2.add(i3, new Fe(1)).multiplier.divide(new De(2)), t3 = Te.bigfactorial(new De(2).multiply(s3)), C2.pow(new Fe(4), new Fe(s3)).multiplier.multiply(Te.bigfactorial(s3))), s3 = t3.divide(s3);
            return C2.multiply(C2.parse("sqrt(pi)"), new Fe(s3));
          }
          return C2.symfunction(Y, [e3]);
        }
        function t2(e3, t3) {
          if (e3.isConstant() && t3.isConstant()) {
            var n4 = new Fe(1);
            return n4.multiplier = n4.multiplier.multiply(e3.multiplier.mod(t3.multiplier)), n4;
          }
          n4 = C2.divide(e3.clone(), t3.clone());
          return ue(n4) ? new Fe(0) : C2.symfunction("mod", [e3, t3]);
        }
        function r2(e3) {
          if (e3.isComposite()) {
            var t3, n4, r3, i3, s3 = new Fe(0);
            return e3.each(function(e4) {
              r3 = e4.getNum(), i3 = e4.getDenom(), n4 = s3.getNum(), t3 = s3.getDenom(), n4 = C2.multiply(i3, n4), r3 = C2.multiply(r3, t3), r3 = C2.expand(C2.add(n4, r3)), i3 = C2.multiply(t3, i3), s3 = C2.divide(r3, i3);
            }, true), s3;
          }
          return e3;
        }
        function O2(e3) {
          if ((e3 = !ne(e3) ? C2.parse(e3) : e3).group === V) return C2.symfunction(z, [e3]);
          var t3 = (e3 = "" === e3.fname && e3.power.equals(1) ? e3.args[0] : e3).multiplier.sign() < 0;
          if (D.PARSE2NUMBER) {
            if (e3.isConstant() && !t3) return new Fe(k.sqrt(e3.multiplier.toDecimal()));
            if (e3.isImaginary()) return b2.sqrt(e3);
            if (e3.group === G) return C2.symfunction("sqrt", [e3]);
          }
          var n4, r3 = e3.isConstant();
          if (e3.group === X && e3.isLinear()) {
            var i3 = O2(Fe(e3.multiplier));
            for (o3 in e3.symbols) {
              var s3 = e3.symbols[o3];
              i3 = C2.multiply(i3, O2(s3));
            }
            l3 = i3;
          } else if (e3.fname === z) {
            var o3 = e3.args[0], a3 = e3.multiplier;
            o3.setPower(e3.power.multiply(new De(0.25))), l3 = o3, a3.equals(1) || (l3 = C2.multiply(O2(C2.parse(a3)), l3));
          } else if (e3.power.isInteger()) if (e3.multiplier < 0 && e3.group === G) var u3 = C2.parse(e3.multiplier).negate(), a3 = C2.parse(e3).toUnitMultiplier().negate(), l3 = C2.multiply(C2.symfunction(D.SQRT, [a3]), O2(u3));
          else {
            u3 = e3.power.sign();
            e3.power = e3.power.abs(), r3 && e3.multiplier.lessThan(0) && (n4 = Fe.imaginary(), e3.multiplier = e3.multiplier.abs());
            var c3 = e3.multiplier.toDecimal(), r3 = Math.abs(c3), r3 = Math.sqrt(r3);
            if (ue(r3)) i3 = new Fe(r3);
            else if (ue(c3)) {
              var p3 = Te.ifactor(c3), f3 = 1;
              for (s3 in p3) {
                var h3, m3 = (g3 = p3[s3]) - g3 % 2;
                m3 && (h3 = Math.pow(s3, m3), f3 *= Math.pow(s3, m3 / 2), c3 /= h3);
              }
              i3 = C2.multiply(C2.symfunction(z, [new Fe(c3)]), new Fe(f3));
            } else {
              for (var g3, d3 = [new Fe(e3.multiplier.num), new Fe(e3.multiplier.den)], v3 = [new Fe(1), new Fe(1)], w2 = [new Fe(1), new Fe(1)], y2 = 0; y2 < 2; y2++) N2(g3 = d3[y2]).each(function(e4) {
                var t4 = (e4 = Fe.unwrapPARENS(e4)).clone().toLinear(), n5 = Number(e4.power), e4 = n5 % 2;
                v3[y2] = C2.multiply(v3[y2], C2.pow(t4, new Fe((n5 - e4) / 2))), w2[y2] = C2.multiply(w2[y2], O2(C2.pow(t4, new Fe(e4))));
              });
              i3 = C2.divide(C2.multiply(v3[0], w2[0]), C2.multiply(v3[1], w2[1]));
            }
            l3 = (e3 = e3.toUnitMultiplier(true)).isOne() ? e3 : ge(e3.power.toString()) ? C2.pow(e3.clone(), new Fe(0.5)) : C2.symfunction(z, [e3]), u3 < 0 && l3.power.negate(), i3 && (l3 = C2.multiply(i3, l3)), n4 && (l3 = C2.multiply(n4, l3));
          }
          else e3.setPower(e3.power.multiply(new De(0.5))), l3 = e3;
          return t3 && D.PARSE2NUMBER ? C2.parse(l3) : l3;
        }
        function i2(e3) {
          if (e3.isConstant(true)) return s2(e3, new Fe(3));
          var t3, n4 = e3.power / 3, r3 = C2.pow(C2.parse(e3.multiplier), new Fe(1 / 3)), e3 = e3.toUnitMultiplier();
          return ue(n4) ? t3 = C2.pow(e3.toLinear(), C2.parse(n4)) : e3.group === X ? (t3 = new Fe(1), e3.each(function(e4) {
            t3 = C2.multiply(t3, i2(e4));
          })) : t3 = C2.symfunction("cbrt", [e3]), C2.multiply(r3, t3);
        }
        function s2(e3, t3, n4, r3) {
          if ((t3 = Se(C2.parse(t3))).equals(0)) throw new Ae("Unable to calculate nthroots of zero");
          if (e3 < 0 && ge(t3)) throw new Error("Cannot calculate nthroot of negative number for even powers");
          if (!e3.isConstant(true)) return C2.symfunction("nthroot", arguments);
          void 0 === r3 && (r3 = true), n4 = n4 || 25;
          var i3 = (e3 = e3.group !== F ? Se(e3) : e3).sign();
          if (i3 < 0 && (e3 = _2(e3)), ue(e3) && t3.isConstant()) {
            var s3, t3 = e3 < 18446744073709552e3 ? De.create(Math.pow(e3, 1 / t3)) : Te.nthroot(e3, t3);
            return r3 && (s3 = new Fe(t3)), s3 = new Fe(t3.toDecimal(n4)), C2.multiply(new Fe(i3), s3);
          }
        }
        function N2(e3) {
          if (e3.greaterThan(9999999999998891e26) || e3.equals(-1)) return e3;
          if (e3.equals(Math.PI)) return new Fe(Math.PI);
          if ((e3 = Se(e3.clone())).isConstant()) {
            var t3 = new Fe(1), n4 = e3.toString();
            if (ue(n4)) {
              var r3, i3 = Te.ifactor(n4);
              for (r3 in i3) var s3 = i3[r3], t3 = C2.multiply(t3, C2.symfunction("parens", [new Fe(r3).setPower(new De(s3))]));
            } else {
              n4 = N2(new Fe(e3.multiplier.num)), e3 = N2(new Fe(e3.multiplier.den));
              t3 = C2.multiply(C2.symfunction("parens", [n4]), C2.symfunction("parens", [e3]).invert());
            }
          } else t3 = C2.symfunction("pfactor", arguments);
          return t3;
        }
        function l2(e3) {
          return e3.realpart();
        }
        function c2(e3) {
          return e3.imagpart();
        }
        function p2(e3) {
          var t3 = e3.realpart(), e3 = e3.imagpart();
          return C2.add(t3, C2.multiply(e3.negate(), Fe.imaginary()));
        }
        function f2(e3) {
          var t3 = e3.realpart(), e3 = e3.imagpart();
          return t3.isConstant() && e3.isConstant() ? new Fe(Math.atan2(e3, t3)) : C2.symfunction("atan2", [e3, t3]);
        }
        function f2(e3) {
          var t3 = e3.realpart(), e3 = e3.imagpart();
          return t3.isConstant() && e3.isConstant() ? e3.equals(0) && t3.equals(-1) ? C2.parse("pi") : e3.equals(1) && t3.equals(0) ? C2.parse("pi/2") : e3.equals(1) && t3.equals(1) ? C2.parse("pi/4") : new Fe(Math.atan2(e3, t3)) : C2.symfunction("atan2", [e3, t3]);
        }
        function h2(e3, t3) {
          var n4, r3;
          for (t3.map(function(e4) {
            e4.numVal = Se(e4).multiplier;
          }); ; ) {
            if ((r3 = t3.length) < 2) return t3[0];
            n4 = t3.pop(), r3 = t3[r3 - 2], ("min" === e3 ? n4.numVal < r3.numVal : n4.numVal > r3.numVal) && (t3.pop(), t3.push(n4));
          }
        }
        function R2(e3, t3) {
          if (e3.equals(1)) return new Fe(0);
          var n4, r3, i3;
          if (e3.fname === z && e3.multiplier.equals(1)) return n4 = C2.divide(R2(e3.args[0]), new Fe(2)), e3.power.sign() < 0 && n4.negate(), n4;
          if (e3.equals(0)) throw new Ae(D.LOG + "(0) is undefined!");
          return e3.isImaginary() ? b2.evaluate(e3, D.LOG) : (e3.isConstant() && void 0 !== t3 && t3.isConstant() ? n4 = new Fe(Math.log(e3) / Math.log(t3)) : e3.group === V && e3.power.multiplier.lessThan(0) || "-1" === e3.power.toString() ? (e3.power.negate(), n4 = R2(e3).negate()) : "e" === e3.value && e3.multiplier.equals(1) ? (t3 = e3.power, n4 = ne(t3) ? t3 : new Fe(t3)) : e3.group === H && "exp" === e3.fname ? (i3 = e3.args[0], n4 = e3.multiplier.equals(1) ? C2.multiply(i3, new Fe(e3.power)) : C2.symfunction(D.LOG, [e3])) : D.PARSE2NUMBER && oe(e3) ? ((e3 = C2.parse(e3)).multiplier.lessThan(0) && (e3.negate(), r3 = C2.multiply(new Fe(Math.PI), new Fe("i"))), n4 = new Fe(Math.log(e3.multiplier.toDecimal())), r3 && (n4 = C2.add(n4, r3))) : (e3.power.equals(1) || e3.contains("e") || (i3 = e3.group === V ? e3.power : new Fe(e3.power), e3.toLinear()), n4 = 1 < arguments.length && w(arguments) ? new Fe(1) : C2.symfunction(D.LOG, arguments), i3 && (n4 = C2.multiply(i3, n4))), n4);
        }
        function m2(e3, t3) {
          var n4 = t3 && t3.isConstant() || void 0 === t3;
          if (e3.isConstant() && n4) {
            var r3, n4 = e3;
            return t3 && t3.lessThan(0) && (t3 = _2(t3), n4 = (r3 = Number(e3).toExponential().toString().split("e"))[0], r3 = r3[1]), t3 = new Fe(me(n4, Number(t3 || 0))), C2.multiply(t3, C2.pow(new Fe(10), new Fe(r3 || 0)));
          }
          return C2.symfunction("round", arguments);
        }
        function g2(e3) {
          e3 %= 2;
          return 0 <= (e3 = e3 < 0 ? 2 + e3 : e3) && e3 <= 0.5 ? 1 : 0.5 < e3 && e3 <= 1 ? 2 : 1 < e3 && e3 <= 1.5 ? 3 : 4;
        }
        function d2(t3) {
          if (!isFinite(t3)) {
            var e3 = Math.sign(t3), n4 = new Fe(String(Math.abs(t3)));
            return n4.multiplier = n4.multiplier.multiply(new De(e3)), n4;
          }
          if (ne(t3)) return t3;
          if ("number" == typeof t3) try {
            t3 = De.simple(t3);
          } catch (e4) {
            t3 = new De(t3);
          }
          n4 = new Fe(0);
          return n4.multiplier = t3, n4;
        }
        function T2(e3, t3) {
          if (Array.isArray(e3)) return e3.map(function(e4) {
            return T2(e4, t3);
          });
          if (t3 = t3 || {}, e3.group === H && "" === e3.fname) {
            var n4 = T2(e3.args[0], t3), r3 = T2(C2.pow(n4, C2.parse(e3.power)), t3);
            return C2.multiply(C2.parse(e3.multiplier), r3).distributeMultiplier();
          }
          if (-1 !== [F, B, G].indexOf(e3.group)) return e3;
          r3 = e3.clone();
          try {
            var i3, s3, o3, a3 = e3.multiplier.toString(), u3 = Number(e3.power), l3 = e3;
            if (e3.isComposite() && ue(e3.power) && 0 < e3.power) {
              var c3 = u3 - 1, n4 = new Fe(0);
              e3.each(function(e4) {
                n4 = C2.add(n4, T2(C2.parse(e4), t3));
              });
              for (var p3 = C2.parse(n4), f3 = 0; f3 < c3; f3++) p3 = Ee(p3, n4, t3);
              l3 = C2.multiply(C2.parse(a3), p3).distributeMultiplier();
            } else e3.group === H && true === t3.expand_functions ? (i3 = [], e3.args.forEach(function(e4) {
              i3.push(T2(e4, t3));
            }), l3 = C2.pow(C2.symfunction(e3.fname, i3), C2.parse(e3.power)), l3 = C2.multiply(l3, C2.parse(e3.multiplier))) : e3.isComposite() && ue(e3.power) && e3.power < 0 && true === t3.expand_denominator ? (e3 = e3.invert(), (l3 = T2(e3, t3)).invert()) : e3.group === X ? (s3 = function(e4) {
              switch (e4.group) {
                case $:
                  return 0;
                case j:
                  return 1;
                case X:
                  return 2;
                case H:
                  return 3;
                default:
                  return 4;
              }
            }, o3 = e3.collectSymbols().sort(function(e4, t4) {
              return s3(t4) - s3(e4);
            }).map(function(e4) {
              return T2(C2.pow(e4, C2.parse(u3)), t3);
            }), n4 = o3.pop(), (l3 = n4.isComposite() && n4.isLinear() ? (o3.forEach(function(e4) {
              n4 = Ee(n4, e4, t3);
            }), n4.isComposite() ? (1 < n4.power && (n4 = T2(C2.pow(n4, C2.parse(n4.power)), t3)), C2.multiply(C2.parse(a3), n4).distributeMultiplier()) : n4) : (l3 = n4, o3.forEach(function(e4) {
              l3 = C2.multiply(l3, e4);
            }), C2.multiply(l3, C2.parse(a3)).distributeMultiplier())).group === X && (l3 = C2.parse(l3))) : l3 = e3;
            return l3;
          } catch (e4) {
            return r3;
          }
          return r3;
        }
        function P2(e3) {
          if (ne(e3.power) || !e3.power.absEquals(0.5)) return e3;
          var t3 = e3.power.sign(), e3 = O2(e3.group === B ? new Fe(e3.value) : e3.toLinear());
          return t3 < 0 && e3.invert(), e3;
        }
        this.toTeX = function(e3, t3) {
          var n4 = true === (t3 = t3 || {}).decimals ? "decimals" : void 0, r3 = "string" == typeof e3 ? this.toObject(e3) : e3, i3 = [], s3 = void 0 === t3.cdot ? "\\cdot" : t3.cdot, r3 = function(e4) {
            for (var t4 = []; e4.length; ) {
              var n5, r4, i4 = e4.shift(), s4 = e4[0], o4 = ae(s4), a4 = "-" === s4;
              "^" === i4 && ("+" === s4 ? e4.shift() : o4 && "+" === s4[0] && s4.shift(), o4 && 1 === s4.length && e4.unshift(e4.shift()[0])), "^" === i4 && (o4 && "-" === s4[0] || a4) ? (n5 = t4.pop(), r4 = "1", "*" === (a4 = t4[t4.length - 1]) ? (t4.pop(), r4 = t4.pop()) : ae(a4) && (r4 = t4.pop()), t4.push(r4, "/", n5, i4), (o4 ? s4 : e4).shift(), o4 && 1 === s4.length && t4.push(e4.shift()[0])) : t4.push(i4);
            }
            return t4;
          }(r3);
          if (ae(r3)) {
            for (var o3, a3, u3 = [], l3 = 0; l3 < r3.length; l3++) o3 = r3[l3], "^" === r3[l3 + 1] ? (a3 = r3[l3 + 2], u3.push(Ge.braces(this.toTeX([o3])) + "^" + Ge.braces(this.toTeX([a3]))), l3 += 2) : u3.push(o3);
            r3 = u3;
          }
          for (var l3 = 0, c3 = r3.length; l3 < c3; l3++) {
            var p3 = r3[l3];
            if (ne(p3 = "*" === p3 ? s3 : p3)) if (p3.group === H) {
              var f3, h3 = p3.fname;
              if (h3 === z) g3 = "\\sqrt" + Ge.braces(this.toTeX(p3.args));
              else if (h3 === Q) g3 = Ge.brackets(this.toTeX(p3.args), "abs");
              else if (h3 === Z) g3 = Ge.brackets(this.toTeX(p3.args), "parens");
              else if (h3 === D.LOG10) g3 = "\\" + D.LOG10_LATEX + "\\left( " + this.toTeX(p3.args) + "\\right)";
              else if ("integrate" === h3) var m3 = S2(p3.args), g3 = "\\int " + (d3 = Ge.braces(this.toTeX(m3[0]))) + "\\, d" + (v3 = this.toTeX(m3[1]));
              else if ("defint" === h3) {
                var m3 = S2(p3.args), d3 = Ge.braces(this.toTeX(m3[0])), v3 = this.toTeX(m3[3]);
                g3 = "\\int\\limits_{" + this.toTeX(m3[1]) + "}^{" + this.toTeX(m3[2]) + "} " + d3 + "\\, d" + v3;
              } else if ("diff" === h3) {
                m3 = S2(p3.args), v3 = "", d3 = Ge.braces(this.toTeX(m3[0]));
                if (1 === m3.length) {
                  for (var w2 = [], y2 = 0; y2 < m3[0].length; y2++) 3 === m3[0][y2].group && w2.push(m3[0][y2].value);
                  w2.sort(), v3 = 0 < w2.length ? "\\frac{d}{d " + w2[0] + "}" : "\\frac{d}{d x}";
                } else v3 = 2 === m3.length ? "\\frac{d}{d " + m3[1] + "}" : "\\frac{d^{" + m3[2] + "}}{d " + this.toTeX(m3[1]) + "^{" + m3[2] + "}}";
                g3 = v3 + "\\left(" + d3 + "\\right)";
              } else if ("sum" === h3 || "product" === h3) {
                var b3 = [[], [], [], []], y2 = 0;
                for (l3 = 0; l3 < p3.args.length; l3++) "," !== p3.args[l3] ? b3[y2].push(p3.args[l3]) : y2++;
                g3 = ("sum" === h3 ? "\\sum_" : "\\prod_") + Ge.braces(this.toTeX(b3[1]) + " = " + this.toTeX(b3[2])), g3 += "^" + Ge.braces(this.toTeX(b3[3])) + Ge.braces(this.toTeX(b3[0]));
              } else g3 = "limit" === h3 ? (f3 = S2(p3.args).map(function(e4) {
                return Array.isArray(e4) ? C2.toTeX(e4.join("")) : C2.toTeX(String(e4));
              }), "\\lim_" + Ge.braces(f3[1] + "\\to " + f3[2]) + " " + Ge.braces(f3[0])) : h3 === Y || h3 === W ? this.toTeX(p3.args) + (h3 === Y ? "!" : "!!") : Ge.latex(p3, n4);
              i3.push(g3);
            } else i3.push(Ge.latex(p3, n4));
            else ae(p3) ? i3.push(Ge.brackets(this.toTeX(p3))) : "/" === p3 ? i3.push(Ge.frac(M2(i3.pop()), M2(this.toTeX([r3[++l3]])))) : i3.push(p3);
          }
          return i3.join(" ");
        }, this.expand = T2, this.round = m2, this.clean = function t3(e3) {
          var n4, r3, i3, s3, o3, a3, u3, l3 = e3.group;
          return l3 === $ ? (r3 = e3.getNum(), i3 = e3.getDenom() || new Fe(1), s3 = Number(e3.power), o3 = new Fe(1), 1 === Math.abs(s3) && (i3.each(function(e4) {
            e4.group === X ? o3 = C2.multiply(o3, t3(e4.getDenom())) : e4.power.lessThan(0) && (o3 = C2.multiply(o3, t3(e4.clone().toUnitMultiplier())));
          }), a3 = new Fe(0), i3.each(function(e4) {
            a3 = C2.add(C2.divide(e4, o3.clone()), a3);
          }), o3.invert(), r3.isComposite() ? (u3 = new Fe(0), r3.each(function(e4) {
            u3 = C2.add(C2.multiply(t3(e4), o3.clone()), u3);
          })) : u3 = C2.multiply(o3, r3), n4 = C2.divide(u3, a3))) : l3 === X ? (n4 = new Fe(1), e3.each(function(e4) {
            n4 = C2.multiply(n4, C2.clean(e4));
          })) : l3 === H && 1 === e3.args.length && e3.args[0].isConstant() && (n4 = ye("PARSE2NUMBER", function() {
            return C2.parse(e3);
          }, true)), n4 = n4 || e3;
        }, this.sqrt = O2, this.cbrt = i2, this.abs = _2, this.log = R2, this.rationalize = r2, this.nthroot = s2, this.arg = f2, this.conjugate = p2, this.imagpart = c2, this.realpart = l2, this.getFunction = function(e3) {
          return U2[e3][0];
        }, this.addPreprocessor = function(e3, t3, n4, r3) {
          var i3 = o2.names, s3 = o2.actions;
          if ("function" != typeof t3) throw new PreprocessorError("Incorrect parameters. Function expected!");
          n4 ? r3 ? (i3.splice(n4, 0, e3), s3.splice(n4, 0, t3)) : (i3[n4] = e3, s3[n4] = t3) : (i3.push(e3), s3.push(t3));
        }, this.getPreprocessors = function() {
          for (var e3 = {}, t3 = 0, n4 = e3.names.length; t3 < n4; t3++) e3[e3.names[t3]] = { order: t3, action: e3.actions[t3] };
          return e3;
        }, this.removePreprocessor = function(e3, t3) {
          e3 = o2.names.indexOf(e3);
          t3 ? (we(o2.names, e3), we(o2.actions, e3)) : (o2.names[e3] = void 0, o2.actions[e3] = void 0);
        }, this.mapped_function = function() {
          for (var e3 = {}, t3 = this.params, n4 = 0; n4 < t3.length; n4++) e3[t3[n4]] = String(arguments[n4]);
          return C2.parse(this.body, e3);
        }, this.add = function(i3, n4) {
          var e3 = ne(i3), t3 = ne(n4);
          if (e3 && t3) {
            if (i3.unit || n4.unit) return C2.Unit.add(i3, n4);
            if (i3.isInfinity || n4.isInfinity) {
              var r3 = i3.multiplier.lessThan(0), s3 = n4.multiplier.lessThan(0);
              if (i3.isInfinity && n4.isInfinity && r3 !== s3) throw new Ae("(" + i3 + ")+(" + n4 + ") is not defined!");
              var o3 = Fe.infinity();
              return s3 && o3.negate(), o3;
            }
            if (i3.isComposite() && i3.isLinear() && n4.isComposite() && n4.isLinear() && (i3.distributeMultiplier(), n4.distributeMultiplier(), n4.length > i3.length && i3.group === n4.group && ([i3, n4] = [n4, i3])), i3.multiplier.equals(0)) return n4;
            if (n4.multiplier.equals(0)) return i3;
            if (i3.isConstant() && n4.isConstant() && D.PARSE2NUMBER) return h3 = new Fe(i3.multiplier.add(n4.multiplier).toDecimal(D.PRECISION));
            var a3 = i3.group, u3 = n4.group, l3 = i3.power.toString(), c3 = n4.power.toString();
            if (a3 < u3 || a3 === u3 && c3 < l3 && 0 < c3) return this.add(n4, i3);
            a3 === X && u3 === j && i3.value === n4.value && (w2 = i3, a3 = (i3 = n4).group, u3 = (n4 = w2).group, l3 = i3.power.toString(), c3 = n4.power.toString());
            var p3, f3, h3, m3 = l3 === c3, r3 = i3.value, s3 = n4.value, o3 = i3.isComposite(), l3 = n4.isComposite();
            if (o3 && (p3 = Pe(i3, "hash")), l3 && (f3 = Pe(n4, "hash")), a3 === $ && u3 === $ && n4.isLinear() && !i3.isLinear() && p3 !== f3) return this.add(n4, i3);
            a3 === j && u3 === j && (r3 = p3, s3 = f3);
            var g3, c3 = a3 === B && u3 === F, l3 = i3.value === n4.multiplier.toString(), l3 = r3 === s3 || p3 === f3 && void 0 !== p3 || c3 && l3;
            if (l3 && m3 && a3 === u3) if (c3 && (n4 = n4.convert(B)), a3 !== j || u3 !== G && u3 !== B) if ((h3 = i3).multiplier.isOne() && n4.multiplier.isOne() && a3 === $ && i3.isLinear() && n4.isLinear()) for (var d3 in n4.symbols) {
              var v3 = n4.symbols[d3];
              h3.attach(v3);
            }
            else h3.multiplier = h3.multiplier.add(n4.multiplier);
            else i3.distributeMultiplier(), h3 = i3.attach(n4);
            else if (l3 && a3 !== j) a3 === $ && u3 === j ? (n4.insert(i3, "add"), h3 = n4) : (h3 = Fe.shell(j).attach([i3, n4])).value = a3 === j ? p3 : r3;
            else if (o3 && i3.isLinear()) {
              r3 = a3 === u3, o3 = a3 === j && u3 === j;
              if (o3 && (r3 = i3.value === n4.value), i3.distributeMultiplier(), n4.isComposite() && n4.isLinear() && r3) {
                for (var d3 in n4.distributeMultiplier(), n4.symbols) {
                  v3 = n4.symbols[d3];
                  i3.attach(v3);
                }
                h3 = i3;
              } else o3 && i3.value !== f3 || a3 === j && !l3 ? (h3 = Fe.shell($).attach([i3, n4])).updateHash() : h3 = i3.attach(n4);
            } else a3 === H && i3.fname === z && u3 !== V && n4.power.equals(0.5) && (g3 = n4.multiplier.clone(), (n4 = O2(n4.toUnitMultiplier().toLinear())).multiplier = g3), 2 === i3.length && 2 === n4.length && ge(i3.power) && ge(n4.power) ? h3 = C2.add(T2(i3), T2(n4)) : (h3 = Fe.shell($).attach([i3, n4])).updateHash();
            return 1 === (h3 = h3.multiplier.equals(0) ? new Fe(0) : h3).length && (g3 = h3.multiplier, (h3 = pe(h3.symbols)).multiplier = h3.multiplier.multiply(g3)), h3;
          }
          t3 && !e3 && (w2 = i3, i3 = n4, n4 = w2, w2 = t3, t3 = e3, e3 = w2);
          var w2 = ie(n4);
          if (e3 && w2) {
            var y2 = new He();
            n4.eachElement(function(e4, t4, n5) {
              y2.set(t4, n5, C2.add(i3.clone(), e4));
            }), n4 = y2;
          } else if (ie(i3) && w2) n4 = i3.add(n4);
          else if (e3 && re(n4)) n4.each(function(e4, t4) {
            n4.elements[--t4] = C2.add(i3.clone(), n4.elements[t4]);
          });
          else if (re(i3) && re(n4)) n4.each(function(e4, t4) {
            n4.elements[--t4] = C2.add(i3.elements[t4], n4.elements[t4]);
          });
          else {
            if (re(i3) && ie(n4)) return C2.add(n4, i3);
            if (ie(i3) && re(n4)) {
              if (n4.elements.length === i3.rows()) {
                var y2 = new He(), b3 = i3.cols();
                return n4.each(function(e4, t4) {
                  for (var n5 = [], r4 = 0; r4 < b3; r4++) n5.push(C2.add(i3.elements[t4 - 1][r4].clone(), e4.clone()));
                  y2.elements.push(n5);
                }), y2;
              }
              K("Dimensions must match!");
            }
          }
          return n4;
        }, this.subtract = function(i3, r3) {
          var e3 = ne(i3), t3 = ne(r3);
          if (e3 && t3) return i3.unit || r3.unit ? C2.Unit.subtract(i3, r3) : this.add(i3, r3.negate());
          if (t3 && re(i3)) r3 = i3.map(function(e4) {
            return C2.subtract(e4, r3.clone());
          });
          else if (e3 && re(r3)) r3 = r3.map(function(e4) {
            return C2.subtract(i3.clone(), e4);
          });
          else if (re(i3) && re(r3)) i3.dimensions() === r3.dimensions() ? r3 = i3.subtract(r3) : C2.error("Unable to subtract vectors. Dimensions do not match.");
          else if (ie(i3) && re(r3)) {
            if (r3.elements.length === i3.rows()) {
              var s3 = new He(), o3 = i3.cols();
              return r3.each(function(e4, t4) {
                for (var n4 = [], r4 = 0; r4 < o3; r4++) n4.push(C2.subtract(i3.elements[t4 - 1][r4].clone(), e4.clone()));
                s3.elements.push(n4);
              }), s3;
            }
            K("Dimensions must match!");
          } else {
            if (re(i3) && ie(r3)) {
              var s3 = r3.clone().negate();
              return C2.add(s3, i3);
            }
            ie(i3) && ie(r3) ? r3 = i3.subtract(r3) : ie(i3) && t3 ? (s3 = new He(), i3.each(function(e4, t4, n4) {
              s3.set(t4, n4, C2.subtract(e4, r3.clone()));
            }), r3 = s3) : e3 && ie(r3) && (s3 = new He(), r3.each(function(e4, t4, n4) {
              s3.set(t4, n4, C2.subtract(i3.clone(), e4));
            }), r3 = s3);
          }
          return r3;
        }, this.multiply = function(i3, n4) {
          var e3 = ne(i3), t3 = ne(n4);
          if (e3 && n4 instanceof L2) return n4.elements.push(i3), n4;
          if (e3 && t3) {
            if (n4.isUnit) {
              var r3 = i3.clone();
              return i3.unit = n4, r3;
            }
            if (i3.unit || n4.unit) return C2.Unit.multiply(i3, n4);
            if (i3.isInfinity || n4.isInfinity) {
              if (i3.equals(0) || n4.equals(0)) throw new Ae(i3 + "*" + n4 + " is undefined!");
              if (n4.power.lessThan(0)) {
                if (i3.isInfinity) throw new Ae("Infinity/Infinity is not defined!");
                return new Fe(0);
              }
              var s3 = i3.multiplier.multiply(n4.multiplier).sign(), o3 = Fe.infinity();
              if (i3.isConstant() || n4.isConstant() || i3.isInfinity && n4.isInfinity) return s3 < 0 && o3.negate(), o3;
            }
            if (i3.isConstant() && n4.isConstant() && D.PARSE2NUMBER) return new Fe(p3 = new k(i3.multiplier.toDecimal()).times(new k(n4.multiplier.toDecimal())).toFixed());
            if (i3.isOne()) return n4.clone();
            if (n4.isOne()) return i3.clone();
            if (i3.multiplier.equals(0) || n4.multiplier.equals(0)) return new Fe(0);
            if (n4.group > i3.group && n4.group !== $) return this.multiply(n4, i3);
            i3.group === X && n4.group === j && i3.value === n4.value && (p3 = i3, i3 = n4, n4 = p3);
            var a3 = i3.group, u3 = n4.group, l3 = n4.multiplier.num, c3 = n4.multiplier.den;
            a3 !== H || i3.fname !== z || n4.isConstant() || i3.args[0].value !== n4.value || i3.args[0].multiplier.lessThan(0) ? a3 === H && i3.fname === z && i3.multiplier.equals(1) && i3.power.equals(-1) && n4.isConstant() && i3.args[0].equals(n4) && (i3 = C2.symfunction(z, [n4.clone()]), n4 = new Fe(1)) : (m3 = i3.power, h3 = C2.parse(i3.multiplier), (i3 = C2.multiply(h3, i3.args[0].clone())).setPower(new De(0.5).multiply(m3)), a3 = i3.group);
            var p3, f3 = i3.value, o3 = n4.value, s3 = new De(i3.sign()), h3 = a3 === B && u3 === F && n4.multiplier.equals(i3.value), m3 = (h3 ? new De(1).multiply(i3.multiplier) : i3.multiplier.multiply(n4.multiplier)).abs(), r3 = i3.clone().toUnitMultiplier();
            if (n4 = n4.clone().toUnitMultiplier(true), a3 === H && u3 === H) {
              var g3 = i3.args[0].clone(), d3 = n4.args[0].clone();
              if (i3.fname === z && n4.fname === z && i3.isLinear() && n4.isLinear()) {
                var v3 = C2.divide(g3, d3).invert();
                v3.gt(1) && ue(v3) && (r3 = C2.multiply(i3.args[0].clone(), O2(v3.clone())), n4 = new Fe(1));
              } else if (i3.fname === Y && n4.fname === Y && !g3.isConstant() && !d3.isConstant() && n4.power < 0) {
                v3 = C2.subtract(g3.clone(), d3.clone());
                if (v3.isConstant()) if (p3 = new Fe(1), v3 < 0) {
                  for (var w2 = 0, y2 = Math.abs(v3); w2 <= y2; w2++) {
                    var b3 = C2.add(g3.clone(), new Fe(w2));
                    p3 = C2.multiply(p3, b3);
                  }
                  r3 = C2.multiply(C2.pow(g3, new Fe(i3.power)), C2.pow(p3, new Fe(n4.power))), n4 = new Fe(1);
                } else {
                  for (w2 = 0, y2 = Math.abs(v3); w2 <= y2; w2++) {
                    b3 = C2.add(d3.clone(), new Fe(w2));
                    p3 = C2.multiply(p3, b3);
                  }
                  r3 = C2.multiply(C2.pow(p3, new Fe(i3.power)), C2.pow(d3, new Fe(n4.power))), n4 = new Fe(1);
                }
              }
            }
            if (f3 === o3 && a3 === j && a3 === u3 && (f3 = i3.text("hash"), o3 = n4.text("hash")), (f3 = u3 === V && n4.previousGroup === j && a3 === j ? Pe(i3, "hash", V) : f3) !== o3 && !h3 || a3 === j && (u3 === G || u3 === B || u3 === H) || a3 === j && u3 === X) if (a3 === X && i3.isLinear()) if (u3 === X && n4.distributeExponent(), u3 === X && n4.isLinear()) {
              for (var b3 in n4.symbols) {
                var S3 = n4.symbols[b3];
                r3 = r3.combine(S3);
              }
              r3.multiplier = r3.multiplier.multiply(n4.multiplier);
            } else r3.combine(n4);
            else a3 !== F ? a3 === X ? (r3.distributeExponent(), r3.combine(n4)) : n4.isOne() || (E3 = n4.multiplier.clone(), n4.toUnitMultiplier(), (r3 = Fe.shell(X).combine([r3, n4])).multiplier = r3.multiplier.multiply(E3)) : r3 = n4.clone().toUnitMultiplier();
            else {
              var M3 = i3.power, N3 = n4.power, E3 = ne(M3), q3 = ne(N3), q3 = E3 || q3;
              a3 === j && u3 !== j && n4.previousGroup !== j && M3.equals(1) ? (r3 = new Fe(0), i3.each(function(e4) {
                r3 = C2.add(r3, C2.multiply(e4, n4.clone()));
              }, true)) : (r3.power = q3 ? C2.add(ne(M3) ? M3 : new Fe(M3), ne(N3) ? N3 : new Fe(N3)) : a3 === F ? M3 : M3.add(N3), r3.power.equals(0) && (r3 = r3.convert(F)), q3 && r3.convert(V), i3.imaginary && n4.imaginary && ge(r3.power % 2) && (r3 = new Fe(1), m3.negate()), r3.group !== V && r3.previousGroup && (r3.previousGroup = void 0), r3.multiplier = r3.multiplier.multiply(n4.multiplier));
            }
            r3.group === B && (a3 = Math.log(r3.value), M3 = Math.log(l3) / a3, N3 = Math.log(c3) / a3, q3 = m3.num / l3, a3 = m3.den / c3, 0 != M3 && ue(M3) && ue(q3) && (r3.power = r3.power.add(new De(M3)), m3.num /= l3), 0 != N3 && ue(N3) && ue(a3) && (r3.power = r3.power.subtract(new De(N3)), m3.den /= c3)), 1 === r3.length && (p3 = r3.multiplier, (r3 = pe(r3.symbols)).multiplier = r3.multiplier.multiply(p3));
            c3 = r3.power.toString();
            return ge(c3) && r3.fname === z ? (s3 *= r3.sign(), c3 = r3.power, r3 = r3.args[0], r3 = C2.multiply(new Fe(m3), C2.pow(r3, new Fe(c3.divide(new De(2))))), s3 < 0 && r3.negate()) : (r3.multiplier = r3.multiplier.multiply(m3).multiply(s3), r3.group === $ && r3.isImaginary() && r3.distributeMultiplier()), r3 = r3.group === B && ue(r3.power.toDecimal()) ? r3.convert(F) : r3;
          }
          t3 && !e3 && (p3 = i3, i3 = n4, n4 = p3, p3 = t3, t3 = e3, e3 = p3);
          s3 = ie(n4), t3 = ie(i3);
          if (e3 && s3) {
            var x3 = new He();
            n4.eachElement(function(e4, t4, n5) {
              x3.set(t4, n5, C2.multiply(i3.clone(), e4));
            }), n4 = x3;
          } else if (t3 && s3) n4 = i3.multiply(n4);
          else if (e3 && re(n4)) n4.each(function(e4, t4) {
            n4.elements[--t4] = C2.multiply(i3.clone(), n4.elements[t4]);
          });
          else if (re(i3) && re(n4)) n4.each(function(e4, t4) {
            n4.elements[--t4] = C2.multiply(i3.elements[t4], n4.elements[t4]);
          });
          else {
            if (re(i3) && ie(n4)) return this.multiply(n4, i3);
            if (ie(i3) && re(n4)) {
              if (n4.elements.length === i3.rows()) {
                var x3 = new He(), A3 = i3.cols();
                return n4.each(function(e4, t4) {
                  for (var n5 = [], r4 = 0; r4 < A3; r4++) n5.push(C2.multiply(i3.elements[t4 - 1][r4].clone(), e4.clone()));
                  x3.elements.push(n5);
                }), x3;
              }
              K("Dimensions must match!");
            }
          }
          return n4;
        }, this.divide = function(r3, i3) {
          var e3 = ne(r3), t3 = ne(i3);
          if (e3 && t3) {
            if (r3.unit || i3.unit) return C2.Unit.divide(r3, i3);
            if (i3.equals(0)) throw new qe("Division by zero not allowed!");
            return r3.isConstant() && i3.isConstant() ? (n4 = r3.clone()).multiplier = n4.multiplier.divide(i3.multiplier) : (i3.invert(), n4 = C2.multiply(r3, i3)), n4;
          }
          var n4, s3, o3 = re(r3), a3 = re(i3);
          return e3 && a3 ? i3 = i3.map(function(e4) {
            return C2.divide(r3.clone(), e4);
          }) : o3 && t3 ? i3 = r3.map(function(e4) {
            return C2.divide(e4, i3.clone());
          }) : o3 && a3 ? r3.dimensions() === i3.dimensions() ? i3 = i3.map(function(e4, t4) {
            return C2.divide(r3.elements[--t4], e4);
          }) : C2.error("Cannot divide vectors. Dimensions do not match!") : (n4 = ie(r3), o3 = ie(i3), n4 && t3 ? (s3 = new He(), r3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.divide(e4, i3.clone()));
          }), i3 = s3) : e3 && o3 ? (s3 = new He(), i3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.divide(r3.clone(), e4));
          }), i3 = s3) : n4 && o3 ? (s3 = new He(), r3.rows() === i3.rows() && r3.cols() === i3.cols() ? (r3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.divide(e4, i3.elements[t4][n5]));
          }), i3 = s3) : C2.error("Dimensions do not match!")) : n4 && a3 && (r3.cols() === i3.dimensions() ? (s3 = new He(), r3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.divide(e4, i3.elements[t4].clone()));
          }), i3 = s3) : C2.error("Unable to divide matrix by vector."))), i3;
        }, this.pow = function(r3, i3) {
          var s3, e3 = ne(r3), t3 = ne(i3);
          if (e3 && t3) {
            if (r3.unit || i3.unit) return C2.Unit.pow(r3, i3);
            if (r3.group === H && r3.fname === Q && ge(i3)) {
              var n4 = r3.multiplier.clone(), o3 = C2.pow(r3.args[0], i3);
              return o3.multiplier = n4, o3;
            }
            if (r3.isInfinity || i3.isInfinity) {
              if (r3.isInfinity && i3.isInfinity) throw new Ae("(" + r3 + ")^(" + i3 + ") is undefined!");
              if (r3.isConstant() && i3.isInfinity) {
                if (r3.equals(0)) {
                  if (i3.lessThan(0)) throw new Ae("0^Infinity is undefined!");
                  return new Fe(0);
                }
                if (r3.equals(1)) throw new Ae("1^" + i3.toString() + " is undefined!");
                if (i3.lessThan(0)) return new Fe(0);
                if (!r3.lessThan(0)) return Fe.infinity();
              }
              if (r3.isInfinity && i3.isConstant()) {
                if (i3.equals(0)) throw new Ae(r3 + "^0 is undefined!");
                return i3.lessThan(0) ? new Fe(0) : C2.multiply(Fe.infinity(), C2.pow(new Fe(r3.sign()), i3.clone()));
              }
            }
            var a3 = r3.equals(0), u3 = i3.equals(0);
            if (a3 && u3) throw new Ae("0^0 is undefined!");
            if (a3 && i3.isConstant() && i3.multiplier.greaterThan(0)) return new Fe(0);
            if (u3) return new Fe(1);
            var l3, c3 = i3.isConstant(), p3 = r3.isConstant(), o3 = i3.isInteger(), n4 = r3.multiplier, a3 = r3.clone();
            if (p3 && c3 && r3.equals(0) && i3.lessThan(0)) throw new Ae("Division by zero is not allowed!");
            if (D.PARSE2NUMBER && p3 && c3 && r3.sign() < 0 && de(i3)) {
              var f3 = Math.PI * i3;
              return b3 = new Fe(Math.cos(f3)), v3 = C2.multiply(Fe.imaginary(), new Fe(Math.sin(f3))), C2.add(b3, v3);
            }
            if (D.PARSE2NUMBER && r3.isImaginary() && c3 && ue(i3) && !i3.lessThan(0)) {
              if (b3 = r3.realpart(), v3 = r3.imagpart(), b3.isConstant("all") && v3.isConstant("all")) return u3 = D.USE_BIG ? Fe(k.atan2(d3.multiplier.toDecimal(), y2.multiplier.toDecimal()).times(i3.toString())) : Math.atan2(v3, b3) * i3, l3 = new Fe(u3), y2 = C2.pow(Fe.hyp(b3, v3), i3), f3 = C2.multiply(y2.clone(), C2.trig.cos(l3.clone())), u3 = C2.multiply(y2, C2.trig.sin(l3)), C2.add(f3, C2.multiply(Fe.imaginary(), u3));
            }
            if (a3.toUnitMultiplier(), a3.group !== H || a3.fname !== z || c3 ? (A3 = n4.sign(), de(i3) && A3 < 0 && (a3.negate(), (a3 = C2.symfunction(Z, [a3])).negate()), a3.multiplyPower(i3)) : ((N3 = a3.args[0]).multiplyPower(new Fe(0.5)), N3.multiplier.multiply(a3.multiplier), N3.multiplyPower(i3), a3 = N3), p3 && c3 && D.PARSE2NUMBER) A3 < 0 && (r3.negate(), m3 = i3.multiplier.den.equals(2) ? new Fe(D.IMAGINARY) : ue(i3.multiplier) ? ge(i3.multiplier) ? new Fe(1) : new Fe(-1) : ge(i3.multiplier.den) ? C2.pow(C2.symfunction(Z, [new Fe(A3)]), i3.clone()) : new Fe(Math.pow(A3, i3.multiplier.num))), a3 = new Fe(Math.pow(r3.multiplier.toDecimal(), i3.multiplier.toDecimal())), m3 && (a3 = C2.multiply(a3, m3));
            else if (o3 && !n4.equals(1)) {
              if (i3.abs().gt(D.MAX_EXP)) return i3.sign() < 0 ? new Fe(0) : Fe.infinity();
              var h3 = i3.multiplier.toDecimal(), m3 = Math.sign(h3);
              h3 = Math.abs(h3);
              var g3 = new De(1);
              g3.num = n4.num.pow(h3), g3.den = n4.den.pow(h3), m3 < 0 && g3.invert(), a3.multiplier = a3.multiplier.multiply(g3);
            } else {
              var d3, v3, w2, y2, b3, S3, M3, N3, E3, q3, x3, A3 = r3.sign();
              i3.isConstant() && r3.isConstant() && !i3.multiplier.den.equals(1) && A3 < 0 ? a3 = i3.multiplier.den.equals(2) ? (d3 = new Fe(D.IMAGINARY), r3.negate(), i3.lessThan(0) && (d3.negate(), i3.negate()), C2.multiply(C2.pow(r3, i3), d3)) : ((w2 = r3.clone()).multiplier.negate(), a3 = C2.pow(C2.symfunction(Z, [new Fe(A3)]), i3.clone()), g3 = C2.pow(new Fe(w2.multiplier.num), i3.clone()), d3 = C2.pow(new Fe(w2.multiplier.den), i3.clone()), y2 = C2.divide(g3, d3), C2.multiply(a3, y2)) : D.PARSE2NUMBER && i3.isImaginary() ? (b3 = i3.realpart(), v3 = i3.imagpart(), w2 = r3.clone().toLinear(), y2 = C2.pow(w2.clone(), b3), E3 = R2(w2.clone()), b3 = I2.cos(C2.multiply(v3.clone(), E3)), E3 = C2.multiply(I2.sin(C2.multiply(v3, R2(w2))), Fe.imaginary()), a3 = C2.multiply(y2, C2.add(b3, E3)), a3 = C2.expand(C2.parse(a3))) : (S3 = P2(new Fe((E3 = r3.group === F && A3 < 0) ? n4.num : Math.abs(n4.num)).setPower(i3.clone())), M3 = P2(new Fe(n4.den).setPower(i3.clone()).invert()), r3.imaginary && (o3 ? (N3 = Math.sign(i3), h3 = _2(i3), a3 = new Fe(ge(q3 = h3 % 4) ? -1 : D.IMAGINARY), (0 === q3 || N3 < 0 && 1 === q3 || 0 < N3 && 3 === q3) && a3.negate()) : (o3 = i3.multiplier.multiply(De.quick(1, 2)), N3 = Math.pow(-1, o3.num), a3 = ge(o3.den) ? new Fe(-1).setPower(o3, true) : new Fe(N3))), A3 < 0 && !E3 && a3.negate(), c3 && r3.group !== V && (A3 = ge(i3.multiplier.den), E3 = ge(r3.power), q3 = a3.power.toDecimal(), c3 = ge(q3), A3 && E3 && !c3 && (a3 = 1 === q3 ? C2.symfunction(Q, [a3]) : ue(q3) ? C2.multiply(C2.symfunction(Q, [a3.clone().toLinear()]), a3.clone().setPower(new De(q3 - 1))) : (h3 = a3.power, C2.symfunction(Q, [a3.toLinear()]).setPower(h3)), D.POSITIVE_MULTIPLIERS && a3.fname === Q && (a3 = a3.args[0]))), i3.equals(2) && a3.group === X && (x3 = new Fe(1), a3.each(function(e4) {
                x3 = C2.multiply(x3, C2.pow(e4, i3));
              }), a3 = x3));
            }
            return a3 = P2(a3), (a3 = S3 && M3 ? C2.multiply(a3, function(e4) {
              if (e4.group === B) {
                var t4 = e4.value, n5 = ke(t4)[0];
                if (!n5) return ee("Unable to compute prime factors. This should not happen. Please review and report."), e4;
                t4 = new De(Math.log(t4) / Math.log(n5)).multiply(e4.power);
                if (t4.den > e4.power.den) return e4;
                e4 = ue(t4) ? Fe(Math.pow(n5, t4)) : new Fe(n5).setPower(t4);
              }
              return e4;
            }(C2.multiply(S3, M3))) : a3).fname === z ? (M3 = ((S3 = a3.group === V) ? a3.power.multiplier : a3.power).toString(), ge(M3) && (S3 = S3 ? C2.divide(a3.power, new Fe(2)) : new Fe(a3.power.divide(new De(2))), n4 = a3.multiplier, (a3 = C2.pow(a3.args[0], S3)).multiplier = a3.multiplier.multiply(n4))) : !D.IGNORE_E && a3.isE() && a3.group === V && a3.power.contains("pi") && a3.power.contains(D.IMAGINARY) && i3.group === X && (l3 = i3.stripVar(D.IMAGINARY), a3 = C2.add(I2.cos(l3), C2.multiply(Fe.imaginary(), I2.sin(l3)))), a3;
          }
          return re(r3) && t3 ? r3 = r3.map(function(e4) {
            return C2.pow(e4, i3.clone());
          }) : ie(r3) && t3 ? (s3 = new He(), r3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.pow(e4, i3.clone()));
          }), r3 = s3) : e3 && ie(i3) && (s3 = new He(), i3.eachElement(function(e4, t4, n5) {
            s3.set(t4, n5, C2.pow(r3.clone(), e4));
          }), r3 = s3), r3;
        }, this.comma = function(e3, t3) {
          return (e3 = !(e3 instanceof L2) ? L2.create(e3) : e3).append(t3), e3;
        }, this.mod = t2, this.slice = function(e3, t3) {
          return new x2(e3, t3);
        }, this.equals = function(e3, t3) {
          return e3.group === G || e3.isLinear() || K("Cannot set equality for " + e3.toString()), J[e3.value] = t3.clone(), t3;
        }, this.percent = function(e3) {
          return C2.divide(e3, new Fe(100));
        }, this.assign = function(e3, n4) {
          if (e3 instanceof L2 && n4 instanceof L2) return e3.elements.map(function(e4, t4) {
            return C2.assign(e4, n4.elements[t4]);
          }), Ve.fromArray(n4.elements);
          if (e3.parent) {
            var t3 = e3.parent;
            return t3.elements[t3.getter] = n4, delete t3.getter, t3;
          }
          if (e3.group !== G) throw new Oe("Cannot complete operation. Incorrect LH value for " + e3);
          return J[e3.value] = n4;
        }, this.function_assign = function(e3, t3) {
          var n4 = e3.elements.pop();
          return fe(n4, e3.elements, t3);
        };
        function v2(e3) {
          return new Fe(true === e3 ? 1 : 0);
        }
        this.eq = function(e3, t3) {
          return v2(e3.equals(t3));
        }, this.gt = function(e3, t3) {
          return v2(e3.gt(t3));
        }, this.gte = function(e3, t3) {
          return v2(e3.gte(t3));
        }, this.lt = function(e3, t3) {
          return v2(e3.lt(t3));
        }, this.lte = function(e3, t3) {
          return v2(e3.lte(t3));
        }, this.factorial = function(e3) {
          return this.symfunction(Y, [e3]);
        }, this.dfactorial = function(e3) {
          return this.symfunction(W, [e3]);
        };
      }
      D.FUNCTION_MODULES.push(Te), x(Te), Math.sign = Math.sign || function(e2) {
        return 0 === (e2 = +e2) || isNaN(e2) ? e2 : 0 < e2 ? 1 : -1;
      }, Math.cosh = Math.cosh || function(e2) {
        e2 = Math.exp(e2);
        return (e2 + 1 / e2) / 2;
      }, Math.sech = Math.sech || function(e2) {
        return 1 / Math.cosh(e2);
      }, Math.csch = Math.csch || function(e2) {
        return 1 / Math.sinh(e2);
      }, Math.coth = Math.coth || function(e2) {
        return 1 / Math.tanh(e2);
      }, Math.sinh = Math.sinh || function(e2) {
        e2 = Math.exp(e2);
        return (e2 - 1 / e2) / 2;
      }, Math.tanh = Math.tanh || function(e2) {
        if (e2 === 1 / 0) return 1;
        if (e2 === -1 / 0) return -1;
        e2 = Math.exp(2 * e2);
        return (e2 - 1) / (e2 + 1);
      }, Math.asinh = Math.asinh || function(e2) {
        return e2 === -1 / 0 ? e2 : Math.log(e2 + Math.sqrt(e2 * e2 + 1));
      }, Math.acosh = Math.acosh || function(e2) {
        return Math.log(e2 + Math.sqrt(e2 * e2 - 1));
      }, Math.atanh = Math.atanh || function(e2) {
        return Math.log((1 + e2) / (1 - e2)) / 2;
      }, Math.log10 = Math.log10 || function(e2) {
        return Math.log(e2) * Math.LOG10E;
      }, Math.trunc = Math.trunc || function(e2) {
        return isNaN(e2) ? NaN : 0 < e2 ? Math.floor(e2) : Math.ceil(e2);
      }, ke(314146179365), R.getExpression = function(e2, t2) {
        "last" !== e2 && e2 || (e2 = p.length);
        e2 = p[(e2 = "first" === e2 ? 1 : e2) - 1];
        return e2 && new R(e2);
      }, (R.prototype = { text: function(e2, t2) {
        return t2 = t2 || D.EXPRESSION_DECP, e2 = e2 || "decimals", this.symbol.text_ ? this.symbol.text_(e2) : Pe(this.symbol, e2, void 0, t2);
      }, latex: function(e2) {
        return this.symbol.latex ? this.symbol.latex(e2) : Ge.latex(this.symbol, e2);
      }, valueOf: function() {
        return this.symbol.valueOf();
      }, evaluate: function() {
        if (re(this.symbol) && 0 === this.symbol.dimensions()) return this;
        var e2, t2 = arguments[0], n3 = 1;
        "string" == typeof t2 ? e2 = "%" === t2.charAt(0) ? R.getExpression(t2.substr(1)).text() : t2 : t2 instanceof R || ne(t2) ? e2 = t2.text() : (e2 = this.symbol.text(), n3--);
        var r2 = arguments[n3] || {};
        return new R(ye("PARSE2NUMBER", function() {
          return d.parse(e2, r2);
        }, true));
      }, buildFunction: function(e2) {
        return Xe.build(this.symbol, e2);
      }, isNumber: function() {
        return oe(this.symbol);
      }, isInfinity: function() {
        return Math.abs(this.symbol.multiplier) === 1 / 0;
      }, isImaginary: function() {
        return Se(d.parse(this.symbol)).isImaginary();
      }, variables: function() {
        return b(this.symbol);
      }, toString: function() {
        try {
          return ae(this.symbol) ? "[" + this.symbol.toString() + "]" : this.symbol.toString();
        } catch (e2) {
          return "";
        }
      }, toDecimal: function(e2) {
        D.precision = e2;
        e2 = Pe(this.symbol, "decimals");
        return D.precision = void 0, e2;
      }, isFraction: function() {
        return v(this.symbol);
      }, isPolynomial: function() {
        return this.symbol.isPoly();
      }, sub: function(e2, t2) {
        return new R(this.symbol.sub(d.parse(e2), d.parse(t2)));
      }, operation: function(e2, t2) {
        return i(t2) ? t2 = t2.symbol : ne(t2) || (t2 = d.parse(t2)), new R(d[e2](this.symbol.clone(), t2.clone()));
      }, add: function(e2) {
        return this.operation("add", e2);
      }, subtract: function(e2) {
        return this.operation("subtract", e2);
      }, multiply: function(e2) {
        return this.operation("multiply", e2);
      }, divide: function(e2) {
        return this.operation("divide", e2);
      }, pow: function(e2) {
        return this.operation("pow", e2);
      }, expand: function() {
        return new R(d.expand(this.symbol));
      }, each: function(e2, t2) {
        if (this.symbol.each) this.symbol.each(e2, t2);
        else if (ae(this.symbol)) for (t2 = 0; t2 < this.symbol.length; t2++) e2.call(this.symbol, this.symbol[t2], t2);
        else e2.call(this.symbol);
      }, eq: function(e2) {
        ne(e2) || (e2 = d.parse(e2));
        try {
          return d.subtract(this.symbol.clone(), e2).equals(0);
        } catch (e3) {
          return false;
        }
      }, lt: function(e2) {
        ne(e2) || (e2 = d.parse(e2));
        try {
          return Se(d.subtract(this.symbol.clone(), e2)).lessThan(0);
        } catch (e3) {
          return false;
        }
      }, gt: function(e2) {
        ne(e2) || (e2 = d.parse(e2));
        try {
          return Se(d.subtract(this.symbol.clone(), e2)).greaterThan(0);
        } catch (e3) {
          return false;
        }
      }, gte: function(e2) {
        return this.gt(e2) || this.eq(e2);
      }, lte: function(e2) {
        return this.lt(e2) || this.eq(e2);
      }, numerator: function() {
        return new R(this.symbol.getNum());
      }, denominator: function() {
        return new R(this.symbol.getDenom());
      }, hasFunction: function(e2) {
        return this.symbol.containsFunction(e2);
      }, contains: function(e2) {
        return this.symbol.contains(e2);
      } }).toTeX = R.prototype.latex, T.prototype = { fromScientific: function(e2) {
        e2 = String(e2).toLowerCase().split("e");
        return this.coeff = e2[0], this.exponent = e2[1], this;
      }, convert: function(e2) {
        var t2 = e2.split("."), n3 = t2[0] || "", r2 = t2[1] || "", n3 = T.removeLeadingZeroes(n3), r2 = T.removeTrailingZeroes(r2), i2 = n3.length, e2 = n3 + r2, t2 = T.leadingZeroes(e2).length;
        this.exponent = i2 - (t2 + 1);
        e2 = T.removeLeadingZeroes(e2);
        this.coeff = e2.charAt(0) + "." + (e2.substr(1, e2.length) || "0");
        e2 = this.coeff.split(".")[1] || "";
        return this.decp = "0" === e2 ? 0 : e2.length, this.dec = r2, this.wholes = n3, this;
      }, round: function(e2) {
        var t2, n3, r2 = this.copy();
        return 0 === (e2 = Number(e2)) ? r2.coeff = r2.coeff.charAt(0) : (t2 = this.coeff.substring(0, e2 + 1), e2 = (n3 = this.coeff.substring(e2 + 1, e2 + 3)).charAt(0), 4 < n3.charAt(1) && e2++, r2.coeff = t2 + e2), r2;
      }, copy: function() {
        var e2 = new T(0);
        return e2.coeff = this.coeff, e2.exponent = this.exponent, e2.sign = this.sign, e2;
      }, toString: function(e2) {
        var t2;
        return t2 = D.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && 0 === this.exponent && this.decp < e2 ? 0 === this.decp ? this.wholes : this.coeff : (t2 = void 0 === e2 ? this.coeff : T.round(this.coeff, Math.min(e2, this.decp || 1)), 0 === this.exponent ? t2 : t2 + "e" + this.exponent), (-1 === this.sign ? "-" : "") + t2;
      } }, T.isScientific = function(e2) {
        return /\d+\.?\d*e[\+\-]*\d+/i.test(e2);
      }, T.leadingZeroes = function(e2) {
        e2 = e2.match(/^(0*).*$/);
        return e2 ? e2[1] : "";
      }, T.removeLeadingZeroes = function(e2) {
        e2 = e2.match(/^0*(.*)$/);
        return e2 ? e2[1] : "";
      }, T.removeTrailingZeroes = function(e2) {
        var t2 = e2.match(/0*$/);
        return t2 ? e2.substring(0, e2.length - t2[0].length) : "";
      }, T.round = function(e2, t2) {
        e2 = me(e2, t2), t2 -= String(e2).split(".").pop().length;
        return 0 < t2 && (e2 += new Array(1 + t2).join(0)), e2;
      }, De.create = function(e2) {
        if (e2 instanceof De) return e2;
        var t2 = "-" === (e2 = e2.toString()).charAt(0), e2 = new De(e2 = t2 ? e2.substr(1, e2.length - 1) : e2);
        return t2 && e2.negate(), e2;
      }, De.isFrac = function(e2) {
        return e2 instanceof De;
      }, De.quick = function(e2, t2) {
        var n3 = new De();
        return n3.num = new S(e2), n3.den = new S(t2), n3;
      }, De.simple = function(e2) {
        for (var t2 = String(y(e2)).split("."), e2 = t2.join(""), n3 = 1, r2 = (t2[1] || "").length, i2 = 0; i2 < r2; i2++) n3 += "0";
        return De.quick(e2, n3).simplify();
      }, De.prototype = { multiply: function(e2) {
        if (this.isOne()) return e2.clone();
        if (e2.isOne()) return this.clone();
        var t2 = this.clone();
        return t2.num = t2.num.multiply(e2.num), t2.den = t2.den.multiply(e2.den), t2.simplify();
      }, divide: function(e2) {
        if (e2.equals(0)) throw new qe("Division by zero not allowed!");
        return this.clone().multiply(e2.clone().invert()).simplify();
      }, subtract: function(e2) {
        return this.clone().add(e2.clone().neg());
      }, neg: function() {
        return this.num = this.num.multiply(-1), this;
      }, add: function(e2) {
        var t2 = this.den, n3 = e2.den, r2 = this.clone(), i2 = r2.num, e2 = e2.num;
        return t2.equals(n3) ? r2.num = i2.add(e2) : (r2.num = i2.multiply(n3).add(e2.multiply(t2)), r2.den = t2.multiply(n3)), r2.simplify();
      }, mod: function(e2) {
        var t2 = this.clone(), e2 = e2.clone();
        return t2.num = t2.num.multiply(e2.den), t2.den = t2.den.multiply(e2.den), e2.num = e2.num.multiply(this.den), e2.den = e2.den.multiply(this.den), t2.num = t2.num.mod(e2.num), t2.simplify();
      }, simplify: function() {
        var e2 = S.gcd(this.num, this.den);
        return this.num = this.num.divide(e2), this.den = this.den.divide(e2), this;
      }, clone: function() {
        var e2 = new De();
        return e2.num = new S(this.num), e2.den = new S(this.den), e2;
      }, decimal: function(e2) {
        var t2 = this.num.isNegative() ? "-" : "";
        if (this.num.equals(this.den)) return "1";
        e2 = e2 || D.PRECISION, e2++;
        for (var n3 = [], r2 = this.num.abs(), i2 = this.den, s2 = 0; s2 < e2; s2++) {
          var o2 = r2.divide(i2), a2 = r2.subtract(o2.multiply(i2));
          if (n3.push(o2), a2.equals(0)) break;
          r2 = a2.times(10);
        }
        var u2 = n3.shift();
        if (0 === n3.length) return t2 + u2.toString();
        if (s2 === e2) {
          for (var l2 = [], s2 = 0; s2 < 2; s2++) l2.unshift(n3.pop());
          n3.push(Math.round(l2.join(".")));
        }
        return t2 + (u2.toString() + "." + n3.join(""));
      }, toDecimal: function(e2) {
        return (e2 = e2 || D.PRECISION) ? this.decimal(e2) : this.num / this.den;
      }, qcompare: function(e2) {
        return [this.num.multiply(e2.den), e2.num.multiply(this.den)];
      }, equals: function(e2) {
        isNaN(e2) || (e2 = new De(e2));
        e2 = this.qcompare(e2);
        return e2[0].equals(e2[1]);
      }, absEquals: function(e2) {
        isNaN(e2) || (e2 = new De(e2));
        e2 = this.qcompare(e2);
        return e2[0].abs().equals(e2[1]);
      }, greaterThan: function(e2) {
        isNaN(e2) || (e2 = new De(e2));
        e2 = this.qcompare(e2);
        return e2[0].gt(e2[1]);
      }, gte: function(e2) {
        return this.greaterThan(e2) || this.equals(e2);
      }, lte: function(e2) {
        return this.lessThan(e2) || this.equals(e2);
      }, lessThan: function(e2) {
        isNaN(e2) || (e2 = new De(e2));
        e2 = this.qcompare(e2);
        return e2[0].lt(e2[1]);
      }, isInteger: function() {
        return this.den.equals(1);
      }, negate: function() {
        return this.num = this.num.multiply(-1), this;
      }, invert: function() {
        var e2, t2 = this.den;
        return this.num.equals(0) || (e2 = this.num.isNegative(), this.den = this.num.abs(), this.num = t2, e2 && (this.num = this.num.multiply(-1))), this;
      }, isOne: function() {
        return this.num.equals(1) && this.den.equals(1);
      }, sign: function() {
        return this.num.isNegative() ? -1 : 1;
      }, abs: function() {
        return this.num = this.num.abs(), this;
      }, gcd: function(e2) {
        return De.quick(S.gcd(e2.num, this.num), S.lcm(e2.den, this.den));
      }, toString: function() {
        return this.den.equals(1) ? this.num.toString() : this.num.toString() + "/" + this.den.toString();
      }, valueOf: function() {
        return D.USE_BIG ? new k(this.num.toString()).div(new k(this.den.toString())) : this.num / this.den;
      }, isNegative: function() {
        return this.toDecimal() < 0;
      } }, Fe.imaginary = function() {
        var e2 = new Fe(D.IMAGINARY);
        return e2.imaginary = true, e2;
      }, Fe.infinity = function(e2) {
        var t2 = new Fe("Infinity");
        return -1 === e2 && t2.negate(), t2;
      }, Fe.shell = function(e2, t2) {
        t2 = new Fe(t2);
        return t2.group = e2, t2.symbols = {}, t2.length = 0, t2;
      }, Fe.unwrapSQRT = function(e2, t2) {
        var n3, r2 = e2.power;
        return e2.fname === z && (e2.isLinear() || t2) && ((n3 = e2.args[0].clone()).power = n3.power.multiply(new De(0.5)), n3.multiplier = n3.multiplier.multiply(e2.multiplier), e2 = n3, t2 && (e2.power = r2.multiply(new De(0.5)))), e2;
      }, Fe.hyp = function(e2, t2) {
        return e2 = e2 || new Fe(0), t2 = t2 || new Fe(0), d.sqrt(d.add(d.pow(e2.clone(), new Fe(2)), d.pow(t2.clone(), new Fe(2))));
      }, Fe.toPolarFormArray = function(e2) {
        var t2 = e2.realpart(), e2 = e2.imagpart();
        return [Fe.hyp(t2, e2), t2.equals(0) ? d.parse("pi/2") : d.trig.atan(d.divide(e2, t2))];
      }, Fe.unwrapPARENS = function(e2) {
        if ("" !== e2.fname) return e2;
        var t2 = e2.args[0];
        return t2.power = t2.power.multiply(e2.power), t2.multiplier = t2.multiplier.multiply(e2.multiplier), "" === e2.fname ? Fe.unwrapPARENS(t2) : t2;
      }, Fe.create = function(e2, t2) {
        return d.parse("(" + e2 + ")^(" + (t2 = void 0 === t2 ? 1 : t2) + ")");
      }, Fe.prototype = { getNth: function(e2) {
        var t2 = Se(d.pow(d.parse(this.multiplier), d.parse(e2).invert())), n3 = d.parse(me(t2));
        return Se(d.pow(n3, d.parse(e2))).equals(d.parse(this.multiplier)) ? n3 : t2;
      }, isToNth: function(t2) {
        var n3, e2 = this.getNth(t2), e2 = ue(e2);
        return this.group === X ? (n3 = true, this.each(function(e3) {
          e3.isToNth(t2) || (n3 = false);
        })) : n3 = this.group === F || ue(d.divide(d.parse(this.power), d.parse(t2))), e2 && n3;
      }, isSquare: function() {
        return this.isToNth(2);
      }, isCube: function() {
        return this.isToNth(3);
      }, isSimple: function() {
        return this.power.equals(1) && this.multiplier.equals(1);
      }, powSimp: function() {
        if (this.group !== X) return this.clone();
        var t2 = [], e2 = this.multiplier.sign();
        this.each(function(e3) {
          e3 = e3.power;
          if (ne(e3) || e3.equals(1)) return this.clone();
          t2.push(e3);
        });
        var n3, r2 = new De(c(t2)), e2 = this.multiplier.sign(), i2 = this.multiplier.clone().abs(), s2 = Te.ifactor(i2), o2 = new De(1), a2 = new De(1);
        for (n3 in s2) {
          var u2 = new De(s2[n3]);
          u2.lessThan(r2) || (u2 = u2.divide(r2).subtract(new De(1)), a2 = a2.multiply(new De(n3))), o2 = o2.multiply(d.parse(E(n3) + "^" + E(u2)).multiplier);
        }
        var l2 = new Fe(a2);
        this.each(function(e3) {
          (e3 = e3.clone()).power = e3.power.divide(r2), l2 = d.multiply(l2, e3);
        });
        i2 = d.symfunction(Z, [l2]);
        return i2.power = r2, i2.multiplier = e2 < 0 ? o2.negate() : o2, i2;
      }, equals: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), this.value === e2.value && this.power.equals(e2.power) && this.multiplier.equals(e2.multiplier) && this.group === e2.group;
      }, abs: function() {
        var e2 = this.clone();
        return e2.multiplier.abs(), e2;
      }, gt: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), this.isConstant() && e2.isConstant() && this.multiplier.greaterThan(e2.multiplier);
      }, gte: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), this.equals(e2) || this.isConstant() && e2.isConstant() && this.multiplier.greaterThan(e2.multiplier);
      }, lt: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), this.isConstant() && e2.isConstant() && this.multiplier.lessThan(e2.multiplier);
      }, lte: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), this.equals(e2) || this.isConstant() && e2.isConstant() && this.multiplier.lessThan(e2.multiplier);
      }, isPoly: function(e2) {
        var t2 = this.group, n3 = this.power;
        if (!ue(n3) || n3 < 0) return false;
        if (t2 === F || t2 === G || this.isConstant(true)) return true;
        n3 = b(this);
        if (t2 === X && 1 === n3.length) {
          var r2 = n3[0];
          if (!r2) return true;
          for (s2 in this.symbols) {
            var i2 = this.symbols[s2];
            if (i2.group === H && !i2.args[0].isConstant()) return false;
            if (!i2.contains(r2) && !i2.isConstant(true)) return false;
          }
          return true;
        }
        if (this.isComposite() || t2 === X && e2) {
          if (!e2 && 1 < n3.length) return false;
          for (var s2 in this.symbols) if (!this.symbols[s2].isPoly(e2)) return false;
          return true;
        }
        return false;
      }, stripVar: function(t2, e2) {
        var n3;
        return this.group !== j && this.group !== G || this.value !== t2 ? this.group === X && this.isLinear() ? (n3 = new Fe(1), this.each(function(e3) {
          e3.contains(t2, true) || (n3 = d.multiply(n3, e3.clone()));
        }), n3.multiplier = n3.multiplier.multiply(this.multiplier)) : this.group !== $ || this.isLinear() ? this.group === $ && this.isLinear() ? (n3 = new Fe(0), this.each(function(e3) {
          e3.contains(t2) || ((e3 = e3.clone()).multiplier = e3.multiplier.multiply(this.multiplier), n3 = d.add(n3, e3));
        }), n3.equals(0) && (n3 = new Fe(this.multiplier))) : n3 = this.group === V && this.power.contains(t2, true) || this.group === H && this.contains(t2) ? new Fe(this.multiplier) : this.clone() : n3 = new Fe(this.multiplier) : n3 = new Fe(e2 ? 0 : this.multiplier), n3;
      }, toArray: function(n3, r2) {
        r2 = r2 || { arr: [], add: function(e3, t3) {
          var n4 = this.arr[t3];
          this.arr[t3] = n4 ? d.add(n4, e3) : e3;
        } };
        var e2 = this.group;
        if (e2 === G && this.contains(n3)) r2.add(new Fe(this.multiplier), this.power);
        else if (e2 === X) {
          var t2 = this.stripVar(n3), i2 = d.divide(this.clone(), t2.clone()), i2 = i2.isConstant() ? 0 : i2.power;
          r2.add(t2, i2);
        } else if (e2 === j && this.value === n3) this.each(function(e3, t3) {
          r2.add(e3.stripVar(n3), t3);
        });
        else if (e2 === $) this.each(function(e3) {
          e3.toArray(n3, r2);
        });
        else {
          if (this.contains(n3)) throw new I("Cannot convert to array! Exiting");
          r2.add(this.clone(), 0);
        }
        r2 = r2.arr;
        for (var s2 = 0; s2 < r2.length; s2++) r2[s2] || (r2[s2] = new Fe(0));
        return r2;
      }, hasFunc: function(e2) {
        var t2 = this.group === H || this.group === V;
        if (t2 && !e2 || t2 && this.contains(e2)) return true;
        if (this.symbols) {
          for (var n3 in this.symbols) if (this.symbols[n3].hasFunc(e2)) return true;
        }
        return false;
      }, sub: function(t2, n3) {
        t2 = ne(t2) ? t2.clone() : d.parse(t2), n3 = ne(n3) ? n3.clone() : d.parse(n3), t2.group !== F && t2.group !== B || K("Cannot substitute a number. Must be a variable");
        var r2, e2 = false, i2 = t2.multiplier.equals(1), s2 = this.multiplier.clone();
        if (this.value === t2.value && (this.group !== j && t2.group !== j || this.group === j && t2.group === j)) (i2 || t2.multiplier.equals(this.multiplier)) && (t2.isLinear() ? r2 = n3 : t2.power.equals(this.power) && (r2 = n3, e2 = true), t2.multiplier.equals(this.multiplier) && (s2 = new De(1)));
        else if (this.group === X || this.previousGroup === X) r2 = new Fe(1), this.each(function(e3) {
          e3 = d.parse(e3.sub(t2, n3));
          r2 = d.multiply(r2, e3);
        });
        else if (this.isComposite()) {
          var o2 = this.clone();
          if (t2.isComposite() && o2.isComposite() && o2.isLinear() && t2.isLinear()) {
            var a2, u2 = function(e3, t3) {
              for (var n4 in e3.symbols) {
                n4 = e3.symbols[n4];
                if (n4.isComposite() && u2(n4, t3) || n4.equals(t3)) return true;
              }
              return false;
            };
            for (a2 in t2.symbols) if (!u2(o2, t2.symbols[a2])) return o2.clone();
            r2 = d.add(d.subtract(o2.clone(), t2), n3);
          } else r2 = new Fe(0), o2.each(function(e3) {
            r2 = d.add(r2, e3.sub(t2, n3));
          });
        } else if (this.group === V) r2 = d.parse(this.value).sub(t2, n3);
        else if (this.group === H) {
          for (var l2 = [], c2 = 0; c2 < this.args.length; c2++) {
            var p2 = this.args[c2];
            ne(p2) || (p2 = d.parse(p2)), l2.push(p2.sub(t2, n3));
          }
          r2 = d.symfunction(this.fname, l2);
        }
        return r2 ? (e2 || (e2 = this.group === V ? this.power.sub(t2, n3) : d.parse(this.power), r2 = d.pow(r2, e2)), r2.multiplier = r2.multiplier.multiply(s2), r2) : this.clone();
      }, isMonomial: function() {
        if (this.group === G) return true;
        if (this.group !== X) return false;
        for (var e2 in this.symbols) if (this.symbols[e2].group !== G) return false;
        return true;
      }, isPi: function() {
        return this.group === G && "pi" === this.value;
      }, sign: function() {
        return this.multiplier.sign();
      }, isE: function() {
        return "e" === this.value;
      }, isSQRT: function() {
        return this.fname === z;
      }, isConstant: function(t2, n3) {
        if (n3 && this.group === X) {
          for (var e2 in this.symbols) if (this.symbols[e2].isConstant(true)) return true;
        }
        if ("functions" === t2 && this.isComposite()) {
          var r2 = true;
          return this.each(function(e3) {
            e3.isConstant(t2, n3) || (r2 = false);
          }, true), r2;
        }
        if ("all" === t2 && (this.isPi() || this.isE())) return true;
        if (t2 && this.group === H) {
          for (var i2 = 0; i2 < this.args.length; i2++) if (!this.args[i2].isConstant(t2)) return false;
          return true;
        }
        return t2 ? oe(this) : this.value === l;
      }, isImaginary: function() {
        if (this.imaginary) return true;
        if (this.symbols) {
          for (var e2 in this.symbols) if (this.symbols[e2].isImaginary()) return true;
        }
        return false;
      }, realpart: function() {
        if (this.isConstant()) return this.clone();
        if (this.imaginary) return new Fe(0);
        if (this.isComposite()) {
          var t2 = new Fe(0);
          return this.each(function(e2) {
            t2 = d.add(t2, e2.realpart());
          }), t2;
        }
        return this.isImaginary() ? new Fe(0) : this.clone();
      }, imagpart: function() {
        if (this.group === G && this.isImaginary()) return new Fe(this.multiplier);
        if (this.isComposite()) {
          var t2 = new Fe(0);
          return this.each(function(e2) {
            t2 = d.add(t2, e2.imagpart());
          }), t2;
        }
        return this.group === X ? this.stripVar(D.IMAGINARY) : new Fe(0);
      }, isInteger: function() {
        return this.isConstant() && this.multiplier.isInteger();
      }, isLinear: function(e2) {
        if (e2) {
          if (this.isConstant()) return true;
          if (this.group === G) return this.value !== e2 || this.power.equals(1);
          if (this.isComposite() && this.power.equals(1)) {
            for (var t2 in this.symbols) if (!this.symbols[t2].isLinear(e2)) return false;
            return true;
          }
          return this.group === X && this.symbols[e2] ? this.symbols[e2].isLinear(e2) : false;
        }
        return this.power.equals(1);
      }, containsFunction: function(e2) {
        if ("string" == typeof e2 && (e2 = [e2]), this.group === H && -1 !== e2.indexOf(this.fname)) return true;
        if (this.symbols) {
          for (var t2 in this.symbols) if (this.symbols[t2].containsFunction(e2)) return true;
        }
        return false;
      }, multiplyPower: function(e2) {
        if (this.group === F && this.multiplier.equals(1)) return this;
        var t2, n3 = this.power;
        return this.group !== V && e2.group === F ? (t2 = e2.multiplier, this.group !== F || t2.isInteger() || this.convert(B), this.power = n3.equals(1) ? t2.clone() : n3.multiply(t2), this.group === B && ue(this.power) && (this.value = Math.pow(this.value, this.power), this.toLinear(), this.convert(F))) : (this.group !== V && (n3 = new Fe(n3), this.convert(V)), this.power = d.multiply(n3, e2)), this;
      }, setPower: function(e2, t2) {
        return this.group === F && this.multiplier.equals(1) || (this.group !== V || ne(e2) ? (n3 = false, ne(e2) && (e2.group === F ? e2 = e2.multiplier : n3 = true), n3 = n3 ? V : B, this.power = e2, this.group === F && n3 && this.convert(n3, t2)) : (this.group = this.previousGroup, delete this.previousGroup, this.group === F ? (this.multiplier = new De(this.value), this.value = l) : this.power = e2)), this;
        var n3;
      }, isInverse: function() {
        return this.group === V ? this.power.multiplier.lessThan(0) : this.power < 0;
      }, clone: function(e2) {
        var t2, n3 = e2 || new Fe(0), r2 = ["value", "group", "length", "previousGroup", "imaginary", "fname", "args", "isInfinity", "scientific"], i2 = r2.length;
        if (this.symbols) for (var s2 in n3.symbols = {}, this.symbols) n3.symbols[s2] = this.symbols[s2].clone();
        for (t2 = 0; t2 < i2; t2++) void 0 !== this[r2[t2]] && (n3[r2[t2]] = this[r2[t2]]);
        return n3.power = this.power.clone(), n3.multiplier = this.multiplier.clone(), this.isConversion && (n3.isConversion = this.isConversion), this.isUnit && (n3.isUnit = this.isUnit), n3;
      }, toUnitMultiplier: function(e2) {
        return this.multiplier.num = new S(this.multiplier.num.isNegative() && e2 ? -1 : 1), this.multiplier.den = new S(1), this;
      }, toLinear: function() {
        return this.power.equals(1) || this.setPower(new De(1)), this;
      }, each: function(e2, t2) {
        if (this.symbols) for (var n3 in this.symbols) {
          var r2 = this.symbols[n3];
          if (r2.group === j && t2) for (var i2 in r2.symbols) e2.call(n3, r2.symbols[i2], i2);
          else e2.call(this, r2, n3);
        }
        else e2.call(this, this, this.value);
      }, valueOf: function() {
        return this.group === F ? this.multiplier.valueOf() : 0 === this.power ? 1 : 0 === this.multiplier ? 0 : Pe(this, "decimals");
      }, contains: function(e2, t2) {
        e2 = String(e2);
        var n3 = this.group;
        if (this.value === e2) return true;
        if (this.symbols) {
          for (var r2 in this.symbols) if (this.symbols[r2].contains(e2, t2)) return true;
        }
        if (n3 === H || this.previousGroup === H) {
          for (var i2 = 0; i2 < this.args.length; i2++) if (this.args[i2].contains(e2, t2)) return true;
        }
        if (n3 === V) {
          if (t2 && this.power.contains(e2, t2)) return true;
          if (this.value === e2) return true;
        }
        return this.value === e2;
      }, negate: function() {
        return this.multiplier.negate(), this.group !== $ && this.group !== j || this.distributeMultiplier(), this;
      }, invert: function(e2, t2) {
        return e2 || (this.multiplier = this.multiplier.invert()), ne(this.power) ? this.power.negate() : this.group === X && t2 ? this.each(function(e3) {
          return e3.invert();
        }) : this.power && this.group !== F && this.power.negate(), this;
      }, distributeMultiplier: function(e2) {
        e2 = e2 ? this.power.absEquals(1) : this.power.equals(1);
        if (this.symbols && e2 && this.group !== X && !this.multiplier.equals(1)) {
          for (var t2 in this.symbols) {
            t2 = this.symbols[t2];
            t2.multiplier = t2.multiplier.multiply(this.multiplier), t2.distributeMultiplier();
          }
          this.toUnitMultiplier();
        }
        return this;
      }, distributeExponent: function() {
        if (!this.power.equals(1)) {
          var e2, t2 = this.power;
          for (e2 in this.symbols) {
            var n3 = this.symbols[e2];
            n3.group === V ? n3.power = d.multiply(n3.power, new Fe(t2)) : this.symbols[e2].power = this.symbols[e2].power.multiply(t2);
          }
          this.toLinear();
        }
        return this;
      }, convert: function(e2, t2) {
        var n3;
        return H < e2 ? (n3 = this.clone(), this.symbols = {}, (e2 === X ? n3 : this).toUnitMultiplier(), this.group === H && (n3.args = this.args, delete this.args, delete this.fname), this.isImgSymbol && delete this.isImgSymbol, this.toLinear(), this.symbols[n3.keyForGroup(e2)] = n3, this.group = e2, this.length = 1) : e2 === V ? this.group === F && this.multiplier.equals(1) || (this.group !== V && (this.previousGroup = this.group), this.group === F ? (this.value = this.multiplier.num.toString(), this.toUnitMultiplier()) : this.value = Pe(this, "hash"), this.group = V) : e2 === F ? (n3 = this.multiplier.toDecimal(), this.symbols && (this.symbols = void 0), new Fe(this.group === B ? n3 * Math.pow(this.value, this.power) : n3).clone(this)) : e2 === B && this.group === F && (this.value = t2 ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString()), this.toUnitMultiplier(!t2), this.group = B), this;
      }, insert: function(e2, t2) {
        var n3, r2;
        return ne(e2) || K("Object " + e2 + " is not of type Symbol!"), this.symbols && (r2 = this.group, H < r2 && (r2 = (n3 = e2.keyForGroup(r2)) in this.symbols && this.symbols[n3], "add" === t2 ? (t2 = n3, r2 ? (this.symbols[t2] = d.add(r2, e2), this.symbols[t2].multiplier.equals(0) && (delete this.symbols[t2], this.length--, 0 === this.length && (this.convert(F), this.multiplier = new De(0)))) : (this.symbols[n3] = e2, this.length++)) : (e2.group === B && ue(e2.power) && e2.convert(F), e2.group !== V ? (this.multiplier = this.multiplier.multiply(e2.multiplier), e2.toUnitMultiplier()) : (e2.parens = e2.multiplier.lessThan(0), this.multiplier = this.multiplier.multiply(e2.multiplier.clone().abs()), e2.toUnitMultiplier(true)), r2 && ((e2 = d.multiply(we(this.symbols, n3), e2)).isConstant() && (this.multiplier = this.multiplier.multiply(e2.multiplier), e2 = new Fe(1)), this.length--), e2.isOne(true) ? e2.multiplier.lessThan(0) && this.negate() : (this.symbols[n3] = e2, this.length++)), 0 === this.length && this.convert(F), this.group !== $ && this.group !== X || this.updateHash())), this;
      }, attach: function(e2) {
        if (ae(e2)) {
          for (var t2 = 0; t2 < e2.length; t2++) this.insert(e2[t2], "add");
          return this;
        }
        return this.insert(e2, "add");
      }, combine: function(e2) {
        if (ae(e2)) {
          for (var t2 = 0; t2 < e2.length; t2++) this.insert(e2[t2], "multiply");
          return this;
        }
        return this.insert(e2, "multiply");
      }, updateHash: function() {
        if (this.group !== F) if (this.group === H) {
          for (var e2 = "", t2 = this.args, n3 = this.fname === Z, r2 = 0; r2 < t2.length; r2++) e2 += (0 === r2 ? "" : ",") + Pe(t2[r2]);
          var i2 = n3 ? "" : this.fname;
          this.value = i2 + (n3 ? e2 : E(e2));
        } else this.group !== G && this.group !== j && (this.value = Pe(this, "hash"));
      }, keyForGroup: function(e2) {
        var t2, n3 = this.group;
        if (n3 === F) t2 = this.value;
        else if (n3 === G || n3 === B) t2 = e2 === j ? this.power.toDecimal() : this.value;
        else if (n3 === H) t2 = e2 === j ? this.power.toDecimal() : Pe(this, "hash");
        else {
          if (n3 === j) return t2 = e2 === X ? Pe(this, "hash") : e2 === $ ? this.power.equals(1) ? this.value : E(Pe(this, "hash")) + D.POWER_OPERATOR + this.power.toDecimal() : e2 === j ? this.power.toString() : this.value;
          n3 === $ ? (e2 === $ && (t2 = Pe(this, "hash")), t2 = e2 === j ? this.power.toDecimal() : this.value) : n3 === X ? t2 = e2 === j ? this.power.toDecimal() : Pe(this, "hash") : n3 === V && (t2 = e2 === j ? Pe(this.power) : Pe(this, "hash"));
        }
        return t2;
      }, collectSymbols: function(e2, t2, n3, r2) {
        var i2 = [];
        if (this.symbols) for (var s2 in this.symbols) {
          s2 = this.symbols[s2];
          !r2 || s2.group !== j && s2.group !== $ ? i2.push(e2 ? e2(s2, t2) : s2) : i2 = i2.concat(s2.collectSymbols());
        }
        else i2.push(this);
        return i2.sort(n3 = null === n3 ? void 0 : n3);
      }, latex: function(e2) {
        return Ge.latex(this, e2);
      }, text: function(e2) {
        return Pe(this, e2);
      }, isOne: function(e2) {
        return this.group === F ? this.multiplier[e2 ? "absEquals" : "equals"](1) : this.power.equals(0);
      }, isComposite: function() {
        var e2 = this.group, t2 = this.previousGroup;
        return e2 === $ || e2 === j || t2 === j || t2 === $;
      }, isCombination: function() {
        var e2 = this.group, t2 = this.previousGroup;
        return e2 === X || t2 === X;
      }, lessThan: function(e2) {
        return this.multiplier.lessThan(e2);
      }, greaterThan: function(e2) {
        return ne(e2) || (e2 = new Fe(e2)), !(!this.isConstant(true) || !e2.isConstant(true)) && this.multiplier.greaterThan(e2.multiplier);
      }, getDenom: function() {
        var e2 = this.clone();
        if ((e2 = this.group === X && this.power.lessThan(0) ? d.expand(e2) : e2).power.lessThan(0) || e2.group === V && e2.power.multiplier.lessThan(0)) {
          var t2, n3 = d.parse(e2.multiplier.den);
          (t2 = e2.toUnitMultiplier()).power.negate(), t2 = d.multiply(n3, t2);
        } else if (e2.group === X) for (var r2 in t2 = d.parse(e2.multiplier.den), e2.symbols) {
          var i2 = e2.symbols[r2];
          (i2.power < 0 || i2.group === V && i2.power.multiplier.lessThan(0)) && (t2 = d.multiply(t2, e2.symbols[r2].clone().invert()));
        }
        else t2 = d.parse(e2.multiplier.den);
        return t2;
      }, getNum: function() {
        var t2, e2 = this.clone();
        return (e2 = e2.group === X && e2.power.lessThan(0) ? d.expand(e2) : e2).power.greaterThan(0) && e2.group !== X || e2.group === V && e2.power.multiplier.greaterThan(0) ? t2 = d.multiply(d.parse(e2.multiplier.num), e2.toUnitMultiplier()) : e2.group === X ? (t2 = d.parse(e2.multiplier.num), e2.each(function(e3) {
          (0 < e3.power || e3.group === V && 0 < e3.power.multiplier) && (t2 = d.multiply(t2, e3.clone()));
        })) : t2 = d.parse(e2.multiplier.num), t2;
      }, toString: function() {
        return this.text();
      } };
      var Be = { convert: function(e2, t2) {
        var n3, r2, i2, s2;
        return 0 === e2 ? s2 = [0, 1] : e2 < 1e-6 || 1e20 < e2 ? (n3 = this.quickConversion(Number(e2)))[1] <= 1e20 ? (i2 = e2 / (r2 = Math.abs(e2)), (s2 = this.fullConversion(r2.toFixed((n3[1] + "").length - 1)))[0] = s2[0] * i2) : s2 = n3 : s2 = this.fullConversion(e2), s2;
      }, quickConversion: function(e2) {
        return function(e3) {
          T.isScientific(e3) && (e3 = y(e3));
          var t2 = 1 === (n3 = (e3 = (n3 = "", "-" === (e3 = (t2 = "string" != typeof (t2 = e3) ? t2.toString() : t2).charAt(0)) ? (t2 = t2.substr(1, t2.length), n3 = "-") : "+" === e3 && (t2 = t2.substr(1, t2.length)), { sign: n3, value: t2 })).value.split(".")).length ? n3[0] : n3[0] + n3[1], n3 = n3[1] ? n3[1].length : 0, n3 = `1${"0".repeat(n3)}`;
          return "0" !== t2 && (t2 = t2.replace(/^0+/, "")), [e3.sign + t2, n3];
        }(e2);
      }, fullConversion: function(e2) {
        for (var t2 = false, n3 = 0, r2 = 1, i2 = 1, s2 = 0, o2 = 0, a2 = e2; !t2; ) {
          1e4 < ++o2 && (t2 = true);
          var u2 = Math.floor(a2), l2 = n3 + u2 * i2, c2 = r2 + u2 * s2, u2 = a2 - u2;
          u2 < 1e-16 && (t2 = true), a2 = 1 / u2, n3 = i2, r2 = s2, i2 = l2, s2 = c2, (Math.abs(l2 / c2 - e2) < 1e-16 || 30 < o2) && (t2 = true);
        }
        return [l2, c2];
      } }, Ge = { parser: function() {
        var e2, t2 = ["classes", "setOperator", "getOperators", "getBrackets", "tokenize", "toRPN", "tree", "units"], n3 = new P();
        for (e2 in n3) -1 === t2.indexOf(e2) && delete n3[e2];
        return n3.setOperator({ precedence: 8, operator: "\\", action: "slash", prefix: true, postfix: false, leftAssoc: true, operation: function(e3) {
          return e3;
        } }), n3.setOperator({ precedence: 8, operator: "\\,", action: "slash_comma", prefix: true, postfix: false, leftAssoc: true, operation: function(e3) {
          return e3;
        } }), n3.getBrackets()["{"].maps_to = void 0, n3;
      }(), space: "~", dot: " \\cdot ", latex: function(e2, t2) {
        if ((e2 = e2.clone ? e2.clone() : e2) instanceof d.classes.Collection && (e2 = e2.elements), ae(e2)) {
          for (var n3 = [], r2 = 0; r2 < e2.length; r2++) {
            var i2 = e2[r2];
            ne(i2) || (i2 = d.parse(i2)), n3.push(this.latex(i2, t2));
          }
          return this.brackets(n3.join(", "), "square");
        }
        if (ie(e2)) {
          for (var s2 = "\\begin{pmatrix}\n", r2 = 0; r2 < e2.elements.length; r2++) {
            for (var o2 = [], a2 = e2.elements[r2], u2 = 0; u2 < a2.length; u2++) o2.push(this.latex(a2[u2], t2));
            s2 += o2.join(" & "), r2 < e2.elements.length - 1 && (s2 += "\\\\\n");
          }
          return s2 += "\\end{pmatrix}";
        }
        if (re(e2)) {
          for (s2 = "\\left[", r2 = 0; r2 < e2.elements.length; r2++) s2 += this.latex(e2.elements[r2], t2) + " " + (r2 !== e2.elements.length - 1 ? ",\\," : "");
          return s2 += "\\right]";
        }
        if (se(e2)) {
          for (s2 = "\\{", r2 = 0; r2 < e2.elements.length; r2++) s2 += this.latex(e2.elements[r2], t2) + " " + (r2 !== e2.elements.length - 1 ? ",\\," : "");
          return s2 += "\\}";
        }
        var l2, c2 = "decimal" === t2 || "decimals" === t2, p2 = (e2 = e2.clone()).power, f2 = A(p2), h2 = e2.multiplier.lessThan(0);
        if (e2.group === B && c2) return String(e2.multiplier.toDecimal() * Math.pow(e2.value, e2.power.toDecimal()));
        e2.multiplier = e2.multiplier.abs(), l2 = c2 ? [String(e2.multiplier.toDecimal()), ""] : [e2.multiplier.num, e2.multiplier.den];
        var m2, g2 = this.value(e2, f2, t2, h2);
        f2 && p2.negate(), c2 ? (m2 = ne(p2) ? Ge.latex(p2, t2) : String(p2.toDecimal()), "1" === String(m2) && (m2 = "")) : m2 = ne(p2) ? this.latex(p2, t2) : this.formatFrac(p2, true);
        p2 = ["", ""];
        return p2[f2 ? 1 : 0] = m2, ((h2 ? "-" : "") + this.set(l2, g2, p2, e2.group === X)).replace(/\+\-/gi, "-");
      }, greek: { alpha: "\\alpha", beta: "\\beta", gamma: "\\gamma", delta: "\\delta", epsilon: "\\epsilon", zeta: "\\zeta", eta: "\\eta", theta: "\\theta", iota: "\\iota", kappa: "\\kappa", lambda: "\\lambda", mu: "\\mu", nu: "\\nu", xi: "\\xi", omnikron: "\\omnikron", pi: "\\pi", rho: "\\rho", sigma: "\\sigma", tau: "\\tau", upsilon: "\\upsilon", phi: "\\phi", chi: "\\chi", psi: "\\psi", omega: "\\omega", Gamma: "\\Gamma", Delta: "\\Delta", Epsilon: "\\Epsilon", Theta: "\\Theta", Lambda: "\\Lambda", Xi: "\\Xi", Pi: "\\Pi", Sigma: "\\Sigma", Phi: "\\Phi", Psi: "\\Psi", Omega: "\\Omega" }, symbols: { arccos: "\\arccos", cos: "\\cos", csc: "\\csc", exp: "\\exp", ker: "\\ker", limsup: "\\limsup", min: "\\min", sinh: "\\sinh", arcsin: "\\arcsin", cosh: "\\cosh", deg: "\\deg", gcd: "\\gcd", lg: "\\lg", ln: "\\ln", Pr: "\\Pr", sqrt: "\\sqrt", sup: "\\sup", arctan: "\\arctan", cot: "\\cot", det: "\\det", hom: "\\hom", lim: "\\lim", log: "\\log", LN: "\\LN", sec: "\\sec", tan: "\\tan", arg: "\\arg", coth: "\\coth", dim: "\\dim", inf: "\\inf", liminf: "\\liminf", max: "\\max", sin: "\\sin", tanh: "\\tanh" }, value: function(n3, e2, r2, t2) {
        var i2, s2, o2, a2, u2, l2, c2 = n3.group, p2 = n3.previousGroup, f2 = ["", ""], h2 = e2 ? 1 : 0;
        if (n3.isInfinity) f2[h2] = "\\infty";
        else if (c2 === G || c2 === B || p2 === G || p2 === B || p2 === F) {
          (x2 = this.formatSubscripts(n3.value)).replace && (x2 = x2.replace(/(.+)_$/, "$1\\_"));
          var m2 = String(x2).split("_"), e2 = this.greek[m2[0]];
          e2 && (m2[0] = e2, x2 = m2.join("_")), (n3 = this.symbols[m2[0]]) && (m2[0] = n3, x2 = m2.join("_")), f2[h2] = x2;
        } else if (c2 === H || p2 === H) {
          for (var g2, d2, v2, w2, y2 = [], m2 = n3.fname, b2 = 0; b2 < n3.args.length; b2++) {
            var S2, M2 = "string" == typeof (S2 = n3.args[b2]) ? S2 : this.latex(S2, r2);
            y2.push(M2);
          }
          m2 === z ? f2[h2] = "\\sqrt" + this.braces(y2.join(",")) : m2 === Q ? f2[h2] = this.brackets(y2.join(","), "abs") : m2 === Z ? f2[h2] = this.brackets(y2.join(","), "parens") : "limit" === m2 ? f2[h2] = " \\lim\\limits_{" + y2[1] + " \\to " + y2[2] + "} " + y2[0] : "integrate" === m2 ? f2[h2] = "\\int" + this.braces(y2[0]) + this.braces("d" + y2[1]) : "defint" === m2 ? f2[h2] = "\\int\\limits_" + this.braces(y2[1]) + "^" + this.braces(y2[2]) + " " + y2[0] + " d" + y2[3] : m2 === Y || m2 === W ? ((S2 = n3.args[0]).power.equals(1) && (S2.isComposite() || S2.isCombination()) && (y2[0] = this.brackets(y2[0])), f2[h2] = y2[0] + (m2 === Y ? "!" : "!!")) : "floor" === m2 ? f2[h2] = "\\left \\lfloor" + this.braces(y2[0]) + "\\right \\rfloor" : "ceil" === m2 ? f2[h2] = "\\left \\lceil" + this.braces(y2[0]) + "\\right \\rceil" : m2 === D.LOG && 1 < y2.length ? f2[h2] = "\\mathrm" + this.braces(D.LOG) + "_" + this.braces(y2[1]) + this.brackets(y2[0]) : m2 === D.LOG10 ? f2[h2] = "\\mathrm" + this.braces(D.LOG) + "_" + this.braces(10) + this.brackets(y2[0]) : "sum" === m2 ? (g2 = y2[0], d2 = y2[1], v2 = y2[2], w2 = y2[3], f2[h2] = "\\sum\\limits_{" + this.braces(d2) + "=" + this.braces(v2) + "}^" + this.braces(w2) + " " + this.braces(g2)) : "product" === m2 ? (g2 = y2[0], d2 = y2[1], v2 = y2[2], w2 = y2[3], f2[h2] = "\\prod\\limits_{" + this.braces(d2) + "=" + this.braces(v2) + "}^" + this.braces(w2) + " " + this.braces(g2)) : "nthroot" === m2 ? f2[h2] = "\\sqrt[" + y2[1] + "]" + this.braces(y2[0]) : "mod" === m2 ? f2[h2] = y2[0] + " \\bmod " + y2[1] : "realpart" === m2 ? f2[h2] = "\\operatorname{Re}" + this.brackets(y2[0]) : "imagpart" === m2 ? f2[h2] = "\\operatorname{Im}" + this.brackets(y2[0]) : (m2 = "" !== m2 ? "\\mathrm" + this.braces(m2.replace(/_/g, "\\_")) : "", n3.isConversion ? f2[h2] = m2 + this.brackets(y2.join(""), "parens") : f2[h2] = m2 + this.brackets(y2.join(","), "parens"));
        } else if (n3.isComposite()) {
          for (var N2 = n3.collectSymbols().sort(c2 === $ || p2 === $ ? function(e3, t3) {
            return t3.group - e3.group;
          } : function(e3, t3) {
            e3 = ne(e3.power) ? -1 : e3.power;
            return (ne(t3.power) ? -1 : t3.power) - e3;
          }), E2 = [], q2 = N2.length, b2 = 0; b2 < q2; b2++) E2.push(Ge.latex(N2[b2], r2));
          var x2 = E2.join("+");
          f2[h2] = n3.isLinear() && n3.multiplier.equals(1) && !t2 ? x2 : this.brackets(x2, "parens");
        } else c2 !== X && p2 !== V && p2 !== X || (c2 === X && n3.distributeExponent(), i2 = [], s2 = [], o2 = [], a2 = [], l2 = u2 = 0, c2 = function(e3, t3, n4) {
          if (1 < n4 && 0 < t3.length) for (var r3 = t3.length, i3 = 0; i3 < r3; i3++) {
            var s3 = t3[i3], o3 = e3[s3];
            /^\\left\(.+\\right\)\^\{.+\}$/g.test(o3) || /^\\left\(.+\\right\)$/g.test(o3) || (e3[s3] = Ge.brackets(o3, "parens"));
          }
          return e3;
        }, n3.each(function(e3) {
          var t3;
          A(e3.power) ? (t3 = Ge.latex(e3.invert(), r2), l2++, e3.isComposite() && (1 != n3.multiplier.den && 1 == Math.abs(e3.power) && (t3 = Ge.brackets(t3, "parens")), o2.push(i2.length)), i2.push(t3)) : (t3 = Ge.latex(e3, r2), u2++, e3.isComposite() && (1 != n3.multiplier.num && 1 == Math.abs(e3.power) && (t3 = Ge.brackets(t3, "parens")), a2.push(s2.length)), s2.push(t3));
        }), c2(s2, a2, u2), f2[0] = s2.join(this.dot), c2(i2, o2, l2), f2[1] = i2.join(this.dot));
        return f2;
      }, set: function(e2, t2, n3, r2) {
        function i2(e3) {
          return /^\\left\(.+\\right\)$/.test(e3);
        }
        var s2;
        n3 = n3 && this.formatP(n3), r2 && (s2 = n3[0], n3[0] = ""), t2 = this.merge(t2, n3);
        var o2 = e2[0], n3 = e2[1], e2 = t2[0], t2 = t2[1];
        e2 && 1 === Number(o2) && (o2 = ""), 1 === Number(n3) && (n3 = "");
        e2 = this.join(o2, e2, i2(e2) ? "" : this.dot), t2 = this.join(n3, t2, i2(t2) ? "" : this.dot);
        if (e2 && t2) {
          t2 = this.frac(e2, t2);
          return t2 = r2 && s2 ? this.brackets(t2) + s2 : t2;
        }
        return e2;
      }, merge: function(e2, t2) {
        for (var n3 = [], r2 = 0; r2 < 2; r2++) n3[r2] = e2[r2] + t2[r2];
        return n3;
      }, join: function(e2, t2, n3) {
        return e2 || t2 ? e2 && !t2 ? e2 : t2 && !e2 ? t2 : e2 + n3 + t2 : "";
      }, formatSubscripts: function(e2) {
        for (var t2 = e2.toString().split("_"), n3 = ""; 1 < t2.length; ) 0 < t2.length && (n3 = "_" + this.braces(t2.pop() + n3));
        return t2[0] + n3;
      }, formatP: function(e2) {
        for (var t2 = 0; t2 < 2; t2++) {
          var n3 = e2[t2];
          n3 && (e2[t2] = "^" + this.braces(n3));
        }
        return e2;
      }, formatFrac: function(e2, t2) {
        var n3 = e2.num.toString(), e2 = e2.den.toString();
        return t2 && "1" === n3 && "1" === e2 ? "" : "1" === e2 ? n3 : this.frac(n3, e2);
      }, frac: function(e2, t2) {
        return "\\frac" + this.braces(e2) + this.braces(t2);
      }, braces: function(e2) {
        return "{" + e2 + "}";
      }, brackets: function(e2, t2) {
        t2 = { parens: ["(", ")"], square: ["[", "]"], brace: ["{", "}"], abs: ["|", "|"], angle: ["\\langle", "\\rangle"] }[t2 = t2 || "parens"];
        return "\\left" + t2[0] + e2 + "\\right" + t2[1];
      }, filterTokens: function(e2) {
        var t2 = [];
        ae(e2) && (t2.type = e2.type);
        for (var n3 = ["\\", "left", "right", "big", "Big", "large", "Large"], r2 = 0, i2 = e2.length; r2 < i2; r2++) {
          var s2 = e2[r2], o2 = e2[r2 + 1];
          "\\" === s2.value && "\\" === o2.value ? t2.push(s2) : ae(s2) ? t2.push(Ge.filterTokens(s2)) : -1 === n3.indexOf(s2.value) && t2.push(s2);
        }
        return t2;
      }, parse: function(e2) {
        function t2(e3) {
          return s2[void 0 === e3 ? ++a2 : a2 += e3];
        }
        function n3() {
          return Ge.parse(t2());
        }
        function r2(e3) {
          return e3 in o2 ? o2[e3] : "*" === e3 && "&" === s2[a2 + 1].value ? (t2(2), ",") : "&" === e3 ? (t2(), ",") : "\\" === e3 ? "],[" : e3;
        }
        var i2 = "", s2 = this.filterTokens(e2), o2 = { cdot: "", times: "", infty: "Infinity" }, a2 = 0;
        for (u2 = s2.length; a2 < u2; a2++) {
          var u2, l2, c2, p2, f2, h2, m2, g2 = s2[a2];
          "frac" === g2.value ? i2 += n3() + "/" + n3() : g2.value in Ge.symbols ? g2.value === z && "vector" === s2[a2 + 1].type && "Set" === s2[a2 + 2].type ? (f2 = n3(), i2 += n3() + "^" + E("1/" + f2)) : i2 += g2.value + n3() : "int" === g2.value ? (h2 = n3(), a2++, c2 = r2((c2 = t2().value).substring(1, c2.length)), i2 += "integrate" + E(h2 + "," + c2)) : "int_" === g2.value ? (u2 = n3(), a2++, void 0 === (l2 = t2().value) && (a2--, l2 = n3()), h2 = n3(), "differentialD" === (c2 = "," === (c2 = t2().value) ? t2().value : c2) && (a2++, c2 = t2().value), "mathrm" === c2 && (a2++, c2 = t2().value), i2 += "defint" + E(h2 + "," + u2 + "," + l2 + "," + c2)) : g2.value && g2.value.startsWith("int_") ? (u2 = g2.value.replace("int_", ""), console.log("uppernow"), a2++, void 0 === (l2 = t2().value) && (a2--, l2 = n3()), h2 = n3(), "differentialD" === (c2 = "," === (c2 = t2().value) ? t2().value : c2) && (a2++, c2 = t2().value), "mathrm" === c2 && (a2++, c2 = t2().value), i2 += "defint" + E(h2 + "," + u2 + "," + l2 + "," + c2)) : "mathrm" === g2.value ? i2 += (h2 = s2[++a2][0].value) + n3() : "sum_" === g2.value || "prod_" === g2.value ? (p2 = "sum_" === g2.value ? "sum" : "product", m2 = t2(), a2++, f2 = n3(), h2 = n3(), i2 += p2 + E([h2, r2(m2[0]), r2(m2[2]), r2(f2)].join(","))) : "lim_" === g2.value ? (m2 = t2(), i2 += "limit" + E([n3(), r2(m2[0]), r2(m2[2])].join(","))) : "begin" === g2.value ? (m2 = t2(), Array.isArray(m2) && "matrix" === m2[0].value && (i2 += "matrix([")) : "end" === g2.value ? (m2 = t2(), Array.isArray(m2) && "matrix" === m2[0].value && (i2 += "])")) : Array.isArray(g2) ? i2 += r2(Ge.parse(g2)) : i2 += r2(g2.value.toString());
        }
        return E(i2);
      } };
      function Ve(e2) {
        re(e2) ? this.elements = e2.items.slice(0) : ae(e2) ? this.elements = e2.slice(0) : this.elements = [].slice.call(arguments);
      }
      function He() {
        var e2 = arguments, t2 = e2.length, n3 = [];
        if (ie(e2)) for (o2 = 0; o2 < t2; o2++) n3.push(e2[o2].slice(0));
        else for (var r2, i2, s2, o2 = 0; o2 < t2; o2++) r2 = e2[o2], re(r2) && (r2 = r2.elements), s2 = (r2 = !ae(r2) ? [r2] : r2).length, i2 && i2 !== s2 && K("Unable to create Matrix. Row dimensions do not match!"), n3.push(r2), i2 = s2;
        this.elements = n3;
      }
      function je(e2) {
        if (this.elements = [], e2 = !re(e2) ? Ve.fromArray(arguments) : e2) for (var t2 = e2.elements, n3 = 0, r2 = t2.length; n3 < r2; n3++) this.add(t2[n3]);
      }
      Ve.arrayPrefill = function(e2, t2) {
        var n3 = [];
        t2 = t2 || 0;
        for (var r2 = 0; r2 < e2; r2++) n3[r2] = t2;
        return n3;
      }, Ve.fromArray = function(e2) {
        var t2 = new Ve();
        return t2.elements = e2, t2;
      }, Ve.fromSet = function(e2) {
        return Ve.fromArray(e2.elements);
      }, Ve.prototype = { custom: true, e: function(e2) {
        return e2 < 1 || e2 > this.elements.length ? null : this.elements[e2 - 1];
      }, set: function(e2, t2) {
        ne(t2) || (t2 = new Fe(t2)), this.elements[e2] = t2;
      }, dimensions: function() {
        return this.elements.length;
      }, modulus: function() {
        return ye("SAFE", function() {
          return d.pow(this.dot(this.clone()), new Fe(0.5));
        }, void 0, this);
      }, eql: function(e2) {
        var t2 = this.elements.length, n3 = e2.elements || e2;
        if (t2 !== n3.length) return false;
        do {
          if (Math.abs(d.subtract(this.elements[t2 - 1], n3[t2 - 1]).valueOf()) > PRECISION) return false;
        } while (--t2);
        return true;
      }, clone: function() {
        for (var e2 = new Ve(), t2 = this.elements.length, n3 = 0; n3 < t2; n3++) e2.elements.push(this.elements[n3].clone());
        return this.getter && (e2.getter = this.getter.clone()), e2;
      }, map: function(n3) {
        var r2 = [];
        return this.each(function(e2, t2) {
          r2.push(n3(e2, t2));
        }), new Ve(r2);
      }, each: function(e2) {
        for (var t2, n3 = this.elements.length, r2 = n3; e2(this.elements[t2 = r2 - n3], 1 + t2), --n3; ) ;
      }, toUnitVector: function() {
        return ye("SAFE", function() {
          var t2 = this.modulus();
          return 0 === t2.valueOf() ? this.clone() : this.map(function(e2) {
            return d.divide(e2, t2);
          });
        }, void 0, this);
      }, angleFrom: function(o2) {
        return ye("SAFE", function() {
          var n3 = o2.elements || o2;
          if (this.elements.length !== n3.length) return null;
          var r2 = new Fe(0), i2 = new Fe(0), s2 = new Fe(0);
          this.each(function(e3, t3) {
            r2 = d.add(r2, d.multiply(e3, n3[t3 - 1])), i2 = d.add(i2, d.multiply(e3, e3)), s2 = d.add(s2, d.multiply(n3[t3 - 1], n3[t3 - 1]));
          });
          var i2 = d.pow(i2, new Fe(0.5)), s2 = d.pow(s2, new Fe(0.5)), e2 = d.multiply(i2, s2);
          if (0 === e2.valueOf()) return null;
          var t2 = d.divide(r2, e2), e2 = t2.valueOf();
          return e2 < -1 && (t2 = -1), 1 < e2 && (t2 = 1), new Fe(Math.acos(t2));
        }, void 0, this);
      }, isParallelTo: function(e2) {
        e2 = this.angleFrom(e2).valueOf();
        return null === e2 ? null : e2 <= PRECISION;
      }, isAntiparallelTo: function(e2) {
        e2 = this.angleFrom(e2).valueOf();
        return null === e2 ? null : Math.abs(e2 - Math.PI) <= PRECISION;
      }, isPerpendicularTo: function(e2) {
        e2 = this.dot(e2);
        return null === e2 ? null : Math.abs(e2) <= PRECISION;
      }, add: function(e2) {
        return ye("SAFE", function() {
          var n3 = e2.elements || e2;
          return this.elements.length !== n3.length ? null : this.map(function(e3, t2) {
            return d.add(e3, n3[t2 - 1]);
          });
        }, void 0, this);
      }, subtract: function(e2) {
        return ye("SAFE", function() {
          var n3 = e2.elements || e2;
          return this.elements.length !== n3.length ? null : this.map(function(e3, t2) {
            return d.subtract(e3, n3[t2 - 1]);
          });
        }, void 0, this);
      }, multiply: function(t2) {
        return this.map(function(e2) {
          return e2.clone() * t2.clone();
        });
      }, x: function(e2) {
        return this.multiply(e2);
      }, dot: function(r2) {
        return ye("SAFE", function() {
          var e2 = r2.elements || r2, t2 = new Fe(0), n3 = this.elements.length;
          if (n3 !== e2.length) return null;
          for (; t2 = d.add(t2, d.multiply(this.elements[n3 - 1], e2[n3 - 1])), --n3; ) ;
          return t2;
        }, void 0, this);
      }, cross: function(e2) {
        var t2 = e2.elements || e2;
        if (3 !== this.elements.length || 3 !== t2.length) return null;
        var n3 = this.elements;
        return ye("SAFE", function() {
          return new Ve([d.subtract(d.multiply(n3[1], t2[2]), d.multiply(n3[2], t2[1])), d.subtract(d.multiply(n3[2], t2[0]), d.multiply(n3[0], t2[2])), d.subtract(d.multiply(n3[0], t2[1]), d.multiply(n3[1], t2[0]))]);
        }, void 0, this);
      }, max: function() {
        for (var e2, t2 = 0, n3 = this.elements.length, r2 = n3; e2 = r2 - n3, Math.abs(this.elements[e2].valueOf()) > Math.abs(t2.valueOf()) && (t2 = this.elements[e2]), --n3; ) ;
        return t2;
      }, magnitude: function() {
        var t2 = new Fe(0);
        return this.each(function(e2) {
          t2 = d.add(t2, d.pow(e2, new Fe(2)));
        }), d.sqrt(t2);
      }, indexOf: function(e2) {
        for (var t2, n3 = null, r2 = this.elements.length, i2 = r2; t2 = i2 - r2, null === n3 && this.elements[t2].valueOf() === e2.valueOf() && (n3 = 1 + t2), --r2; ) ;
        return n3;
      }, text: function(e2) {
        return Pe(this);
      }, toString: function() {
        return this.text();
      }, latex: function(e2) {
        for (var t2 = [], n3 = 0; n3 < this.elements.length; n3++) t2.push(Ge.latex.call(Ge, this.elements[n3], e2));
        return "[" + t2.join(", ") + "]";
      } }, He.identity = function(e2) {
        for (var t2 = new He(), n3 = 0; n3 < e2; n3++) {
          t2.elements.push([]);
          for (var r2 = 0; r2 < e2; r2++) t2.set(n3, r2, new Fe(n3 === r2 ? 1 : 0));
        }
        return t2;
      }, He.fromArray = function(e2) {
        function t2(e3) {
          return He.apply(this, e3);
        }
        return t2.prototype = He.prototype, new t2(e2);
      }, He.zeroMatrix = function(e2, t2) {
        for (var n3 = new He(), r2 = 0; r2 < e2; r2++) n3.elements.push(Ve.arrayPrefill(t2, new Fe(0)));
        return n3;
      }, (He.prototype = { custom: true, get: function(e2, t2) {
        if (this.elements[e2]) return this.elements[e2][t2];
      }, map: function(r2, i2) {
        var s2 = new He();
        return this.each(function(e2, t2, n3) {
          s2.set(t2, n3, r2.call(s2, e2), i2);
        }), s2;
      }, set: function(e2, t2, n3, r2) {
        this.elements[e2] || (this.elements[e2] = []), this.elements[e2][t2] = r2 || ne(n3) ? n3 : new Fe(n3);
      }, cols: function() {
        return this.elements[0].length;
      }, rows: function() {
        return this.elements.length;
      }, row: function(e2) {
        return !e2 || e2 > this.cols() ? [] : this.elements[e2 - 1];
      }, col: function(e2) {
        var t2 = this.rows(), n3 = [];
        if (e2 > this.cols() || !e2) return n3;
        for (var r2 = 0; r2 < t2; r2++) n3.push(this.elements[r2][e2 - 1]);
        return n3;
      }, eachElement: function(e2) {
        for (var t2, n3 = this.rows(), r2 = this.cols(), i2 = 0; i2 < n3; i2++) for (t2 = 0; t2 < r2; t2++) e2.call(this, this.elements[i2][t2], i2, t2);
      }, determinant: function() {
        if (!this.isSquare()) return null;
        for (var e2, t2 = this.toRightTriangular(), n3 = t2.elements[0][0], r2 = t2.elements.length - 1, i2 = r2; n3 = d.multiply(n3, t2.elements[e2 = i2 - r2 + 1][e2]), --r2; ) ;
        return n3;
      }, isSquare: function() {
        return this.elements.length === this.elements[0].length;
      }, isSingular: function() {
        return this.isSquare() && 0 === this.determinant();
      }, augment: function(e2) {
        var t2 = this.rows();
        t2 !== e2.rows() && K("Cannot augment matrix. Rows don't match.");
        for (var n3 = 0; n3 < t2; n3++) this.elements[n3] = this.elements[n3].concat(e2.elements[n3]);
        return this;
      }, clone: function() {
        for (var e2 = this.rows(), t2 = this.cols(), n3 = new He(), r2 = 0; r2 < e2; r2++) {
          n3.elements[r2] = [];
          for (var i2 = 0; i2 < t2; i2++) {
            var s2 = this.elements[r2][i2];
            n3.elements[r2][i2] = ne(s2) ? s2.clone() : s2;
          }
        }
        return n3;
      }, invert: function() {
        return this.isSquare() || K("Matrix is not square!"), ye("SAFE", function() {
          var e2, t2, n3, r2, i2, s2, o2, a2 = this.elements.length, u2 = a2, l2 = He.identity(a2), c2 = this.augment(l2).toRightTriangular(), p2 = c2.elements[0].length, f2 = [];
          do {
            for (i2 = [], n3 = p2, f2[e2 = a2 - 1] = [], s2 = c2.elements[e2][e2]; o2 = d.divide(c2.elements[e2][r2 = p2 - n3], s2.clone()), i2.push(o2), u2 <= r2 && f2[e2].push(o2), --n3; ) ;
            for (c2.elements[e2] = i2, t2 = 0; t2 < e2; t2++) {
              for (i2 = [], n3 = p2; i2.push(d.subtract(c2.elements[t2][r2 = p2 - n3].clone(), d.multiply(c2.elements[e2][r2].clone(), c2.elements[t2][e2].clone()))), --n3; ) ;
              c2.elements[t2] = i2;
            }
          } while (--a2);
          return He.fromArray(f2);
        }, void 0, this);
      }, toRightTriangular: function() {
        return ye("SAFE", function() {
          var e2, t2, n3, r2 = this.clone(), i2 = this.elements.length, s2 = i2, o2 = this.elements[0].length;
          do {
            if (0 === r2.elements[t2 = s2 - i2][t2].valueOf()) {
              for (var a2 = 1 + t2; a2 < s2; a2++) if ((e2 = r2.elements[a2][t2]) && 0 !== e2.valueOf()) {
                for (l2 = [], c2 = o2; l2.push(d.add(r2.elements[t2][n3 = o2 - c2].clone(), r2.elements[a2][n3].clone())), --c2; ) ;
                r2.elements[t2] = l2;
                break;
              }
            }
            if (0 !== r2.elements[t2][t2].valueOf()) for (a2 = 1 + t2; a2 < s2; a2++) {
              for (var u2 = d.divide(r2.elements[a2][t2].clone(), r2.elements[t2][t2].clone()), l2 = [], c2 = o2; l2.push((n3 = o2 - c2) <= t2 ? new Fe(0) : d.subtract(r2.elements[a2][n3].clone(), d.multiply(r2.elements[t2][n3].clone(), u2.clone()))), --c2; ) ;
              r2.elements[a2] = l2;
            }
          } while (--i2);
          return r2;
        }, void 0, this);
      }, transpose: function() {
        var e2, t2, n3, r2 = this.elements.length, i2 = this.elements[0].length, s2 = new He(), o2 = i2;
        do {
          for (s2.elements[e2 = i2 - o2] = [], t2 = r2; s2.elements[e2][n3 = r2 - t2] = this.elements[n3][e2].clone(), --t2; ) ;
        } while (--o2);
        return s2;
      }, canMultiplyFromLeft: function(e2) {
        e2 = (ie(e2) ? e2.elements : e2).length;
        return this.elements[0].length === e2;
      }, sameSize: function(e2) {
        return this.rows() === e2.rows() && this.cols() === e2.cols();
      }, multiply: function(g2) {
        return ye("SAFE", function() {
          var e2 = g2.elements || g2;
          if (!this.canMultiplyFromLeft(e2)) {
            if (this.sameSize(g2)) {
              for (var t2 = new He(), n3 = this.rows(), r2 = 0; r2 < n3; r2++) {
                var i2 = d.multiply(new Ve(this.elements[r2]), new Ve(g2.elements[r2]));
                t2.elements[r2] = i2.elements;
              }
              return t2;
            }
            return null;
          }
          var s2, o2, a2, u2, l2, c2 = this.elements.length, p2 = c2, f2 = e2[0].length, h2 = this.elements[0].length, m2 = [];
          do {
            m2[r2 = p2 - c2] = [], s2 = f2;
            do {
              for (o2 = f2 - s2, a2 = new Fe(0), u2 = h2; a2 = d.add(a2, d.multiply(this.elements[r2][l2 = h2 - u2], e2[l2][o2])), --u2; ) ;
            } while (m2[r2][o2] = a2, --s2);
          } while (--c2);
          return He.fromArray(m2);
        }, void 0, this);
      }, add: function(i2, s2) {
        var o2 = new He();
        return this.sameSize(i2) && this.eachElement(function(e2, t2, n3) {
          var r2 = d.add(e2.clone(), i2.elements[t2][n3].clone());
          s2 && (r2 = s2.call(o2, r2, e2, i2.elements[t2][n3])), o2.set(t2, n3, r2);
        }), o2;
      }, subtract: function(i2, s2) {
        var o2 = new He();
        return this.sameSize(i2) && this.eachElement(function(e2, t2, n3) {
          var r2 = d.subtract(e2.clone(), i2.elements[t2][n3].clone());
          s2 && (r2 = s2.call(o2, r2, e2, i2.elements[t2][n3])), o2.set(t2, n3, r2);
        }), o2;
      }, negate: function() {
        return this.each(function(e2) {
          return e2.negate();
        }), this;
      }, toVector: function() {
        if (1 !== this.rows() && 1 !== this.cols()) return this;
        var e2 = new Ve();
        return e2.elements = this.elements, e2;
      }, toString: function(e2, n3) {
        var t2 = this.rows(), r2 = [];
        for (var i2 = 0; i2 < t2; i2++) r2.push("[" + this.elements[i2].map(function(e3) {
          var t3 = n3 ? e3.multiplier.toDecimal() : e3.toString();
          return void 0 !== e3 ? t3 : "";
        }).join(",") + "]");
        return "matrix" + E(r2.join(","));
      }, text: function() {
        return "matrix(" + this.elements.toString("") + ")";
      }, latex: function(i2) {
        var s2 = this.cols(), o2 = this.elements;
        return ce("\\begin{vmatrix}{0}\\end{vmatrix}", function() {
          var e2, t2 = [];
          for (e2 in o2) {
            for (var n3 = [], r2 = 0; r2 < s2; r2++) n3.push(Ge.latex.call(Ge, o2[e2][r2], i2));
            t2.push(n3.join(" & "));
          }
          return t2.join(" \\cr ");
        });
      } }).each = He.prototype.eachElement, je.fromArray = function(e2) {
        function t2(e3) {
          return je.apply(this, e3);
        }
        return t2.prototype = je.prototype, new t2(e2);
      }, je.prototype = { add: function(e2) {
        this.contains(e2) || this.elements.push(e2.clone());
      }, contains: function(e2) {
        for (var t2 = 0; t2 < this.elements.length; t2++) {
          var n3 = this.elements[t2];
          if (e2.equals(n3)) return true;
        }
        return false;
      }, each: function(e2) {
        for (var t2 = this.elements, n3 = new je(), r2 = 0, i2 = t2.length; r2 < i2; r2++) {
          var s2 = t2[r2];
          e2.call(this, s2, n3, r2);
        }
        return n3;
      }, clone: function() {
        var t2 = new je();
        return this.each(function(e2) {
          t2.add(e2.clone());
        }), t2;
      }, union: function(e2) {
        var t2 = this.clone();
        return e2.each(function(e3) {
          t2.add(e3);
        }), t2;
      }, difference: function(e2) {
        var t2 = this.clone();
        return e2.each(function(e3) {
          t2.remove(e3);
        }), t2;
      }, remove: function(e2) {
        for (var t2 = 0, n3 = this.elements.length; t2 < n3; t2++) if (this.elements[t2].equals(e2)) return we(this.elements, t2), true;
        return false;
      }, intersection: function(e2) {
        var t2 = new je(), n3 = this;
        return e2.each(function(e3) {
          n3.contains(e3) && t2.add(e3);
        }), t2;
      }, intersects: function(e2) {
        return 0 < this.intersection(e2).elements.length;
      }, is_subset: function(e2) {
        for (var t2 = e2.elements, n3 = 0, r2 = t2.length; n3 < r2; n3++) if (!this.contains(t2[n3])) return false;
        return true;
      }, toString: function() {
        return "{" + this.elements.join(",") + "}";
      } };
      var Xe = { dependencies: { _rename: { "Math2.factorial": "factorial" }, factorial: { "Math2.gamma": Te.gamma }, gamma_incomplete: { "Math2.factorial": Te.factorial }, Li: { "Math2.Ei": Te.Ei, "Math2.bigLog": Te.bigLog, Frac: De }, Ci: { "Math2.factorial": Te.factorial }, Ei: { "Math2.factorial": Te.factorial }, Si: { "Math2.factorial": Te.factorial }, Shi: { "Math2.factorial": Te.factorial }, Chi: { isInt: ue, nround: me, "Math2.num_integrate": Te.num_integrate }, factor: { "Math2.ifactor": Te.ifactor, Symbol: Fe }, num_integrate: { "Math2.simpson": Te.simpson, nround: me }, fib: { even: ge } }, reformat: { diff: function(e2, t2) {
        var n3 = e2.args[1].toString(), e2 = "var f = " + Xe.build(e2.args[0].toString(), [n3]) + ";";
        return t2[1] += "var diff = " + Te.diff.toString() + ";", t2[1] += e2, ["diff(f)(" + n3 + ")", t2];
      } }, getProperName: function(e2) {
        return { continued_fraction: "continuedFraction" }[e2] || e2;
      }, compileDependencies: function(e2, t2) {
        var n3, r2, i2 = Xe.dependencies[e2], s2 = t2 && t2[1] ? t2[1] : "", o2 = t2 && t2[0] ? t2[0] : {};
        for (n3 in i2) "object" != typeof i2[n3] && (s2 += "var " + (1 < (r2 = n3.split(".")).length ? r2[1] : r2[0]) + "=" + i2[n3] + ";", o2[n3] = r2.pop());
        return [o2, s2];
      }, getArgsDeps: function(e2, t2) {
        for (var n3 = e2.args, r2 = 0; r2 < n3.length; r2++) e2.args[r2].each(function(e3) {
          e3.group === H && (t2 = Xe.compileDependencies(e3.fname, t2));
        });
        return t2;
      }, build: function(e2, t2) {
        e2 = ye("PARSE2NUMBER", function() {
          return d.parse(e2);
        }, true);
        var n3 = b(e2), l2 = [], c2 = [], p2 = function(s3, o2) {
          "" === s3.fname && (s3 = Fe.unwrapPARENS(s3)), o2 = o2 || [];
          function e3(e4) {
            return e4 = e4 in Math ? "Math." + e4 : (e4 = Xe.getProperName(e4), -1 === l2.indexOf(e4) && (o2.push("var " + e4 + " = " + Te[e4].toString() + "; "), l2.push(e4)), e4), e4 += E(s3.args.map(function(e5) {
              return p2(e5, o2)[0];
            }).join(","));
          }
          var t3, n4, r3 = [], i3 = s3.group, a2 = "", u2 = function(e4) {
            var t4, e4 = e4 === X ? "*" : "+", n5 = [];
            for (t4 in s3.symbols) {
              var r4 = s3.symbols[t4], i4 = p2(r4, o2)[0];
              r4.isComposite() && (i4 = E(i4)), n5.push(i4);
            }
            e4 = n5.join(e4);
            return e4 = e4 && !s3.multiplier.equals(1) ? E(e4) : e4;
          };
          return i3 === F ? r3.push(s3.multiplier.toDecimal()) : s3.multiplier.equals(-1) ? a2 = "-" : s3.multiplier.equals(1) || r3.push(s3.multiplier.toDecimal()), i3 === G || i3 === B ? t3 = s3.value : i3 === H ? (c2 = Xe.compileDependencies(s3.fname, c2), c2 = Xe.getArgsDeps(s3, c2), t3 = Xe.reformat[s3.fname] ? (n4 = Xe.reformat[s3.fname](s3, c2), c2 = n4[1], n4[0]) : e3(s3.fname)) : i3 === V ? (i3 = s3.previousGroup) === F || i3 === G ? t3 = s3.value : i3 === H ? (t3 = e3(s3.fname), c2 = Xe.compileDependencies(s3.fname, c2), c2 = Xe.getArgsDeps(s3, c2)) : t3 = u2(s3.previousGroup) : t3 = u2(s3.group), s3.group === F || s3.power.equals(1) || (u2 = p2(d.parse(s3.power)), o2.push(u2[1]), t3 = "Math.pow" + E(t3 + "," + u2[0])), t3 && r3.push(a2 + t3), [r3.join("*"), o2.join("").replace(/\n+\s+/g, " ")];
        };
        t2 && (n3 = t2);
        var r2, i2 = p2(e2);
        for (r2 in c2[0]) {
          var s2 = c2[0][r2];
          i2[1] = i2[1].replace(r2, s2), c2[1] = c2[1].replace(r2, s2);
        }
        return new Function(n3, (c2[1] || "") + i2[1] + " return " + i2[0] + ";");
      } };
      x(d.CONSTANTS), x(d.functions), d.initConstants(), d.error || (d.error = K), D.LOG_FNS = { log: d.functions.log, log10: d.functions.log10 };
      function $e(n3, e2, r2, t2) {
        var i2 = false, s2 = /^([a-z_][a-z\d\_]*)\(([a-z_,\s]*)\):=(.+)$/gi.exec(n3);
        return s2 ? nerdamer.setFunction(s2[1], s2[2].split(","), s2[3]) : (n3 instanceof R && (n3 = n3.toString()), (r2 = !ae(r2) ? void 0 === r2 ? [] : [r2] : r2).forEach(function(e3) {
          var t3;
          "numer" !== e3 ? (t3 = d.functions[r2]) && 1 === t3[1] && (n3 = `${e3}(${n3})`) : i2 = true;
        }), s2 = ye("PARSE2NUMBER", function() {
          return d.parse(n3, e2);
        }, i2 || D.PARSE2NUMBER), t2 ? p[t2 - 1] = s2 : p.push(s2), new R(s2));
      }
      var x = { allSame: w, allNumeric: function(e2) {
        for (var t2 = 0; t2 < e2.length; t2++) if (!te(e2[t2])) return false;
        return true;
      }, arguments2Array: be, arrayAddSlices: function(e2, t2) {
        t2 = t2 || 20;
        var n3 = [];
        n3.push(e2[0]);
        for (var r2 = 0; r2 < e2.length - 1; r2++) for (var i2 = e2[r2], s2 = (e2[r2 + 1] - i2) / t2, o2 = 0; o2 < t2; o2++) n3.push(i2 += s2);
        return n3;
      }, arrayClone: function(e2) {
        for (var t2 = [], n3 = e2.length, r2 = 0; r2 < n3; r2++) t2[r2] = e2[r2].clone();
        return t2;
      }, arrayMax: function(e2) {
        return Math.max.apply(void 0, e2);
      }, arrayMin: c, arrayEqual: function(e2, t2) {
        if (e2.sort(), t2.sort(), e2.length !== t2.length) return false;
        for (var n3 = 0; n3 < e2.length; n3++) if (e2[n3] !== t2[n3]) return false;
        return true;
      }, arrayUnique: a, arrayGetVariables: function(e2) {
        for (var t2 = b(e2[0], null, null, true), n3 = 1, r2 = e2.length; n3 < r2; n3++) t2 = t2.concat(b(e2[n3]));
        return t2 = a(t2).sort();
      }, arraySum: function(e2, t2) {
        for (var n3 = new Fe(0), r2 = 0; r2 < e2.length; r2++) var i2 = e2[r2], n3 = d.add(n3, ne(i2) ? i2 : d.parse(i2));
        return t2 ? Number(n3) : n3;
      }, block: ye, build: Xe.build, clearU: function(e2) {
        e2 = f.indexOf(e2);
        -1 !== e2 && (f[e2] = void 0);
      }, comboSort: function(e2, t2) {
        for (var n3 = e2.length, r2 = [], i2 = 0; i2 < e2.length; i2++) r2.push([e2[i2], t2[i2]]);
        r2.sort(function(e3, t3) {
          return e3[0] - t3[0];
        });
        for (var s2 = [], o2 = [], i2 = 0; i2 < n3; i2++) s2.push(r2[i2][0]), o2.push(r2[i2][1]);
        return [s2, o2];
      }, compare: function(e2, t2, n3) {
        for (var r2, i2 = {}, s2 = 0; s2 < n3.length; s2++) i2[n3[s2]] = new Fe(Math.floor(5 * Math.random()) + 1);
        return ye("PARSE2NUMBER", function() {
          r2 = d.parse(e2, i2).equals(d.parse(t2, i2));
        }), r2;
      }, convertToVector: C, customError: n2, customType: function(e2) {
        return void 0 !== e2 && e2.custom;
      }, decompose_fn: he, each: s, evaluate: Se, even: ge, evenFraction: de, fillHoles: function(e2, t2) {
        t2 = t2 || e2.length;
        for (var n3 = 0; n3 < t2; n3++) e2[n3] || (e2[n3] = new Fe(0));
        return e2;
      }, firstObject: pe, format: ce, generatePrimes: u, getCoeffs: function(e2, r2, t2) {
        var i2 = [];
        e2.each(function(e3) {
          var t3, n4 = e3.contains(r2) ? (t3 = e3.stripVar(r2), d.divide(e3.clone(), t3.clone()).power.toDecimal()) : (t3 = e3, 0), e3 = i2[n4];
          i2[n4] = e3 ? d.add(e3, t3) : t3;
        }, true);
        for (var n3 = 0; n3 < i2.length; n3++) i2[n3] || (i2[n3] = new Fe(0));
        return i2;
      }, getU: function(e2) {
        for (var t2 = "u", n3 = 0, r2 = b(e2); -1 !== f.indexOf(t2) || -1 !== r2.indexOf(t2); ) t2 = "u" + n3++;
        for (var i2 = 0, s2 = f.length; i2 <= s2; i2++) if (!f[i2]) {
          f[i2] = t2;
          break;
        }
        return t2;
      }, importFunctions: function() {
        var e2, t2 = {};
        for (e2 in d.functions) t2[e2] = d.functions[e2][0];
        return t2;
      }, inBrackets: E, isArray: ae, isExpression: i, isFraction: v, isInt: ue, isMatrix: ie, isNegative: A, isNumericSymbol: oe, isPrime: g, isReserved: r, isSymbol: ne, isVariableSymbol: function(e2) {
        return e2.group === G && e2.multiplier.equals(1) && e2.power.equals(1);
      }, isVector: re, keys: q, knownVariable: function(e2, t2) {
        var n3 = {};
        return n3[e2] = t2, n3;
      }, nroots: function(e2) {
        var t2, n3;
        if (e2.group === H && "" === e2.fname ? (t2 = Fe.unwrapPARENS(d.parse(e2).toLinear()), n3 = d.parse(e2.power)) : e2.group === B && (t2 = d.parse(e2.value), n3 = d.parse(e2.power)), t2 && n3 && t2.group === F && n3.group === F && t2.multiplier.isNegative()) {
          for (var r2 = [], i2 = Fe.toPolarFormArray(Se(e2))[0], s2 = d.arg(t2), o2 = n3.multiplier.den.toString(), a2 = n3.multiplier.num.toString(), u2 = 0; u2 < o2; u2++) {
            var l2 = Se(d.parse(ce("(({0})+2*pi*({1}))/({2})", s2, u2, o2))).multiplier.toDecimal();
            r2.push(Se(d.parse(ce("(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})", i2, o2, D.IMAGINARY, l2, a2))));
          }
          return Ve.fromArray(r2);
        }
        return e2.isConstant(true, true) ? (t2 = e2.sign(), s2 = Se(e2.abs()), r2 = [(n3 = d.sqrt(s2)).clone(), n3.negate()], t2 < 0 && (r2 = r2.map(function(e3) {
          return d.multiply(e3, Fe.imaginary());
        }))) : r2 = [d.parse(e2)], Ve.fromArray(r2);
      }, remove: we, reserveNames: x, range: function(e2, t2, n3) {
        var r2 = [];
        n3 = n3 || 1;
        for (var i2 = e2; i2 <= t2; i2++) r2.push(i2 * n3);
        return r2;
      }, round: me, sameSign: function(e2, t2) {
        return e2 < 0 == t2 < 0;
      }, scientificToDecimal: y, separate: N, stringReplace: function(e2, t2, n3, r2) {
        return e2.substr(0, t2) + r2 + e2.substr(n3, e2.length);
      }, text: Pe, validateName: m, variables: b, warn: ee }, Ze = { groups: t, Symbol: Fe, Expression: R, Frac: De, Vector: Ve, Matrix: He, Parser: P, Scientific: T, Fraction: Be, Math2: Te, LaTeX: Ge, Utils: x, PARSER: d, PARENTHESIS: Z, Settings: D, err: K, bigInt: S, bigDec: k, exceptions: e };
      return $e.rpn = function(e2) {
        return d.tokenize(d.toRPN(e2));
      }, $e.convertToLaTeX = function(e2, t2) {
        return d.toTeX(e2, t2);
      }, $e.convertFromLaTeX = function(e2) {
        e2 = Ge.parse(d.tokenize(e2));
        return new R(d.parse(e2));
      }, $e.version = function(t2) {
        if (t2) try {
          return Ze[t2].version;
        } catch (e2) {
          return "No module named " + t2 + " found!";
        }
        return "1.1.13";
      }, $e.getWarnings = function() {
        return h;
      }, $e.setConstant = function(e2, t2) {
        if (m(e2), !r(e2)) if ("delete" === t2 || "" === t2) delete d.CONSTANTS[e2];
        else {
          if (isNaN(t2)) throw new I("Constant must be a number!");
          d.CONSTANTS[e2] = t2;
        }
        return this;
      }, $e.getConstant = function(e2) {
        return String(d.constant[e2]);
      }, $e.setFunction = fe, $e.getCore = function() {
        return Ze;
      }, $e.getExpression = $e.getEquation = R.getExpression, $e.reserved = function(e2) {
        return e2 ? f : f.join(", ");
      }, $e.clear = function(e2, t2) {
        return "all" === e2 ? p = [] : "last" === e2 ? p.pop() : "first" === e2 ? p.shift() : (e2 = e2 ? e2 - 1 : p.length, true === t2 ? p[e2] = void 0 : we(p, e2)), this;
      }, $e.flush = function() {
        return this.clear("all"), this;
      }, $e.expressions = function(e2, t2, n3) {
        for (var r2 = e2 ? {} : [], i2 = 0; i2 < p.length; i2++) {
          var s2 = t2 ? Ge.latex(p[i2], n3) : Pe(p[i2], n3);
          e2 ? r2[i2 + 1] = s2 : r2.push(s2);
        }
        return r2;
      }, $e.register = function(e2) {
        var t2 = this.getCore();
        if (ae(e2)) for (var n3 = 0; n3 < e2.length; n3++) e2 && this.register(e2[n3]);
        else if (e2 && -1 === D.exclude.indexOf(e2.name)) {
          if (e2.dependencies) {
            for (n3 = 0; n3 < e2.dependencies.length; n3++) if (!t2[e2.dependencies[n3]]) throw new Error(ce("{0} requires {1} to be loaded!", e2.name, e2.dependencies[n3]));
          }
          var r2 = e2.parent, i2 = e2.build.call(t2);
          r2 && (t2[r2] || (t2[e2.parent] = {}), ("nerdamer" === r2 ? this : t2[r2])[e2.name] = i2), e2.visible && (d.functions[e2.name] = [i2, e2.numargs]);
        }
      }, $e.validateName = m, $e.validVarName = function(e2) {
        try {
          return m(e2), -1 === f.indexOf(e2);
        } catch (e3) {
          return false;
        }
      }, $e.supported = function() {
        return q(d.functions);
      }, $e.numEquations = $e.numExpressions = function() {
        return p.length;
      }, $e.setVar = function(e2, t2) {
        return m(e2), e2 in d.CONSTANTS && K("Cannot set value for constant " + e2), "delete" === t2 || "" === t2 ? delete J[e2] : J[e2] = ne(t2) ? t2 : d.parse(t2), this;
      }, $e.getVar = function(e2) {
        return J[e2];
      }, $e.clearVars = function() {
        return J = {}, this;
      }, $e.load = function(e2) {
        return e2.call(this), this;
      }, $e.getVars = function(e2, t2) {
        var n3 = {};
        if ("object" === (e2 = e2 || "text")) n3 = J;
        else for (var r2 in J) "latex" === e2 ? n3[r2] = J[r2].latex(t2) : "text" === e2 && (n3[r2] = J[r2].text(t2));
        return n3;
      }, $e.set = function(e2, t2) {
        if ("object" == typeof e2) for (var n3 in e2) $e.set(n3, e2[n3]);
        -1 !== ["SAFE"].indexOf(e2) && K("Cannot modify setting: " + e2), "PRECISION" === e2 ? (k.set({ precision: t2 }), 21 < (D.PRECISION = t2) && this.set("USE_BIG", true)) : "USE_LN" === e2 && true === t2 ? (D.LOG = "LN", D.LOG10 = "log", d.functions.log = D.LOG_FNS.log10, d.functions.log[0] = function(e3) {
          return e3.isConstant() ? new Fe(Math.log10(e3)) : d.symfunction(D.LOG10, [e3]);
        }, d.functions.LN = D.LOG_FNS.log, delete d.functions.log10) : D[e2] = t2;
      }, $e.get = function(e2) {
        return D[e2];
      }, $e.updateAPI = function(e2) {
        for (var t2 in d.functions) t2 in $e && !e2 || ($e[t2] = /* @__PURE__ */ function(n3) {
          return function() {
            for (var e3 = [].slice.call(arguments), t3 = 0; t3 < e3.length; t3++) e3[t3] = d.parse(e3[t3]);
            return new R(ye("PARSE2NUMBER", function() {
              return d.callfunction(n3, e3);
            }));
          };
        }(t2));
      }, $e.replaceFunction = function(e2, t2, n3) {
        var r2 = d.functions[e2], n3 = void 0 === n3 ? r2[1] : n3;
        d.functions[e2] = [t2.call(void 0, r2[0], Ze), n3];
      }, $e.setOperator = function(e2, t2) {
        d.setOperator(e2, t2);
      }, $e.getOperator = function(e2) {
        return d.getOperator(e2);
      }, $e.aliasOperator = function(e2, t2) {
        d.aliasOperator(e2, t2);
      }, $e.tree = function(e2) {
        return d.tree(d.toRPN(d.tokenize(e2)));
      }, $e.htmlTree = function(e2, t2) {
        return '<div class="tree">\n    <ul>\n        <li>\n' + this.tree(e2).toHTML(3, t2) + "\n        </li>\n    </ul>\n</div>";
      }, $e.addPeeker = function(e2, t2) {
        d.peekers[e2] && d.peekers[e2].push(t2);
      }, $e.removePeeker = function(e2, t2) {
        we(d.peekers[e2], t2);
      }, $e.parse = function(e2) {
        return String(e2).split(";").map(function(e3) {
          return d.parse(e3);
        });
      }, $e.updateAPI(), $e;
    }({ bigInt: function() {
      var Q = function(o) {
        "use strict";
        var v = 1e7, l = 7, t = 9007199254740992, n2 = m(t), c = Math.log(t);
        function u(e2, t2) {
          return void 0 === e2 ? u[0] : void 0 === t2 || 10 == +t2 ? z(e2) : V(e2, t2);
        }
        function p(e2, t2) {
          this.value = e2, this.sign = t2, this.isSmall = false;
        }
        function f(e2) {
          this.value = e2, this.sign = e2 < 0, this.isSmall = true;
        }
        function h(e2) {
          return -t < e2 && e2 < t;
        }
        function m(e2) {
          return e2 < 1e7 ? [e2] : e2 < 1e14 ? [e2 % 1e7, Math.floor(e2 / 1e7)] : [e2 % 1e7, Math.floor(e2 / 1e7) % 1e7, Math.floor(e2 / 1e14)];
        }
        function w(e2) {
          g(e2);
          var t2 = e2.length;
          if (t2 < 4 && C(e2, n2) < 0) switch (t2) {
            case 0:
              return 0;
            case 1:
              return e2[0];
            case 2:
              return e2[0] + e2[1] * v;
            default:
              return e2[0] + (e2[1] + e2[2] * v) * v;
          }
          return e2;
        }
        function g(e2) {
          for (var t2 = e2.length; 0 === e2[--t2]; ) ;
          e2.length = t2 + 1;
        }
        function y(e2) {
          for (var t2 = new Array(e2), n3 = -1; ++n3 < e2; ) t2[n3] = 0;
          return t2;
        }
        function d(e2) {
          return 0 < e2 ? Math.floor(e2) : Math.ceil(e2);
        }
        function r(e2, t2) {
          for (var n3, r2 = e2.length, i2 = t2.length, s2 = new Array(r2), o2 = 0, a2 = v, u2 = 0; u2 < i2; u2++) n3 = e2[u2] + t2[u2] + o2, s2[u2] = n3 - (o2 = a2 <= n3 ? 1 : 0) * a2;
          for (; u2 < r2; ) n3 = e2[u2] + o2, s2[u2++] = n3 - (o2 = n3 === a2 ? 1 : 0) * a2;
          return 0 < o2 && s2.push(o2), s2;
        }
        function b(e2, t2) {
          return e2.length >= t2.length ? r(e2, t2) : r(t2, e2);
        }
        function i(e2, t2) {
          for (var n3, r2 = e2.length, i2 = new Array(r2), s2 = v, o2 = 0; o2 < r2; o2++) n3 = e2[o2] - s2 + t2, t2 = Math.floor(n3 / s2), i2[o2] = n3 - t2 * s2, t2 += 1;
          for (; 0 < t2; ) i2[o2++] = t2 % s2, t2 = Math.floor(t2 / s2);
          return i2;
        }
        function S(e2, t2) {
          for (var n3, r2 = e2.length, i2 = t2.length, s2 = new Array(r2), o2 = 0, a2 = v, u2 = 0; u2 < i2; u2++) o2 = (n3 = e2[u2] - o2 - t2[u2]) < 0 ? (n3 += a2, 1) : 0, s2[u2] = n3;
          for (u2 = i2; u2 < r2; u2++) {
            if (!((n3 = e2[u2] - o2) < 0)) {
              s2[u2++] = n3;
              break;
            }
            n3 += a2, s2[u2] = n3;
          }
          for (; u2 < r2; u2++) s2[u2] = e2[u2];
          return g(s2), s2;
        }
        function s(e2, t2, n3) {
          for (var r2, i2 = e2.length, s2 = new Array(i2), o2 = -t2, a2 = v, u2 = 0; u2 < i2; u2++) r2 = e2[u2] + o2, o2 = Math.floor(r2 / a2), s2[u2] = (r2 %= a2) < 0 ? r2 + a2 : r2;
          return "number" == typeof (s2 = w(s2)) ? new f(s2 = n3 ? -s2 : s2) : new p(s2, n3);
        }
        function M(e2, t2) {
          for (var n3, r2, i2 = e2.length, s2 = t2.length, o2 = y(i2 + s2), a2 = v, u2 = 0; u2 < i2; ++u2) for (var l2 = e2[u2], c2 = 0; c2 < s2; ++c2) n3 = l2 * t2[c2] + o2[u2 + c2], r2 = Math.floor(n3 / a2), o2[u2 + c2] = n3 - r2 * a2, o2[u2 + c2 + 1] += r2;
          return g(o2), o2;
        }
        function N(e2, t2) {
          for (var n3, r2 = e2.length, i2 = new Array(r2), s2 = v, o2 = 0, a2 = 0; a2 < r2; a2++) n3 = e2[a2] * t2 + o2, o2 = Math.floor(n3 / s2), i2[a2] = n3 - o2 * s2;
          for (; 0 < o2; ) i2[a2++] = o2 % s2, o2 = Math.floor(o2 / s2);
          return i2;
        }
        function E(e2, t2) {
          for (var n3 = []; 0 < t2--; ) n3.push(0);
          return n3.concat(e2);
        }
        function a(e2, t2, n3) {
          return new p(e2 < v ? N(t2, e2) : M(t2, m(e2)), n3);
        }
        function q(e2) {
          for (var t2, n3 = e2.length, r2 = y(n3 + n3), i2 = v, s2 = 0; s2 < n3; s2++) {
            for (var o2, a2 = 0 - (o2 = e2[s2]) * o2, u2 = s2; u2 < n3; u2++) t2 = o2 * e2[u2] * 2 + r2[s2 + u2] + a2, a2 = Math.floor(t2 / i2), r2[s2 + u2] = t2 - a2 * i2;
            r2[s2 + n3] = a2;
          }
          return g(r2), r2;
        }
        function x(e2, t2) {
          for (var n3, r2 = e2.length, i2 = y(r2), s2 = v, o2 = 0, a2 = r2 - 1; 0 <= a2; --a2) o2 = (n3 = o2 * s2 + e2[a2]) - (n3 = d(n3 / t2)) * t2, i2[a2] = 0 | n3;
          return [i2, 0 | o2];
        }
        function A(e2, t2) {
          var n3 = z(t2), r2 = e2.value, i2 = n3.value;
          if (0 === i2) throw new Error("Cannot divide by zero");
          if (e2.isSmall) return n3.isSmall ? [new f(d(r2 / i2)), new f(r2 % i2)] : [u[0], e2];
          if (n3.isSmall) {
            if (1 === i2) return [e2, u[0]];
            if (-1 == i2) return [e2.negate(), u[0]];
            var s2 = Math.abs(i2);
            if (s2 < v) {
              var o2 = w((a2 = x(r2, s2))[0]), t2 = a2[1];
              return e2.sign && (t2 = -t2), "number" == typeof o2 ? [new f(o2 = e2.sign !== n3.sign ? -o2 : o2), new f(t2)] : [new p(o2, e2.sign !== n3.sign), new f(t2)];
            }
            i2 = m(s2);
          }
          s2 = C(r2, i2);
          if (-1 === s2) return [u[0], e2];
          if (0 === s2) return [u[e2.sign === n3.sign ? 1 : -1], u[0]];
          o2 = (a2 = (r2.length + i2.length <= 200 ? function(e3, t3) {
            var n4, r3, i3, s3, o3, a3, u2, l2 = e3.length, c2 = t3.length, p2 = v, f2 = y(t3.length), h2 = t3[c2 - 1], m2 = Math.ceil(p2 / (2 * h2)), g2 = N(e3, m2), d2 = N(t3, m2);
            for (g2.length <= l2 && g2.push(0), d2.push(0), h2 = d2[c2 - 1], r3 = l2 - c2; 0 <= r3; r3--) {
              for (n4 = p2 - 1, g2[r3 + c2] !== h2 && (n4 = Math.floor((g2[r3 + c2] * p2 + g2[r3 + c2 - 1]) / h2)), a3 = d2.length, o3 = s3 = i3 = 0; o3 < a3; o3++) i3 += n4 * d2[o3], u2 = Math.floor(i3 / p2), s3 += g2[r3 + o3] - (i3 - u2 * p2), i3 = u2, s3 = s3 < 0 ? (g2[r3 + o3] = s3 + p2, -1) : (g2[r3 + o3] = s3, 0);
              for (; 0 !== s3; ) {
                for (--n4, o3 = i3 = 0; o3 < a3; o3++) i3 = (i3 += g2[r3 + o3] - p2 + d2[o3]) < 0 ? (g2[r3 + o3] = i3 + p2, 0) : (g2[r3 + o3] = i3, 1);
                s3 += i3;
              }
              f2[r3] = n4;
            }
            return g2 = x(g2, m2)[0], [w(f2), w(g2)];
          } : function(e3, t3) {
            for (var n4, r3, i3, s3, o3, a3 = e3.length, u2 = t3.length, l2 = [], c2 = [], p2 = v; a3; ) if (c2.unshift(e3[--a3]), g(c2), C(c2, t3) < 0) l2.push(0);
            else {
              for (i3 = c2[(r3 = c2.length) - 1] * p2 + c2[r3 - 2], s3 = t3[u2 - 1] * p2 + t3[u2 - 2], u2 < r3 && (i3 = (i3 + 1) * p2), n4 = Math.ceil(i3 / s3); !(C(o3 = N(t3, n4), c2) <= 0) && --n4; ) ;
              l2.push(n4), c2 = S(c2, o3);
            }
            return l2.reverse(), [w(l2), w(c2)];
          })(r2, i2))[0];
          var n3 = e2.sign !== n3.sign, a2 = a2[1], e2 = e2.sign;
          return [o2 = "number" == typeof o2 ? new f(o2 = n3 ? -o2 : o2) : new p(o2, n3), a2 = "number" == typeof a2 ? new f(a2 = e2 ? -a2 : a2) : new p(a2, e2)];
        }
        function C(e2, t2) {
          if (e2.length !== t2.length) return e2.length > t2.length ? 1 : -1;
          for (var n3 = e2.length - 1; 0 <= n3; n3--) if (e2[n3] !== t2[n3]) return e2[n3] > t2[n3] ? 1 : -1;
          return 0;
        }
        function L(e2) {
          e2 = e2.abs();
          return !e2.isUnit() && (!!(e2.equals(2) || e2.equals(3) || e2.equals(5)) || !(e2.isEven() || e2.isDivisibleBy(3) || e2.isDivisibleBy(5)) && (!!e2.lesser(49) || void 0));
        }
        function I(e2, t2) {
          for (var n3, r2, i2, s2 = e2.prev(), o2 = s2, a2 = 0; o2.isEven(); ) o2 = o2.divide(2), a2++;
          e: for (r2 = 0; r2 < t2.length; r2++) if (!e2.lesser(t2[r2]) && !(i2 = Q(t2[r2]).modPow(o2, e2)).equals(u[1]) && !i2.equals(s2)) {
            for (n3 = a2 - 1; 0 != n3; n3--) {
              if ((i2 = i2.square().mod(e2)).isUnit()) return false;
              if (i2.equals(s2)) continue e;
            }
            return false;
          }
          return true;
        }
        p.prototype = Object.create(u.prototype), f.prototype = Object.create(u.prototype), p.prototype.plus = p.prototype.add = function(e2) {
          var t2 = z(e2);
          if (this.sign !== t2.sign) return this.subtract(t2.negate());
          var n3 = this.value, e2 = t2.value;
          return t2.isSmall ? new p(i(n3, Math.abs(e2)), this.sign) : new p(b(n3, e2), this.sign);
        }, f.prototype.plus = f.prototype.add = function(e2) {
          var t2 = z(e2), n3 = this.value;
          if (n3 < 0 !== t2.sign) return this.subtract(t2.negate());
          e2 = t2.value;
          if (t2.isSmall) {
            if (h(n3 + e2)) return new f(n3 + e2);
            e2 = m(Math.abs(e2));
          }
          return new p(i(e2, Math.abs(n3)), n3 < 0);
        }, p.prototype.minus = p.prototype.subtract = function(e2) {
          var t2 = z(e2);
          if (this.sign !== t2.sign) return this.add(t2.negate());
          var n3, r2 = this.value, e2 = t2.value;
          return t2.isSmall ? s(r2, Math.abs(e2), this.sign) : (t2 = r2, r2 = e2, e2 = this.sign, 0 <= C(t2, r2) ? n3 = S(t2, r2) : (n3 = S(r2, t2), e2 = !e2), "number" == typeof (n3 = w(n3)) ? new f(n3 = e2 ? -n3 : n3) : new p(n3, e2));
        }, f.prototype.minus = f.prototype.subtract = function(e2) {
          var t2 = z(e2), n3 = this.value;
          if (n3 < 0 !== t2.sign) return this.add(t2.negate());
          e2 = t2.value;
          return t2.isSmall ? new f(n3 - e2) : s(e2, Math.abs(n3), 0 <= n3);
        }, p.prototype.negate = function() {
          return new p(this.value, !this.sign);
        }, f.prototype.negate = function() {
          var e2 = this.sign, t2 = new f(-this.value);
          return t2.sign = !e2, t2;
        }, p.prototype.abs = function() {
          return new p(this.value, false);
        }, f.prototype.abs = function() {
          return new f(Math.abs(this.value));
        }, p.prototype.times = p.prototype.multiply = function(e2) {
          var t2, n3 = z(e2), r2 = this.value, i2 = n3.value, e2 = this.sign !== n3.sign;
          if (n3.isSmall) {
            if (0 === i2) return u[0];
            if (1 === i2) return this;
            if (-1 === i2) return this.negate();
            if ((t2 = Math.abs(i2)) < v) return new p(N(r2, t2), e2);
            i2 = m(t2);
          }
          return n3 = r2.length, t2 = i2.length, new p((0 < -0.012 * n3 - 0.012 * t2 + 15e-6 * n3 * t2 ? function e3(t3, n4) {
            if ((r3 = Math.max(t3.length, n4.length)) <= 30) return M(t3, n4);
            var r3 = Math.ceil(r3 / 2), i3 = t3.slice(r3), s2 = t3.slice(0, r3), o2 = n4.slice(r3), a2 = n4.slice(0, r3), t3 = e3(s2, a2), n4 = e3(i3, o2), o2 = e3(b(s2, i3), b(a2, o2)), r3 = b(b(t3, E(S(S(o2, t3), n4), r3)), E(n4, 2 * r3));
            return g(r3), r3;
          } : M)(r2, i2), e2);
        }, f.prototype._multiplyBySmall = function(e2) {
          return h(e2.value * this.value) ? new f(e2.value * this.value) : a(Math.abs(e2.value), m(Math.abs(this.value)), this.sign !== e2.sign);
        }, p.prototype._multiplyBySmall = function(e2) {
          return 0 === e2.value ? u[0] : 1 === e2.value ? this : -1 === e2.value ? this.negate() : a(Math.abs(e2.value), this.value, this.sign !== e2.sign);
        }, f.prototype.times = f.prototype.multiply = function(e2) {
          return z(e2)._multiplyBySmall(this);
        }, p.prototype.square = function() {
          return new p(q(this.value), false);
        }, f.prototype.square = function() {
          var e2 = this.value * this.value;
          return h(e2) ? new f(e2) : new p(q(m(Math.abs(this.value))), false);
        }, f.prototype.divmod = p.prototype.divmod = function(e2) {
          e2 = A(this, e2);
          return { quotient: e2[0], remainder: e2[1] };
        }, f.prototype.over = f.prototype.divide = p.prototype.over = p.prototype.divide = function(e2) {
          return A(this, e2)[0];
        }, f.prototype.remainder = f.prototype.mod = p.prototype.remainder = p.prototype.mod = function(e2) {
          return A(this, e2)[1];
        }, p.prototype.pow = function(e2) {
          var t2, n3, r2, i2 = z(e2), e2 = this.value, s2 = i2.value;
          if (0 === s2) return u[1];
          if (0 === e2) return u[0];
          if (1 === e2) return u[1];
          if (-1 === e2) return i2.isEven() ? u[1] : u[-1];
          if (i2.sign) return u[0];
          if (!i2.isSmall) throw new Error("The exponent " + i2.toString() + " is too large.");
          if (this.isSmall && h(t2 = Math.pow(e2, s2))) return new f(d(t2));
          for (n3 = this, r2 = u[1]; true & s2 && (r2 = r2.times(n3), --s2), 0 !== s2; ) s2 /= 2, n3 = n3.square();
          return r2;
        }, f.prototype.pow = p.prototype.pow, f.prototype.modPow = p.prototype.modPow = function(e2, t2) {
          if (e2 = z(e2), (t2 = z(t2)).isZero()) throw new Error("Cannot take modPow with modulus 0");
          for (var n3 = u[1], r2 = this.mod(t2); e2.isPositive(); ) {
            if (r2.isZero()) return u[0];
            e2.isOdd() && (n3 = n3.multiply(r2).mod(t2)), e2 = e2.divide(2), r2 = r2.square().mod(t2);
          }
          return n3;
        }, p.prototype.compareAbs = function(e2) {
          var t2 = z(e2), n3 = this.value, e2 = t2.value;
          return t2.isSmall ? 1 : C(n3, e2);
        }, f.prototype.compareAbs = function(e2) {
          var t2 = z(e2), n3 = Math.abs(this.value), e2 = t2.value;
          return t2.isSmall ? n3 === (e2 = Math.abs(e2)) ? 0 : e2 < n3 ? 1 : -1 : -1;
        }, p.prototype.compareTo = p.prototype.compare = function(e2) {
          if (e2 === 1 / 0) return -1;
          if (e2 === -1 / 0) return 1;
          var t2 = z(e2), n3 = this.value, e2 = t2.value;
          return this.sign !== t2.sign ? t2.sign ? 1 : -1 : t2.isSmall ? this.sign ? -1 : 1 : C(n3, e2) * (this.sign ? -1 : 1);
        }, f.prototype.compareTo = f.prototype.compare = function(e2) {
          if (e2 === 1 / 0) return -1;
          if (e2 === -1 / 0) return 1;
          var t2 = z(e2), n3 = this.value, e2 = t2.value;
          return t2.isSmall ? n3 == e2 ? 0 : e2 < n3 ? 1 : -1 : n3 < 0 !== t2.sign ? n3 < 0 ? -1 : 1 : n3 < 0 ? 1 : -1;
        }, f.prototype.eq = f.prototype.equals = p.prototype.eq = p.prototype.equals = function(e2) {
          return 0 === this.compare(e2);
        }, f.prototype.neq = f.prototype.notEquals = p.prototype.neq = p.prototype.notEquals = function(e2) {
          return 0 !== this.compare(e2);
        }, f.prototype.gt = f.prototype.greater = p.prototype.gt = p.prototype.greater = function(e2) {
          return 0 < this.compare(e2);
        }, f.prototype.lt = f.prototype.lesser = p.prototype.lt = p.prototype.lesser = function(e2) {
          return this.compare(e2) < 0;
        }, f.prototype.geq = f.prototype.greaterOrEquals = p.prototype.geq = p.prototype.greaterOrEquals = function(e2) {
          return 0 <= this.compare(e2);
        }, f.prototype.leq = f.prototype.lesserOrEquals = p.prototype.leq = p.prototype.lesserOrEquals = function(e2) {
          return this.compare(e2) <= 0;
        }, p.prototype.isEven = function() {
          return 0 == (1 & this.value[0]);
        }, f.prototype.isEven = function() {
          return 0 == (1 & this.value);
        }, p.prototype.isOdd = function() {
          return 1 == (1 & this.value[0]);
        }, f.prototype.isOdd = function() {
          return 1 == (1 & this.value);
        }, p.prototype.isPositive = function() {
          return !this.sign;
        }, f.prototype.isPositive = function() {
          return 0 < this.value;
        }, p.prototype.isNegative = function() {
          return this.sign;
        }, f.prototype.isNegative = function() {
          return this.value < 0;
        }, p.prototype.isUnit = function() {
          return false;
        }, f.prototype.isUnit = function() {
          return 1 === Math.abs(this.value);
        }, p.prototype.isZero = function() {
          return false;
        }, f.prototype.isZero = function() {
          return 0 === this.value;
        }, f.prototype.isDivisibleBy = p.prototype.isDivisibleBy = function(e2) {
          var t2 = z(e2), e2 = t2.value;
          return 0 !== e2 && (1 === e2 || (2 === e2 ? this.isEven() : this.mod(t2).equals(u[0])));
        }, f.prototype.isPrime = p.prototype.isPrime = function(e2) {
          var t2 = L(this);
          if (t2 !== o) return t2;
          var n3 = this.abs(), t2 = n3.bitLength();
          if (t2 <= 64) return I(n3, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);
          for (var t2 = Math.log(2) * t2, r2 = Math.ceil(true === e2 ? 2 * Math.pow(t2, 2) : t2), i2 = [], s2 = 0; s2 < r2; s2++) i2.push(Q(s2 + 2));
          return I(n3, i2);
        }, f.prototype.isProbablePrime = p.prototype.isProbablePrime = function(e2) {
          var t2 = L(this);
          if (t2 !== o) return t2;
          for (var n3 = this.abs(), r2 = e2 === o ? 5 : e2, i2 = [], s2 = 0; s2 < r2; s2++) i2.push(Q.randBetween(2, n3.minus(2)));
          return I(n3, i2);
        }, f.prototype.modInv = p.prototype.modInv = function(e2) {
          for (var t2, n3, r2 = Q.zero, i2 = Q.one, s2 = z(e2), o2 = this.abs(); !o2.equals(Q.zero); ) t2 = s2.divide(o2), n3 = s2, s2 = o2, i2 = r2.subtract(t2.multiply(r2 = i2)), o2 = n3.subtract(t2.multiply(o2));
          if (!s2.equals(1)) throw new Error(this.toString() + " and " + e2.toString() + " are not co-prime");
          return -1 === r2.compare(0) && (r2 = r2.add(e2)), this.isNegative() ? r2.negate() : r2;
        }, p.prototype.next = function() {
          var e2 = this.value;
          return this.sign ? s(e2, 1, this.sign) : new p(i(e2, 1), this.sign);
        }, f.prototype.next = function() {
          var e2 = this.value;
          return e2 + 1 < t ? new f(e2 + 1) : new p(n2, false);
        }, p.prototype.prev = function() {
          var e2 = this.value;
          return this.sign ? new p(i(e2, 1), true) : s(e2, 1, this.sign);
        }, f.prototype.prev = function() {
          var e2 = this.value;
          return -t < e2 - 1 ? new f(e2 - 1) : new p(n2, true);
        };
        for (var U = [1]; 2 * U[U.length - 1] <= v; ) U.push(2 * U[U.length - 1]);
        var _ = U.length, O = U[_ - 1];
        function R(e2) {
          return ("number" == typeof e2 || "string" == typeof e2) && +Math.abs(e2) <= v || e2 instanceof p && e2.value.length <= 1;
        }
        function T(e2, t2, n3) {
          t2 = z(t2);
          for (var r2 = e2.isNegative(), i2 = t2.isNegative(), s2 = r2 ? e2.not() : e2, o2 = i2 ? t2.not() : t2, a2 = 0, u2 = 0, l2 = null, c2 = null, p2 = []; !s2.isZero() || !o2.isZero(); ) a2 = (l2 = A(s2, O))[1].toJSNumber(), r2 && (a2 = O - 1 - a2), u2 = (c2 = A(o2, O))[1].toJSNumber(), s2 = l2[0], o2 = c2[0], p2.push(n3(a2, u2 = i2 ? O - 1 - u2 : u2));
          for (var f2 = 0 !== n3(r2 ? 1 : 0, i2 ? 1 : 0) ? Q(-1) : Q(0), h2 = p2.length - 1; 0 <= h2; --h2) f2 = f2.multiply(O).add(Q(p2[h2]));
          return f2;
        }
        f.prototype.shiftLeft = p.prototype.shiftLeft = function(e2) {
          if (!R(e2)) throw new Error(String(e2) + " is too large for shifting.");
          if ((e2 = +e2) < 0) return this.shiftRight(-e2);
          var t2 = this;
          if (t2.isZero()) return t2;
          for (; _ <= e2; ) t2 = t2.multiply(O), e2 -= _ - 1;
          return t2.multiply(U[e2]);
        }, f.prototype.shiftRight = p.prototype.shiftRight = function(e2) {
          var t2;
          if (!R(e2)) throw new Error(String(e2) + " is too large for shifting.");
          if ((e2 = +e2) < 0) return this.shiftLeft(-e2);
          for (var n3 = this; _ <= e2; ) {
            if (n3.isZero() || n3.isNegative() && n3.isUnit()) return n3;
            n3 = (t2 = A(n3, O))[1].isNegative() ? t2[0].prev() : t2[0], e2 -= _ - 1;
          }
          return (t2 = A(n3, U[e2]))[1].isNegative() ? t2[0].prev() : t2[0];
        }, f.prototype.not = p.prototype.not = function() {
          return this.negate().prev();
        }, f.prototype.and = p.prototype.and = function(e2) {
          return T(this, e2, function(e3, t2) {
            return e3 & t2;
          });
        }, f.prototype.or = p.prototype.or = function(e2) {
          return T(this, e2, function(e3, t2) {
            return e3 | t2;
          });
        }, f.prototype.xor = p.prototype.xor = function(e2) {
          return T(this, e2, function(e3, t2) {
            return e3 ^ t2;
          });
        };
        var P = 1 << 30, k = (v & -v) * (v & -v) | P;
        function D(e2) {
          e2 = e2.value, e2 = "number" == typeof e2 ? e2 | P : e2[0] + e2[1] * v | k;
          return e2 & -e2;
        }
        function F(e2, t2) {
          return e2 = z(e2), t2 = z(t2), e2.greater(t2) ? e2 : t2;
        }
        function B(e2, t2) {
          return e2 = z(e2), t2 = z(t2), e2.lesser(t2) ? e2 : t2;
        }
        function G(e2, t2) {
          if (e2 = z(e2).abs(), t2 = z(t2).abs(), e2.equals(t2)) return e2;
          if (e2.isZero()) return t2;
          if (t2.isZero()) return e2;
          for (var n3, r2, i2 = u[1]; e2.isEven() && t2.isEven(); ) n3 = Math.min(D(e2), D(t2)), e2 = e2.divide(n3), t2 = t2.divide(n3), i2 = i2.multiply(n3);
          for (; e2.isEven(); ) e2 = e2.divide(D(e2));
          do {
            for (; t2.isEven(); ) t2 = t2.divide(D(t2));
          } while (e2.greater(t2) && (r2 = t2, t2 = e2, e2 = r2), !(t2 = t2.subtract(e2)).isZero());
          return i2.isUnit() ? e2 : e2.multiply(i2);
        }
        f.prototype.bitLength = p.prototype.bitLength = function() {
          var e2 = this;
          return 0 === (e2 = e2.compareTo(Q(0)) < 0 ? e2.negate().subtract(Q(1)) : e2).compareTo(Q(0)) ? Q(0) : Q(function e3(t2, n3) {
            if (n3.compareTo(t2) <= 0) {
              var r2 = e3(t2, n3.square(n3)), i2 = r2.p, r2 = r2.e, n3 = i2.multiply(n3);
              return n3.compareTo(t2) <= 0 ? { p: n3, e: 2 * r2 + 1 } : { p: i2, e: 2 * r2 };
            }
            return { p: Q(1), e: 0 };
          }(e2, Q(2)).e).add(Q(1));
        };
        var V = function(e2, t2) {
          for (var n3 = e2.length, r2 = Math.abs(t2), i2 = 0; i2 < n3; i2++) {
            var s2 = e2[i2].toLowerCase();
            if ("-" !== s2 && /[a-z0-9]/.test(s2)) {
              if (/[0-9]/.test(s2) && r2 <= +s2) {
                if ("1" !== s2 || 1 !== r2) throw new Error(s2 + " is not a valid digit in base " + t2 + ".");
              } else if (s2.charCodeAt(0) - 87 >= r2) throw new Error(s2 + " is not a valid digit in base " + t2 + ".");
            }
          }
          if (2 <= t2 && t2 <= 36 && n3 <= c / Math.log(t2)) {
            var o2 = parseInt(e2, t2);
            if (isNaN(o2)) throw new Error(s2 + " is not a valid digit in base " + t2 + ".");
            return new f(parseInt(e2, t2));
          }
          t2 = z(t2);
          var a2 = [], o2 = "-" === e2[0];
          for (i2 = o2 ? 1 : 0; i2 < e2.length; i2++) {
            var u2 = (s2 = e2[i2].toLowerCase()).charCodeAt(0);
            if (48 <= u2 && u2 <= 57) a2.push(z(s2));
            else if (97 <= u2 && u2 <= 122) a2.push(z(s2.charCodeAt(0) - 87));
            else {
              if ("<" !== s2) throw new Error(s2 + " is not a valid character");
              for (u2 = i2; ">" !== e2[++i2]; ) ;
              a2.push(z(e2.slice(u2 + 1, i2)));
            }
          }
          return H(a2, t2, o2);
        };
        function H(e2, t2, n3) {
          for (var r2 = u[0], i2 = u[1], s2 = e2.length - 1; 0 <= s2; s2--) r2 = r2.add(e2[s2].times(i2)), i2 = i2.times(t2);
          return n3 ? r2.negate() : r2;
        }
        function j(e2) {
          return e2 <= 35 ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(e2) : "<" + e2 + ">";
        }
        function X(e2, t2) {
          if ((t2 = Q(t2)).isZero()) {
            if (e2.isZero()) return { value: [0], isNegative: false };
            throw new Error("Cannot convert nonzero numbers to base 0.");
          }
          if (t2.equals(-1)) {
            if (e2.isZero()) return { value: [0], isNegative: false };
            if (e2.isNegative()) return { value: [].concat.apply([], Array.apply(null, Array(-e2)).map(Array.prototype.valueOf, [1, 0])), isNegative: false };
            var n3 = Array.apply(null, Array(+e2 - 1)).map(Array.prototype.valueOf, [0, 1]);
            return n3.unshift([1]), { value: [].concat.apply([], n3), isNegative: false };
          }
          n3 = false;
          if (e2.isNegative() && t2.isPositive() && (n3 = true, e2 = e2.abs()), t2.equals(1)) return e2.isZero() ? { value: [0], isNegative: false } : { value: Array.apply(null, Array(+e2)).map(Number.prototype.valueOf, 1), isNegative: n3 };
          for (var r2 = [], i2 = e2; i2.isNegative() || 0 <= i2.compareAbs(t2); ) {
            var i2 = (s2 = i2.divmod(t2)).quotient, s2 = s2.remainder;
            s2.isNegative() && (s2 = t2.minus(s2).abs(), i2 = i2.next()), r2.push(s2.toJSNumber());
          }
          return r2.push(i2.toJSNumber()), { value: r2.reverse(), isNegative: n3 };
        }
        function $(e2, t2) {
          t2 = X(e2, t2);
          return (t2.isNegative ? "-" : "") + t2.value.map(j).join("");
        }
        function Z(e2) {
          if (h(+e2)) {
            var t2 = +e2;
            if (t2 === d(t2)) return new f(t2);
            throw new Error("Invalid integer: " + e2);
          }
          var n3 = "-" === e2[0], r2 = (e2 = n3 ? e2.slice(1) : e2).split(/e/i);
          if (2 < r2.length) throw new Error("Invalid integer: " + r2.join("e"));
          if (2 === r2.length) {
            var i2 = r2[1];
            if ((i2 = +(i2 = "+" === i2[0] ? i2.slice(1) : i2)) !== d(i2) || !h(i2)) throw new Error("Invalid integer: " + i2 + " is not a valid exponent.");
            t2 = r2[0], r2 = t2.indexOf(".");
            if (0 <= r2 && (i2 -= t2.length - r2 - 1, t2 = t2.slice(0, r2) + t2.slice(r2 + 1)), i2 < 0) throw new Error("Cannot include negative exponent part for integers");
            e2 = t2 += new Array(i2 + 1).join("0");
          }
          if (!/^([0-9][0-9]*)$/.test(e2)) throw new Error("Invalid integer: " + e2);
          for (var s2 = [], o2 = e2.length, a2 = l, u2 = o2 - a2; 0 < o2; ) s2.push(+e2.slice(u2, o2)), (u2 -= a2) < 0 && (u2 = 0), o2 -= a2;
          return g(s2), new p(s2, n3);
        }
        function z(e2) {
          return "number" == typeof e2 ? function(e3) {
            if (h(e3)) {
              if (e3 !== d(e3)) throw new Error(e3 + " is not an integer.");
              return new f(e3);
            }
            return Z(e3.toString());
          }(e2) : "string" == typeof e2 ? Z(e2) : e2;
        }
        p.prototype.toArray = function(e2) {
          return X(this, e2);
        }, f.prototype.toArray = function(e2) {
          return X(this, e2);
        }, p.prototype.toString = function(e2) {
          if (10 !== (e2 = e2 === o ? 10 : e2)) return $(this, e2);
          for (var t2, n3 = this.value, r2 = n3.length, i2 = String(n3[--r2]); 0 <= --r2; ) t2 = String(n3[r2]), i2 += "0000000".slice(t2.length) + t2;
          return (this.sign ? "-" : "") + i2;
        }, f.prototype.toString = function(e2) {
          return 10 != (e2 = e2 === o ? 10 : e2) ? $(this, e2) : String(this.value);
        }, p.prototype.toJSON = f.prototype.toJSON = function() {
          return this.toString();
        }, p.prototype.toJSNumber = p.prototype.valueOf = function() {
          return parseInt(this.toString(), 10);
        }, f.prototype.toJSNumber = f.prototype.valueOf = function() {
          return this.value;
        };
        for (var e = 0; e < 1e3; e++) u[e] = new f(e), 0 < e && (u[-e] = new f(-e));
        return u.one = u[1], u.zero = u[0], u.minusOne = u[-1], u.max = F, u.min = B, u.gcd = G, u.lcm = function(e2, t2) {
          return e2 = z(e2).abs(), t2 = z(t2).abs(), e2.divide(G(e2, t2)).multiply(t2);
        }, u.isInstance = function(e2) {
          return e2 instanceof p || e2 instanceof f;
        }, u.randBetween = function(e2, t2) {
          var n3 = B(e2 = z(e2), t2 = z(t2)), r2 = F(e2, t2).subtract(n3).add(1);
          if (r2.isSmall) return n3.add(Math.floor(Math.random() * r2));
          for (var i2 = [], s2 = true, o2 = r2.value.length - 1; 0 <= o2; o2--) {
            var a2 = s2 ? r2.value[o2] : v, u2 = d(Math.random() * a2);
            i2.unshift(u2), u2 < a2 && (s2 = false);
          }
          return i2 = w(i2), n3.add("number" == typeof i2 ? new f(i2) : new p(i2, false));
        }, u.fromArray = function(e2, t2, n3) {
          return H(e2.map(z), z(t2 || 10), n3);
        }, u;
      }();
      return "undefined" != typeof module && module.hasOwnProperty("exports") && (module.exports = Q), "function" == typeof define && define.amd && define("big-integer", [], function() {
        return Q;
      }), Q;
    }(), bigDec: function(e) {
      "use strict";
      var c, L, t, s, o = 9e15, m = 1e9, g = "0123456789abcdef", r = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", i = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", a = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -o, maxE: o, crypto: false }, y = true, u = "[DecimalError] ", d = u + "Invalid argument: ", l = u + "Precision limit exceeded", p = u + "crypto unavailable", I = Math.floor, v = Math.pow, f = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, h = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, w = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, b = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, U = 1e7, _ = 7, S = r.length - 1, M = i.length - 1, N = { name: "[object Decimal]" };
      function E(e2) {
        var t2, n3, r2, i2 = e2.length - 1, s2 = "", o2 = e2[0];
        if (0 < i2) {
          for (s2 += o2, t2 = 1; t2 < i2; t2++) r2 = e2[t2] + "", (n3 = _ - r2.length) && (s2 += V(n3)), s2 += r2;
          o2 = e2[t2], (n3 = _ - (r2 = o2 + "").length) && (s2 += V(n3));
        } else if (0 === o2) return "0";
        for (; o2 % 10 == 0; ) o2 /= 10;
        return s2 + o2;
      }
      function q(e2, t2, n3) {
        if (e2 !== ~~e2 || e2 < t2 || n3 < e2) throw Error(d + e2);
      }
      function x(e2, t2, n3, r2) {
        for (var i2, s2, o2 = e2[0]; 10 <= o2; o2 /= 10) --t2;
        return --t2 < 0 ? (t2 += _, i2 = 0) : (i2 = Math.ceil((t2 + 1) / _), t2 %= _), o2 = v(10, _ - t2), s2 = e2[i2] % o2 | 0, null == r2 ? t2 < 3 ? (0 == t2 ? s2 = s2 / 100 | 0 : 1 == t2 && (s2 = s2 / 10 | 0), n3 < 4 && 99999 == s2 || 3 < n3 && 49999 == s2 || 5e4 == s2 || 0 == s2) : (n3 < 4 && s2 + 1 == o2 || 3 < n3 && s2 + 1 == o2 / 2) && (e2[i2 + 1] / o2 / 100 | 0) == v(10, t2 - 2) - 1 || (s2 == o2 / 2 || 0 == s2) && 0 == (e2[i2 + 1] / o2 / 100 | 0) : t2 < 4 ? (0 == t2 ? s2 = s2 / 1e3 | 0 : 1 == t2 ? s2 = s2 / 100 | 0 : 2 == t2 && (s2 = s2 / 10 | 0), (r2 || n3 < 4) && 9999 == s2 || !r2 && 3 < n3 && 4999 == s2) : ((r2 || n3 < 4) && s2 + 1 == o2 || !r2 && 3 < n3 && s2 + 1 == o2 / 2) && (e2[i2 + 1] / o2 / 1e3 | 0) == v(10, t2 - 3) - 1;
      }
      function A(e2, t2, n3) {
        for (var r2, i2, s2 = [0], o2 = 0, a2 = e2.length; o2 < a2; ) {
          for (i2 = s2.length; i2--; ) s2[i2] *= t2;
          for (s2[0] += g.indexOf(e2.charAt(o2++)), r2 = 0; r2 < s2.length; r2++) s2[r2] > n3 - 1 && (void 0 === s2[r2 + 1] && (s2[r2 + 1] = 0), s2[r2 + 1] += s2[r2] / n3 | 0, s2[r2] %= n3);
        }
        return s2.reverse();
      }
      N.absoluteValue = N.abs = function() {
        var e2 = new this.constructor(this);
        return e2.s < 0 && (e2.s = 1), P(e2);
      }, N.ceil = function() {
        return P(new this.constructor(this), this.e + 1, 2);
      }, N.comparedTo = N.cmp = function(e2) {
        var t2, n3, r2 = this, i2 = r2.d, s2 = (e2 = new r2.constructor(e2)).d, o2 = r2.s, a2 = e2.s;
        if (!i2 || !s2) return o2 && a2 ? o2 !== a2 ? o2 : i2 === s2 ? 0 : !i2 ^ o2 < 0 ? 1 : -1 : NaN;
        if (!i2[0] || !s2[0]) return i2[0] ? o2 : s2[0] ? -a2 : 0;
        if (o2 !== a2) return o2;
        if (r2.e !== e2.e) return r2.e > e2.e ^ o2 < 0 ? 1 : -1;
        for (t2 = 0, n3 = (r2 = i2.length) < (e2 = s2.length) ? r2 : e2; t2 < n3; ++t2) if (i2[t2] !== s2[t2]) return i2[t2] > s2[t2] ^ o2 < 0 ? 1 : -1;
        return r2 === e2 ? 0 : e2 < r2 ^ o2 < 0 ? 1 : -1;
      }, N.cosine = N.cos = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return n3.d ? n3.d[0] ? (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + Math.max(n3.e, n3.sd()) + _, r2.rounding = 1, n3 = function(e3, t3) {
          var n4, r3 = t3.d.length, r3 = r3 < 32 ? (1 / Y(4, n4 = Math.ceil(r3 / 3))).toString() : (n4 = 16, "2.3283064365386962890625e-10");
          e3.precision += n4, t3 = Q(e3, 1, t3.times(r3), new e3(1));
          for (var i2 = n4; i2--; ) {
            var s2 = t3.times(t3);
            t3 = s2.times(s2).minus(s2).times(8).plus(1);
          }
          return e3.precision -= n4, t3;
        }(r2, W(r2, n3)), r2.precision = e2, r2.rounding = t2, P(2 == s || 3 == s ? n3.neg() : n3, e2, t2, true)) : new r2(1) : new r2(NaN);
      }, N.cubeRoot = N.cbrt = function() {
        var e2, t2, n3, r2, i2, s2, o2, a2, u2, l2, c2 = this, p2 = c2.constructor;
        if (!c2.isFinite() || c2.isZero()) return new p2(c2);
        for (y = false, (s2 = c2.s * v(c2.s * c2, 1 / 3)) && Math.abs(s2) != 1 / 0 ? r2 = new p2(s2.toString()) : (n3 = E(c2.d), (s2 = ((e2 = c2.e) - n3.length + 1) % 3) && (n3 += 1 == s2 || -2 == s2 ? "0" : "00"), s2 = v(n3, 1 / 3), e2 = I((e2 + 1) / 3) - (e2 % 3 == (e2 < 0 ? -1 : 2)), (r2 = new p2(n3 = s2 == 1 / 0 ? "5e" + e2 : (n3 = s2.toExponential()).slice(0, n3.indexOf("e") + 1) + e2)).s = c2.s), o2 = (e2 = p2.precision) + 3; ; ) if (l2 = (u2 = (a2 = r2).times(a2).times(a2)).plus(c2), r2 = C(l2.plus(c2).times(a2), l2.plus(u2), o2 + 2, 1), E(a2.d).slice(0, o2) === (n3 = E(r2.d)).slice(0, o2)) {
          if ("9999" != (n3 = n3.slice(o2 - 3, o2 + 1)) && (i2 || "4999" != n3)) {
            +n3 && (+n3.slice(1) || "5" != n3.charAt(0)) || (P(r2, e2 + 1, 1), t2 = !r2.times(r2).times(r2).eq(c2));
            break;
          }
          if (!i2 && (P(a2, e2 + 1, 0), a2.times(a2).times(a2).eq(c2))) {
            r2 = a2;
            break;
          }
          o2 += 4, i2 = 1;
        }
        return y = true, P(r2, e2, p2.rounding, t2);
      }, N.decimalPlaces = N.dp = function() {
        var e2, t2 = this.d, n3 = NaN;
        if (t2) {
          if (n3 = ((e2 = t2.length - 1) - I(this.e / _)) * _, e2 = t2[e2]) for (; e2 % 10 == 0; e2 /= 10) n3--;
          n3 < 0 && (n3 = 0);
        }
        return n3;
      }, N.dividedBy = N.div = function(e2) {
        return C(this, new this.constructor(e2));
      }, N.dividedToIntegerBy = N.divToInt = function(e2) {
        var t2 = this.constructor;
        return P(C(this, new t2(e2), 0, 1, 1), t2.precision, t2.rounding);
      }, N.equals = N.eq = function(e2) {
        return 0 === this.cmp(e2);
      }, N.floor = function() {
        return P(new this.constructor(this), this.e + 1, 3);
      }, N.greaterThan = N.gt = function(e2) {
        return 0 < this.cmp(e2);
      }, N.greaterThanOrEqualTo = N.gte = function(e2) {
        e2 = this.cmp(e2);
        return 1 == e2 || 0 === e2;
      }, N.hyperbolicCosine = N.cosh = function() {
        var e2, t2, n3, r2 = (a2 = this).constructor, i2 = new r2(1);
        if (!a2.isFinite()) return new r2(a2.s ? 1 / 0 : NaN);
        if (a2.isZero()) return i2;
        t2 = r2.precision, n3 = r2.rounding, r2.precision = t2 + Math.max(a2.e, a2.sd()) + 4, r2.rounding = 1;
        for (var s2, o2 = (o2 = a2.d.length) < 32 ? (1 / Y(4, e2 = Math.ceil(o2 / 3))).toString() : (e2 = 16, "2.3283064365386962890625e-10"), a2 = Q(r2, 1, a2.times(o2), new r2(1), true), u2 = e2, l2 = new r2(8); u2--; ) s2 = a2.times(a2), a2 = i2.minus(s2.times(l2.minus(s2.times(l2))));
        return P(a2, r2.precision = t2, r2.rounding = n3, true);
      }, N.hyperbolicSine = N.sinh = function() {
        var e2, t2, n3, r2 = (o2 = this).constructor;
        if (!o2.isFinite() || o2.isZero()) return new r2(o2);
        if (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + Math.max(o2.e, o2.sd()) + 4, r2.rounding = 1, (n3 = o2.d.length) < 3) o2 = Q(r2, 2, o2, o2, true);
        else for (var i2, s2 = 16 < (s2 = 1.4 * Math.sqrt(n3)) ? 16 : 0 | s2, o2 = Q(r2, 2, o2 = o2.times(1 / Y(5, s2)), o2, true), a2 = new r2(5), u2 = new r2(16), l2 = new r2(20); s2--; ) i2 = o2.times(o2), o2 = o2.times(a2.plus(i2.times(u2.times(i2).plus(l2))));
        return P(o2, r2.precision = e2, r2.rounding = t2, true);
      }, N.hyperbolicTangent = N.tanh = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return n3.isFinite() ? n3.isZero() ? new r2(n3) : (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + 7, r2.rounding = 1, C(n3.sinh(), n3.cosh(), r2.precision = e2, r2.rounding = t2)) : new r2(n3.s);
      }, N.inverseCosine = N.acos = function() {
        var e2 = this, t2 = e2.constructor, n3 = e2.abs().cmp(1), r2 = t2.precision, i2 = t2.rounding;
        return -1 !== n3 ? 0 === n3 ? e2.isNeg() ? B(t2, r2, i2) : new t2(0) : new t2(NaN) : e2.isZero() ? B(t2, r2 + 4, i2).times(0.5) : (t2.precision = r2 + 6, t2.rounding = 1, e2 = e2.asin(), n3 = B(t2, r2 + 4, i2).times(0.5), t2.precision = r2, t2.rounding = i2, n3.minus(e2));
      }, N.inverseHyperbolicCosine = N.acosh = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return n3.lte(1) ? new r2(n3.eq(1) ? 0 : NaN) : n3.isFinite() ? (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + Math.max(Math.abs(n3.e), n3.sd()) + 4, r2.rounding = 1, y = false, n3 = n3.times(n3).minus(1).sqrt().plus(n3), y = true, r2.precision = e2, r2.rounding = t2, n3.ln()) : new r2(n3);
      }, N.inverseHyperbolicSine = N.asinh = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return !n3.isFinite() || n3.isZero() ? new r2(n3) : (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + 2 * Math.max(Math.abs(n3.e), n3.sd()) + 6, r2.rounding = 1, y = false, n3 = n3.times(n3).plus(1).sqrt().plus(n3), y = true, r2.precision = e2, r2.rounding = t2, n3.ln());
      }, N.inverseHyperbolicTangent = N.atanh = function() {
        var e2, t2, n3, r2 = this, i2 = r2.constructor;
        return r2.isFinite() ? 0 <= r2.e ? new i2(r2.abs().eq(1) ? r2.s / 0 : r2.isZero() ? r2 : NaN) : (e2 = i2.precision, t2 = i2.rounding, n3 = r2.sd(), Math.max(n3, e2) < 2 * -r2.e - 1 ? P(new i2(r2), e2, t2, true) : (i2.precision = n3 = n3 - r2.e, r2 = C(r2.plus(1), new i2(1).minus(r2), n3 + e2, 1), i2.precision = e2 + 4, i2.rounding = 1, r2 = r2.ln(), i2.precision = e2, i2.rounding = t2, r2.times(0.5))) : new i2(NaN);
      }, N.inverseSine = N.asin = function() {
        var e2, t2, n3, r2 = this, i2 = r2.constructor;
        return r2.isZero() ? new i2(r2) : (e2 = r2.abs().cmp(1), t2 = i2.precision, n3 = i2.rounding, -1 !== e2 ? 0 === e2 ? ((e2 = B(i2, t2 + 4, n3).times(0.5)).s = r2.s, e2) : new i2(NaN) : (i2.precision = t2 + 6, i2.rounding = 1, r2 = r2.div(new i2(1).minus(r2.times(r2)).sqrt().plus(1)).atan(), i2.precision = t2, i2.rounding = n3, r2.times(2)));
      }, N.inverseTangent = N.atan = function() {
        var e2, t2, n3, r2, i2, s2, o2, a2, u2, l2 = this, c2 = l2.constructor, p2 = c2.precision, f2 = c2.rounding;
        if (l2.isFinite()) {
          if (l2.isZero()) return new c2(l2);
          if (l2.abs().eq(1) && p2 + 4 <= M) return (o2 = B(c2, p2 + 4, f2).times(0.25)).s = l2.s, o2;
        } else {
          if (!l2.s) return new c2(NaN);
          if (p2 + 4 <= M) return (o2 = B(c2, p2 + 4, f2).times(0.5)).s = l2.s, o2;
        }
        for (c2.precision = a2 = p2 + 10, c2.rounding = 1, e2 = n3 = Math.min(28, a2 / _ + 2 | 0); e2; --e2) l2 = l2.div(l2.times(l2).plus(1).sqrt().plus(1));
        for (y = false, t2 = Math.ceil(a2 / _), r2 = 1, u2 = l2.times(l2), o2 = new c2(l2), i2 = l2; -1 !== e2; ) if (i2 = i2.times(u2), s2 = o2.minus(i2.div(r2 += 2)), i2 = i2.times(u2), void 0 !== (o2 = s2.plus(i2.div(r2 += 2))).d[t2]) for (e2 = t2; o2.d[e2] === s2.d[e2] && e2--; ) ;
        return n3 && (o2 = o2.times(2 << n3 - 1)), y = true, P(o2, c2.precision = p2, c2.rounding = f2, true);
      }, N.isFinite = function() {
        return !!this.d;
      }, N.isInteger = N.isInt = function() {
        return !!this.d && I(this.e / _) > this.d.length - 2;
      }, N.isNaN = function() {
        return !this.s;
      }, N.isNegative = N.isNeg = function() {
        return this.s < 0;
      }, N.isPositive = N.isPos = function() {
        return 0 < this.s;
      }, N.isZero = function() {
        return !!this.d && 0 === this.d[0];
      }, N.lessThan = N.lt = function(e2) {
        return this.cmp(e2) < 0;
      }, N.lessThanOrEqualTo = N.lte = function(e2) {
        return this.cmp(e2) < 1;
      }, N.logarithm = N.log = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2, u2, l2 = this.constructor, c2 = l2.precision, p2 = l2.rounding;
        if (null == e2) e2 = new l2(10), t2 = true;
        else {
          if (n3 = (e2 = new l2(e2)).d, e2.s < 0 || !n3 || !n3[0] || e2.eq(1)) return new l2(NaN);
          t2 = e2.eq(10);
        }
        if (n3 = this.d, this.s < 0 || !n3 || !n3[0] || this.eq(1)) return new l2(n3 && !n3[0] ? -1 / 0 : 1 != this.s ? NaN : n3 ? 0 : 1 / 0);
        if (t2) if (1 < n3.length) s2 = true;
        else {
          for (i2 = n3[0]; i2 % 10 == 0; ) i2 /= 10;
          s2 = 1 !== i2;
        }
        if (y = false, o2 = $(this, a2 = c2 + 5), r2 = t2 ? F(l2, a2 + 10) : $(e2, a2), x((u2 = C(o2, r2, a2, 1)).d, i2 = c2, p2)) do {
          if (o2 = $(this, a2 += 10), r2 = t2 ? F(l2, a2 + 10) : $(e2, a2), u2 = C(o2, r2, a2, 1), !s2) {
            +E(u2.d).slice(i2 + 1, i2 + 15) + 1 == 1e14 && (u2 = P(u2, c2 + 1, 0));
            break;
          }
        } while (x(u2.d, i2 += 10, p2));
        return y = true, P(u2, c2, p2);
      }, N.minus = N.sub = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2, u2, l2, c2, p2, f2 = this, h2 = f2.constructor;
        if (e2 = new h2(e2), !f2.d || !e2.d) return f2.s && e2.s ? f2.d ? e2.s = -e2.s : e2 = new h2(e2.d || f2.s !== e2.s ? f2 : NaN) : e2 = new h2(NaN), e2;
        if (f2.s != e2.s) return e2.s = -e2.s, f2.plus(e2);
        if (l2 = f2.d, p2 = e2.d, a2 = h2.precision, u2 = h2.rounding, !l2[0] || !p2[0]) {
          if (p2[0]) e2.s = -e2.s;
          else {
            if (!l2[0]) return new h2(3 === u2 ? -0 : 0);
            e2 = new h2(f2);
          }
          return y ? P(e2, a2, u2) : e2;
        }
        if (n3 = I(e2.e / _), f2 = I(f2.e / _), l2 = l2.slice(), s2 = f2 - n3) {
          for (o2 = (c2 = s2 < 0) ? (t2 = l2, s2 = -s2, p2.length) : (t2 = p2, n3 = f2, l2.length), s2 > (r2 = Math.max(Math.ceil(a2 / _), o2) + 2) && (s2 = r2, t2.length = 1), t2.reverse(), r2 = s2; r2--; ) t2.push(0);
          t2.reverse();
        } else {
          for ((c2 = (r2 = l2.length) < (o2 = p2.length)) && (o2 = r2), r2 = 0; r2 < o2; r2++) if (l2[r2] != p2[r2]) {
            c2 = l2[r2] < p2[r2];
            break;
          }
          s2 = 0;
        }
        for (c2 && (t2 = l2, l2 = p2, p2 = t2, e2.s = -e2.s), o2 = l2.length, r2 = p2.length - o2; 0 < r2; --r2) l2[o2++] = 0;
        for (r2 = p2.length; s2 < r2; ) {
          if (l2[--r2] < p2[r2]) {
            for (i2 = r2; i2 && 0 === l2[--i2]; ) l2[i2] = U - 1;
            --l2[i2], l2[r2] += U;
          }
          l2[r2] -= p2[r2];
        }
        for (; 0 === l2[--o2]; ) l2.pop();
        for (; 0 === l2[0]; l2.shift()) --n3;
        return l2[0] ? (e2.d = l2, e2.e = D(l2, n3), y ? P(e2, a2, u2) : e2) : new h2(3 === u2 ? -0 : 0);
      }, N.modulo = N.mod = function(e2) {
        var t2, n3 = this, r2 = n3.constructor;
        return e2 = new r2(e2), !n3.d || !e2.s || e2.d && !e2.d[0] ? new r2(NaN) : !e2.d || n3.d && !n3.d[0] ? P(new r2(n3), r2.precision, r2.rounding) : (y = false, 9 == r2.modulo ? (t2 = C(n3, e2.abs(), 0, 3, 1)).s *= e2.s : t2 = C(n3, e2, 0, r2.modulo, 1), t2 = t2.times(e2), y = true, n3.minus(t2));
      }, N.naturalExponential = N.exp = function() {
        return X(this);
      }, N.naturalLogarithm = N.ln = function() {
        return $(this);
      }, N.negated = N.neg = function() {
        var e2 = new this.constructor(this);
        return e2.s = -e2.s, P(e2);
      }, N.plus = N.add = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2, u2, l2 = this, c2 = l2.constructor;
        if (e2 = new c2(e2), !l2.d || !e2.d) return l2.s && e2.s ? l2.d || (e2 = new c2(e2.d || l2.s === e2.s ? l2 : NaN)) : e2 = new c2(NaN), e2;
        if (l2.s != e2.s) return e2.s = -e2.s, l2.minus(e2);
        if (a2 = l2.d, u2 = e2.d, s2 = c2.precision, o2 = c2.rounding, !a2[0] || !u2[0]) return u2[0] || (e2 = new c2(l2)), y ? P(e2, s2, o2) : e2;
        if (c2 = I(l2.e / _), l2 = I(e2.e / _), a2 = a2.slice(), r2 = c2 - l2) {
          for (i2 = r2 < 0 ? (n3 = a2, r2 = -r2, u2.length) : (n3 = u2, l2 = c2, a2.length), r2 > (i2 = (c2 = Math.ceil(s2 / _)) > i2 ? c2 + 1 : i2 + 1) && (r2 = i2, n3.length = 1), n3.reverse(); r2--; ) n3.push(0);
          n3.reverse();
        }
        for ((i2 = a2.length) - (r2 = u2.length) < 0 && (r2 = i2, n3 = u2, u2 = a2, a2 = n3), t2 = 0; r2; ) t2 = (a2[--r2] = a2[r2] + u2[r2] + t2) / U | 0, a2[r2] %= U;
        for (t2 && (a2.unshift(t2), ++l2), i2 = a2.length; 0 == a2[--i2]; ) a2.pop();
        return e2.d = a2, e2.e = D(a2, l2), y ? P(e2, s2, o2) : e2;
      }, N.precision = N.sd = function(e2) {
        var t2;
        if (void 0 !== e2 && e2 !== !!e2 && 1 !== e2 && 0 !== e2) throw Error(d + e2);
        return this.d ? (t2 = G(this.d), e2 && this.e + 1 > t2 && (t2 = this.e + 1)) : t2 = NaN, t2;
      }, N.round = function() {
        var e2 = this.constructor;
        return P(new e2(this), this.e + 1, e2.rounding);
      }, N.sine = N.sin = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return n3.isFinite() ? n3.isZero() ? new r2(n3) : (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + Math.max(n3.e, n3.sd()) + _, r2.rounding = 1, n3 = function(e3, t3) {
          var n4, r3 = t3.d.length;
          if (r3 < 3) return Q(e3, 2, t3, t3);
          n4 = 16 < (n4 = 1.4 * Math.sqrt(r3)) ? 16 : 0 | n4, t3 = Q(e3, 2, t3 = t3.times(1 / Y(5, n4)), t3);
          for (var i2, s2 = new e3(5), o2 = new e3(16), a2 = new e3(20); n4--; ) i2 = t3.times(t3), t3 = t3.times(s2.plus(i2.times(o2.times(i2).minus(a2))));
          return t3;
        }(r2, W(r2, n3)), r2.precision = e2, r2.rounding = t2, P(2 < s ? n3.neg() : n3, e2, t2, true)) : new r2(NaN);
      }, N.squareRoot = N.sqrt = function() {
        var e2, t2, n3, r2, i2, s2, o2 = this, a2 = o2.d, u2 = o2.e, l2 = o2.s, c2 = o2.constructor;
        if (1 !== l2 || !a2 || !a2[0]) return new c2(!l2 || l2 < 0 && (!a2 || a2[0]) ? NaN : a2 ? o2 : 1 / 0);
        for (y = false, r2 = 0 == (l2 = Math.sqrt(+o2)) || l2 == 1 / 0 ? (((t2 = E(a2)).length + u2) % 2 == 0 && (t2 += "0"), l2 = Math.sqrt(t2), u2 = I((u2 + 1) / 2) - (u2 < 0 || u2 % 2), new c2(t2 = l2 == 1 / 0 ? "5e" + u2 : (t2 = l2.toExponential()).slice(0, t2.indexOf("e") + 1) + u2)) : new c2(l2.toString()), n3 = (u2 = c2.precision) + 3; ; ) if (r2 = (s2 = r2).plus(C(o2, s2, n3 + 2, 1)).times(0.5), E(s2.d).slice(0, n3) === (t2 = E(r2.d)).slice(0, n3)) {
          if ("9999" != (t2 = t2.slice(n3 - 3, n3 + 1)) && (i2 || "4999" != t2)) {
            +t2 && (+t2.slice(1) || "5" != t2.charAt(0)) || (P(r2, u2 + 1, 1), e2 = !r2.times(r2).eq(o2));
            break;
          }
          if (!i2 && (P(s2, u2 + 1, 0), s2.times(s2).eq(o2))) {
            r2 = s2;
            break;
          }
          n3 += 4, i2 = 1;
        }
        return y = true, P(r2, u2, c2.rounding, e2);
      }, N.tangent = N.tan = function() {
        var e2, t2, n3 = this, r2 = n3.constructor;
        return n3.isFinite() ? n3.isZero() ? new r2(n3) : (e2 = r2.precision, t2 = r2.rounding, r2.precision = e2 + 10, r2.rounding = 1, (n3 = n3.sin()).s = 1, n3 = C(n3, new r2(1).minus(n3.times(n3)).sqrt(), e2 + 10, 0), r2.precision = e2, r2.rounding = t2, P(2 == s || 4 == s ? n3.neg() : n3, e2, t2, true)) : new r2(NaN);
      }, N.times = N.mul = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2, u2, l2, c2 = this.constructor, p2 = this.d, f2 = (e2 = new c2(e2)).d;
        if (e2.s *= this.s, !(p2 && p2[0] && f2 && f2[0])) return new c2(!e2.s || p2 && !p2[0] && !f2 || f2 && !f2[0] && !p2 ? NaN : p2 && f2 ? 0 * e2.s : e2.s / 0);
        for (n3 = I(this.e / _) + I(e2.e / _), (u2 = p2.length) < (l2 = f2.length) && (s2 = p2, p2 = f2, f2 = s2, o2 = u2, u2 = l2, l2 = o2), s2 = [], r2 = o2 = u2 + l2; r2--; ) s2.push(0);
        for (r2 = l2; 0 <= --r2; ) {
          for (t2 = 0, i2 = u2 + r2; r2 < i2; ) a2 = s2[i2] + f2[r2] * p2[i2 - r2 - 1] + t2, s2[i2--] = a2 % U | 0, t2 = a2 / U | 0;
          s2[i2] = (s2[i2] + t2) % U | 0;
        }
        for (; !s2[--o2]; ) s2.pop();
        return t2 ? ++n3 : s2.shift(), e2.d = s2, e2.e = D(s2, n3), y ? P(e2, c2.precision, c2.rounding) : e2;
      }, N.toBinary = function(e2, t2) {
        return J(this, 2, e2, t2);
      }, N.toDecimalPlaces = N.toDP = function(e2, t2) {
        var n3 = this.constructor, r2 = new n3(this);
        return void 0 === e2 ? r2 : (q(e2, 0, m), void 0 === t2 ? t2 = n3.rounding : q(t2, 0, 8), P(r2, e2 + r2.e + 1, t2));
      }, N.toExponential = function(e2, t2) {
        var n3 = this, r2 = n3.constructor, e2 = void 0 === e2 ? k(n3, true) : (q(e2, 0, m), void 0 === t2 ? t2 = r2.rounding : q(t2, 0, 8), k(n3 = P(new r2(n3), e2 + 1, t2), true, e2 + 1));
        return n3.isNeg() && !n3.isZero() ? "-" + e2 : e2;
      }, N.toFixed = function(e2, t2) {
        var n3 = this, r2 = n3.constructor, i2 = void 0 === e2 ? k(n3) : (q(e2, 0, m), void 0 === t2 ? t2 = r2.rounding : q(t2, 0, 8), k(i2 = P(new r2(n3), e2 + n3.e + 1, t2), false, e2 + i2.e + 1));
        return n3.isNeg() && !n3.isZero() ? "-" + i2 : i2;
      }, N.toFraction = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2, u2, l2, c2, p2 = this, f2 = p2.d, h2 = p2.constructor;
        if (!f2) return new h2(p2);
        if (u2 = n3 = new h2(1), r2 = a2 = new h2(0), l2 = (s2 = (t2 = new h2(r2)).e = G(f2) - p2.e - 1) % _, t2.d[0] = v(10, l2 < 0 ? _ + l2 : l2), null == e2) e2 = 0 < s2 ? t2 : u2;
        else {
          if (!(o2 = new h2(e2)).isInt() || o2.lt(u2)) throw Error(d + o2);
          e2 = o2.gt(t2) ? 0 < s2 ? t2 : u2 : o2;
        }
        for (y = false, o2 = new h2(E(f2)), l2 = h2.precision, h2.precision = s2 = f2.length * _ * 2; c2 = C(o2, t2, 0, 1, 1), 1 != (i2 = n3.plus(c2.times(r2))).cmp(e2); ) n3 = r2, r2 = i2, u2 = a2.plus(c2.times(i2 = u2)), a2 = i2, t2 = o2.minus(c2.times(i2 = t2)), o2 = i2;
        return i2 = C(e2.minus(n3), r2, 0, 1, 1), a2 = a2.plus(i2.times(u2)), n3 = n3.plus(i2.times(r2)), a2.s = u2.s = p2.s, p2 = C(u2, r2, s2, 1).minus(p2).abs().cmp(C(a2, n3, s2, 1).minus(p2).abs()) < 1 ? [u2, r2] : [a2, n3], h2.precision = l2, y = true, p2;
      }, N.toHexadecimal = N.toHex = function(e2, t2) {
        return J(this, 16, e2, t2);
      }, N.toNearest = function(e2, t2) {
        var n3 = (r2 = this).constructor, r2 = new n3(r2);
        if (null == e2) {
          if (!r2.d) return r2;
          e2 = new n3(1), t2 = n3.rounding;
        } else {
          if (e2 = new n3(e2), void 0 === t2 ? t2 = n3.rounding : q(t2, 0, 8), !r2.d) return e2.s ? r2 : e2;
          if (!e2.d) return e2.s && (e2.s = r2.s), e2;
        }
        return e2.d[0] ? (y = false, r2 = C(r2, e2, 0, t2, 1).times(e2), y = true, P(r2)) : (e2.s = r2.s, r2 = e2), r2;
      }, N.toNumber = function() {
        return +this;
      }, N.toOctal = function(e2, t2) {
        return J(this, 8, e2, t2);
      }, N.toPower = N.pow = function(e2) {
        var t2, n3, r2, i2, s2, o2, a2 = this, u2 = a2.constructor, l2 = +(e2 = new u2(e2));
        if (!(a2.d && e2.d && a2.d[0] && e2.d[0])) return new u2(v(+a2, l2));
        if ((a2 = new u2(a2)).eq(1)) return a2;
        if (r2 = u2.precision, s2 = u2.rounding, e2.eq(1)) return P(a2, r2, s2);
        if ((t2 = I(e2.e / _)) >= e2.d.length - 1 && (n3 = l2 < 0 ? -l2 : l2) <= 9007199254740991) return i2 = H(u2, a2, n3, r2), e2.s < 0 ? new u2(1).div(i2) : P(i2, r2, s2);
        if ((o2 = a2.s) < 0) {
          if (t2 < e2.d.length - 1) return new u2(NaN);
          if (0 == (1 & e2.d[t2]) && (o2 = 1), 0 == a2.e && 1 == a2.d[0] && 1 == a2.d.length) return a2.s = o2, a2;
        }
        return (t2 = 0 != (n3 = v(+a2, l2)) && isFinite(n3) ? new u2(n3 + "").e : I(l2 * (Math.log("0." + E(a2.d)) / Math.LN10 + a2.e + 1))) > u2.maxE + 1 || t2 < u2.minE - 1 ? new u2(0 < t2 ? o2 / 0 : 0) : (y = false, u2.rounding = a2.s = 1, n3 = Math.min(12, (t2 + "").length), (i2 = X(e2.times($(a2, r2 + n3)), r2)).d && x((i2 = P(i2, r2 + 5, 1)).d, r2, s2) && (+E((i2 = P(X(e2.times($(a2, (t2 = r2 + 10) + n3)), t2), t2 + 5, 1)).d).slice(r2 + 1, r2 + 15) + 1 == 1e14 && (i2 = P(i2, r2 + 1, 0))), i2.s = o2, y = true, P(i2, r2, u2.rounding = s2));
      }, N.toPrecision = function(e2, t2) {
        var n3 = this, r2 = n3.constructor, e2 = void 0 === e2 ? k(n3, n3.e <= r2.toExpNeg || n3.e >= r2.toExpPos) : (q(e2, 1, m), void 0 === t2 ? t2 = r2.rounding : q(t2, 0, 8), k(n3 = P(new r2(n3), e2, t2), e2 <= n3.e || n3.e <= r2.toExpNeg, e2));
        return n3.isNeg() && !n3.isZero() ? "-" + e2 : e2;
      }, N.toSignificantDigits = N.toSD = function(e2, t2) {
        var n3 = this.constructor;
        return void 0 === e2 ? (e2 = n3.precision, t2 = n3.rounding) : (q(e2, 1, m), void 0 === t2 ? t2 = n3.rounding : q(t2, 0, 8)), P(new n3(this), e2, t2);
      }, N.toString = function() {
        var e2 = this.constructor, e2 = k(this, this.e <= e2.toExpNeg || this.e >= e2.toExpPos);
        return this.isNeg() && !this.isZero() ? "-" + e2 : e2;
      }, N.truncated = N.trunc = function() {
        return P(new this.constructor(this), this.e + 1, 1);
      }, N.valueOf = N.toJSON = function() {
        var e2 = this.constructor, e2 = k(this, this.e <= e2.toExpNeg || this.e >= e2.toExpPos);
        return this.isNeg() ? "-" + e2 : e2;
      };
      var C = function(e2, t2, n3, r2, i2, s2) {
        var o2, a2, u2, l2, c2, p2, f2, h2, m2, g2, d2, v2, w2, y2, b2, S2, M2, N2, E2, q2 = e2.constructor, x2 = e2.s == t2.s ? 1 : -1, A2 = e2.d, C2 = t2.d;
        if (!(A2 && A2[0] && C2 && C2[0])) return new q2(e2.s && t2.s && (A2 ? !C2 || A2[0] != C2[0] : C2) ? A2 && 0 == A2[0] || !C2 ? 0 * x2 : x2 / 0 : NaN);
        for (a2 = s2 ? (c2 = 1, e2.e - t2.e) : (s2 = U, I(e2.e / (c2 = _)) - I(t2.e / c2)), N2 = C2.length, S2 = A2.length, m2 = (x2 = new q2(x2)).d = [], u2 = 0; C2[u2] == (A2[u2] || 0); u2++) ;
        if (C2[u2] > (A2[u2] || 0) && a2--, null == n3 ? (w2 = n3 = q2.precision, r2 = q2.rounding) : w2 = i2 ? n3 + (e2.e - t2.e) + 1 : n3, w2 < 0) m2.push(1), p2 = true;
        else {
          if (w2 = w2 / c2 + 2 | 0, u2 = 0, 1 == N2) {
            for (C2 = C2[l2 = 0], w2++; (u2 < S2 || l2) && w2--; u2++) y2 = l2 * s2 + (A2[u2] || 0), m2[u2] = y2 / C2 | 0, l2 = y2 % C2 | 0;
            p2 = l2 || u2 < S2;
          } else {
            for (1 < (l2 = s2 / (C2[0] + 1) | 0) && (C2 = O(C2, l2, s2), A2 = O(A2, l2, s2), N2 = C2.length, S2 = A2.length), d2 = (g2 = A2.slice(0, b2 = N2)).length; d2 < N2; ) g2[d2++] = 0;
            for ((E2 = C2.slice()).unshift(0), M2 = C2[0], C2[1] >= s2 / 2 && ++M2; l2 = 0, (o2 = R(C2, g2, N2, d2)) < 0 ? (v2 = g2[0], 1 < (l2 = (v2 = N2 != d2 ? v2 * s2 + (g2[1] || 0) : v2) / M2 | 0) ? 1 == (o2 = R(f2 = O(C2, l2 = s2 <= l2 ? s2 - 1 : l2, s2), g2, h2 = f2.length, d2 = g2.length)) && (l2--, T(f2, N2 < h2 ? E2 : C2, h2, s2)) : (0 == l2 && (o2 = l2 = 1), f2 = C2.slice()), (h2 = f2.length) < d2 && f2.unshift(0), T(g2, f2, d2, s2), -1 == o2 && (o2 = R(C2, g2, N2, d2 = g2.length)) < 1 && (l2++, T(g2, N2 < d2 ? E2 : C2, d2, s2)), d2 = g2.length) : 0 === o2 && (l2++, g2 = [0]), m2[u2++] = l2, o2 && g2[0] ? g2[d2++] = A2[b2] || 0 : (g2 = [A2[b2]], d2 = 1), (b2++ < S2 || void 0 !== g2[0]) && w2--; ) ;
            p2 = void 0 !== g2[0];
          }
          m2[0] || m2.shift();
        }
        if (1 == c2) x2.e = a2, L = p2;
        else {
          for (u2 = 1, l2 = m2[0]; 10 <= l2; l2 /= 10) u2++;
          x2.e = u2 + a2 * c2 - 1, P(x2, i2 ? n3 + x2.e + 1 : n3, r2, p2);
        }
        return x2;
      };
      function O(e2, t2, n3) {
        var r2, i2 = 0, s2 = e2.length;
        for (e2 = e2.slice(); s2--; ) r2 = e2[s2] * t2 + i2, e2[s2] = r2 % n3 | 0, i2 = r2 / n3 | 0;
        return i2 && e2.unshift(i2), e2;
      }
      function R(e2, t2, n3, r2) {
        var i2, s2;
        if (n3 != r2) s2 = r2 < n3 ? 1 : -1;
        else for (i2 = s2 = 0; i2 < n3; i2++) if (e2[i2] != t2[i2]) {
          s2 = e2[i2] > t2[i2] ? 1 : -1;
          break;
        }
        return s2;
      }
      function T(e2, t2, n3, r2) {
        for (var i2 = 0; n3--; ) e2[n3] -= i2, i2 = e2[n3] < t2[n3] ? 1 : 0, e2[n3] = i2 * r2 + e2[n3] - t2[n3];
        for (; !e2[0] && 1 < e2.length; ) e2.shift();
      }
      function P(e2, t2, n3, r2) {
        var i2, s2, o2, a2, u2, l2, c2, p2, f2 = e2.constructor;
        e: if (null != t2) {
          if (!(c2 = e2.d)) return e2;
          for (i2 = 1, a2 = c2[0]; 10 <= a2; a2 /= 10) i2++;
          if ((s2 = t2 - i2) < 0) s2 += _, u2 = (l2 = c2[p2 = 0]) / v(10, i2 - (o2 = t2) - 1) % 10 | 0;
          else if ((p2 = Math.ceil((s2 + 1) / _)) >= (a2 = c2.length)) {
            if (!r2) break e;
            for (; a2++ <= p2; ) c2.push(0);
            l2 = u2 = 0, o2 = (s2 %= _) - _ + (i2 = 1);
          } else {
            for (l2 = a2 = c2[p2], i2 = 1; 10 <= a2; a2 /= 10) i2++;
            u2 = (o2 = (s2 %= _) - _ + i2) < 0 ? 0 : l2 / v(10, i2 - o2 - 1) % 10 | 0;
          }
          if (r2 = r2 || t2 < 0 || void 0 !== c2[p2 + 1] || (o2 < 0 ? l2 : l2 % v(10, i2 - o2 - 1)), u2 = n3 < 4 ? (u2 || r2) && (0 == n3 || n3 == (e2.s < 0 ? 3 : 2)) : 5 < u2 || 5 == u2 && (4 == n3 || r2 || 6 == n3 && (0 < s2 ? 0 < o2 ? l2 / v(10, i2 - o2) : 0 : c2[p2 - 1]) % 10 & 1 || n3 == (e2.s < 0 ? 8 : 7)), t2 < 1 || !c2[0]) return c2.length = 0, u2 ? (t2 -= e2.e + 1, c2[0] = v(10, (_ - t2 % _) % _), e2.e = -t2 || 0) : c2[0] = e2.e = 0, e2;
          if (0 == s2 ? (c2.length = p2, a2 = 1, p2--) : (c2.length = p2 + 1, a2 = v(10, _ - s2), c2[p2] = 0 < o2 ? (l2 / v(10, i2 - o2) % v(10, o2) | 0) * a2 : 0), u2) for (; ; ) {
            if (0 == p2) {
              for (s2 = 1, o2 = c2[0]; 10 <= o2; o2 /= 10) s2++;
              for (o2 = c2[0] += a2, a2 = 1; 10 <= o2; o2 /= 10) a2++;
              s2 != a2 && (e2.e++, c2[0] == U && (c2[0] = 1));
              break;
            }
            if (c2[p2] += a2, c2[p2] != U) break;
            c2[p2--] = 0, a2 = 1;
          }
          for (s2 = c2.length; 0 === c2[--s2]; ) c2.pop();
        }
        return y && (e2.e > f2.maxE ? (e2.d = null, e2.e = NaN) : e2.e < f2.minE && (e2.e = 0, e2.d = [0])), e2;
      }
      function k(e2, t2, n3) {
        if (!e2.isFinite()) return Z(e2);
        var r2, i2 = e2.e, s2 = E(e2.d), o2 = s2.length;
        return t2 ? (n3 && 0 < (r2 = n3 - o2) ? s2 = s2.charAt(0) + "." + s2.slice(1) + V(r2) : 1 < o2 && (s2 = s2.charAt(0) + "." + s2.slice(1)), s2 = s2 + (e2.e < 0 ? "e" : "e+") + e2.e) : i2 < 0 ? (s2 = "0." + V(-i2 - 1) + s2, n3 && 0 < (r2 = n3 - o2) && (s2 += V(r2))) : o2 <= i2 ? (s2 += V(i2 + 1 - o2), n3 && 0 < (r2 = n3 - i2 - 1) && (s2 = s2 + "." + V(r2))) : ((r2 = i2 + 1) < o2 && (s2 = s2.slice(0, r2) + "." + s2.slice(r2)), n3 && 0 < (r2 = n3 - o2) && (i2 + 1 === o2 && (s2 += "."), s2 += V(r2))), s2;
      }
      function D(e2, t2) {
        var n3 = e2[0];
        for (t2 *= _; 10 <= n3; n3 /= 10) t2++;
        return t2;
      }
      function F(e2, t2, n3) {
        if (S < t2) throw y = true, n3 && (e2.precision = n3), Error(l);
        return P(new e2(r), t2, 1, true);
      }
      function B(e2, t2, n3) {
        if (M < t2) throw Error(l);
        return P(new e2(i), t2, n3, true);
      }
      function G(e2) {
        var t2 = e2.length - 1, n3 = t2 * _ + 1;
        if (t2 = e2[t2]) {
          for (; t2 % 10 == 0; t2 /= 10) n3--;
          for (t2 = e2[0]; 10 <= t2; t2 /= 10) n3++;
        }
        return n3;
      }
      function V(e2) {
        for (var t2 = ""; e2--; ) t2 += "0";
        return t2;
      }
      function H(e2, t2, n3, r2) {
        var i2, s2 = new e2(1), o2 = Math.ceil(r2 / _ + 4);
        for (y = false; ; ) {
          if (n3 % 2 && K((s2 = s2.times(t2)).d, o2) && (i2 = true), 0 === (n3 = I(n3 / 2))) {
            n3 = s2.d.length - 1, i2 && 0 === s2.d[n3] && ++s2.d[n3];
            break;
          }
          K((t2 = t2.times(t2)).d, o2);
        }
        return y = true, s2;
      }
      function j(e2) {
        return 1 & e2.d[e2.d.length - 1];
      }
      function n2(e2, t2, n3) {
        for (var r2, i2 = new e2(t2[0]), s2 = 0; ++s2 < t2.length; ) {
          if (!(r2 = new e2(t2[s2])).s) {
            i2 = r2;
            break;
          }
          i2[n3](r2) && (i2 = r2);
        }
        return i2;
      }
      function X(e2, t2) {
        var n3, r2, i2, s2, o2, a2, u2, l2 = 0, c2 = 0, p2 = 0, f2 = e2.constructor, h2 = f2.rounding, m2 = f2.precision;
        if (!e2.d || !e2.d[0] || 17 < e2.e) return new f2(e2.d ? e2.d[0] ? e2.s < 0 ? 0 : 1 / 0 : 1 : e2.s ? e2.s < 0 ? 0 : e2 : NaN);
        for (u2 = null == t2 ? (y = false, m2) : t2, a2 = new f2(0.03125); -2 < e2.e; ) e2 = e2.times(a2), p2 += 5;
        for (u2 += r2 = Math.log(v(2, p2)) / Math.LN10 * 2 + 5 | 0, n3 = s2 = o2 = new f2(1), f2.precision = u2; ; ) {
          if (s2 = P(s2.times(e2), u2, 1), n3 = n3.times(++c2), E((a2 = o2.plus(C(s2, n3, u2, 1))).d).slice(0, u2) === E(o2.d).slice(0, u2)) {
            for (i2 = p2; i2--; ) o2 = P(o2.times(o2), u2, 1);
            if (null != t2) return f2.precision = m2, o2;
            if (!(l2 < 3 && x(o2.d, u2 - r2, h2, l2))) return P(o2, f2.precision = m2, h2, y = true);
            f2.precision = u2 += 10, n3 = s2 = a2 = new f2(1), c2 = 0, l2++;
          }
          o2 = a2;
        }
      }
      function $(e2, t2) {
        var n3, r2, i2, s2, o2, a2, u2, l2, c2, p2, f2, h2 = 1, m2 = e2, g2 = m2.d, d2 = m2.constructor, v2 = d2.rounding, w2 = d2.precision;
        if (m2.s < 0 || !g2 || !g2[0] || !m2.e && 1 == g2[0] && 1 == g2.length) return new d2(g2 && !g2[0] ? -1 / 0 : 1 != m2.s ? NaN : g2 ? 0 : m2);
        if (c2 = null == t2 ? (y = false, w2) : t2, d2.precision = c2 += 10, r2 = (n3 = E(g2)).charAt(0), !(Math.abs(s2 = m2.e) < 15e14)) return l2 = F(d2, c2 + 2, w2).times(s2 + ""), m2 = $(new d2(r2 + "." + n3.slice(1)), c2 - 10).plus(l2), d2.precision = w2, null == t2 ? P(m2, w2, v2, y = true) : m2;
        for (; r2 < 7 && 1 != r2 || 1 == r2 && 3 < n3.charAt(1); ) r2 = (n3 = E((m2 = m2.times(e2)).d)).charAt(0), h2++;
        for (s2 = m2.e, 1 < r2 ? (m2 = new d2("0." + n3), s2++) : m2 = new d2(r2 + "." + n3.slice(1)), u2 = o2 = m2 = C((p2 = m2).minus(1), m2.plus(1), c2, 1), f2 = P(m2.times(m2), c2, 1), i2 = 3; ; ) {
          if (o2 = P(o2.times(f2), c2, 1), E((l2 = u2.plus(C(o2, new d2(i2), c2, 1))).d).slice(0, c2) === E(u2.d).slice(0, c2)) {
            if (u2 = u2.times(2), 0 !== s2 && (u2 = u2.plus(F(d2, c2 + 2, w2).times(s2 + ""))), u2 = C(u2, new d2(h2), c2, 1), null != t2) return d2.precision = w2, u2;
            if (!x(u2.d, c2 - 10, v2, a2)) return P(u2, d2.precision = w2, v2, y = true);
            d2.precision = c2 += 10, l2 = o2 = m2 = C(p2.minus(1), p2.plus(1), c2, 1), f2 = P(m2.times(m2), c2, 1), i2 = a2 = 1;
          }
          u2 = l2, i2 += 2;
        }
      }
      function Z(e2) {
        return String(e2.s * e2.s / 0);
      }
      function z(e2, t2) {
        var n3, r2, i2;
        for (0 < (r2 = (t2 = -1 < (n3 = t2.indexOf(".")) ? t2.replace(".", "") : t2).search(/e/i)) ? (n3 < 0 && (n3 = r2), n3 += +t2.slice(r2 + 1), t2 = t2.substring(0, r2)) : n3 < 0 && (n3 = t2.length), r2 = 0; 48 === t2.charCodeAt(r2); r2++) ;
        for (i2 = t2.length; 48 === t2.charCodeAt(i2 - 1); --i2) ;
        if (t2 = t2.slice(r2, i2)) {
          if (i2 -= r2, e2.e = n3 = n3 - r2 - 1, e2.d = [], r2 = (n3 + 1) % _, n3 < 0 && (r2 += _), r2 < i2) {
            for (r2 && e2.d.push(+t2.slice(0, r2)), i2 -= _; r2 < i2; ) e2.d.push(+t2.slice(r2, r2 += _));
            t2 = t2.slice(r2), r2 = _ - t2.length;
          } else r2 -= i2;
          for (; r2--; ) t2 += "0";
          e2.d.push(+t2), y && (e2.e > e2.constructor.maxE ? (e2.d = null, e2.e = NaN) : e2.e < e2.constructor.minE && (e2.e = 0, e2.d = [0]));
        } else e2.e = 0, e2.d = [0];
        return e2;
      }
      function Q(e2, t2, n3, r2, i2) {
        var s2, o2, a2, u2, l2 = e2.precision, c2 = Math.ceil(l2 / _);
        for (y = false, u2 = n3.times(n3), a2 = new e2(r2); ; ) {
          if (o2 = C(a2.times(u2), new e2(t2++ * t2++), l2, 1), a2 = i2 ? r2.plus(o2) : r2.minus(o2), r2 = C(o2.times(u2), new e2(t2++ * t2++), l2, 1), void 0 !== (o2 = a2.plus(r2)).d[c2]) {
            for (s2 = c2; o2.d[s2] === a2.d[s2] && s2--; ) ;
            if (-1 == s2) break;
          }
          s2 = a2, a2 = r2, r2 = o2, o2 = s2;
        }
        return y = true, o2.d.length = c2 + 1, o2;
      }
      function Y(e2, t2) {
        for (var n3 = e2; --t2; ) n3 *= e2;
        return n3;
      }
      function W(e2, t2) {
        var n3 = t2.s < 0, r2 = B(e2, e2.precision, 1), i2 = r2.times(0.5);
        if ((t2 = t2.abs()).lte(i2)) return s = n3 ? 4 : 1, t2;
        if ((e2 = t2.divToInt(r2)).isZero()) s = n3 ? 3 : 2;
        else {
          if ((t2 = t2.minus(e2.times(r2))).lte(i2)) return s = j(e2) ? n3 ? 2 : 3 : n3 ? 4 : 1, t2;
          s = j(e2) ? n3 ? 1 : 4 : n3 ? 3 : 2;
        }
        return t2.minus(r2).abs();
      }
      function J(e2, t2, n3, r2) {
        var i2, s2, o2, a2, u2, l2, c2, p2, f2 = e2.constructor, h2 = void 0 !== n3;
        if (h2 ? (q(n3, 1, m), void 0 === r2 ? r2 = f2.rounding : q(r2, 0, 8)) : (n3 = f2.precision, r2 = f2.rounding), e2.isFinite()) {
          for (h2 ? (i2 = 2, 16 == t2 ? n3 = 4 * n3 - 3 : 8 == t2 && (n3 = 3 * n3 - 2)) : i2 = t2, 0 <= (o2 = (l2 = k(e2)).indexOf(".")) && (l2 = l2.replace(".", ""), (p2 = new f2(1)).e = l2.length - o2, p2.d = A(k(p2), 10, i2), p2.e = p2.d.length), s2 = a2 = (c2 = A(l2, 10, i2)).length; 0 == c2[--a2]; ) c2.pop();
          if (c2[0]) {
            if (o2 < 0 ? s2-- : ((e2 = new f2(e2)).d = c2, e2.e = s2, c2 = (e2 = C(e2, p2, n3, r2, 0, i2)).d, s2 = e2.e, u2 = L), o2 = c2[n3], p2 = i2 / 2, u2 = u2 || void 0 !== c2[n3 + 1], u2 = r2 < 4 ? (void 0 !== o2 || u2) && (0 === r2 || r2 === (e2.s < 0 ? 3 : 2)) : p2 < o2 || o2 === p2 && (4 === r2 || u2 || 6 === r2 && 1 & c2[n3 - 1] || r2 === (e2.s < 0 ? 8 : 7)), c2.length = n3, u2) for (; ++c2[--n3] > i2 - 1; ) c2[n3] = 0, n3 || (++s2, c2.unshift(1));
            for (a2 = c2.length; !c2[a2 - 1]; --a2) ;
            for (o2 = 0, l2 = ""; o2 < a2; o2++) l2 += g.charAt(c2[o2]);
            if (h2) {
              if (1 < a2) if (16 == t2 || 8 == t2) {
                for (o2 = 16 == t2 ? 4 : 3, --a2; a2 % o2; a2++) l2 += "0";
                for (a2 = (c2 = A(l2, i2, t2)).length; !c2[a2 - 1]; --a2) ;
                for (o2 = 1, l2 = "1."; o2 < a2; o2++) l2 += g.charAt(c2[o2]);
              } else l2 = l2.charAt(0) + "." + l2.slice(1);
              l2 = l2 + (s2 < 0 ? "p" : "p+") + s2;
            } else if (s2 < 0) {
              for (; ++s2; ) l2 = "0" + l2;
              l2 = "0." + l2;
            } else if (++s2 > a2) for (s2 -= a2; s2--; ) l2 += "0";
            else s2 < a2 && (l2 = l2.slice(0, s2) + "." + l2.slice(s2));
          } else l2 = h2 ? "0p+0" : "0";
          l2 = (16 == t2 ? "0x" : 2 == t2 ? "0b" : 8 == t2 ? "0o" : "") + l2;
        } else l2 = Z(e2);
        return e2.s < 0 ? "-" + l2 : l2;
      }
      function K(e2, t2) {
        return e2.length > t2 && (e2.length = t2, 1);
      }
      function ee(e2) {
        return new this(e2).abs();
      }
      function te(e2) {
        return new this(e2).acos();
      }
      function ne(e2) {
        return new this(e2).acosh();
      }
      function re(e2, t2) {
        return new this(e2).plus(t2);
      }
      function ie(e2) {
        return new this(e2).asin();
      }
      function se(e2) {
        return new this(e2).asinh();
      }
      function oe(e2) {
        return new this(e2).atan();
      }
      function ae(e2) {
        return new this(e2).atanh();
      }
      function ue(e2, t2) {
        e2 = new this(e2), t2 = new this(t2);
        var n3, r2 = this.precision, i2 = this.rounding, s2 = r2 + 4;
        return e2.s && t2.s ? e2.d || t2.d ? !t2.d || e2.isZero() ? (n3 = t2.s < 0 ? B(this, r2, i2) : new this(0)).s = e2.s : !e2.d || t2.isZero() ? (n3 = B(this, s2, 1).times(0.5)).s = e2.s : n3 = t2.s < 0 ? (this.precision = s2, this.rounding = 1, n3 = this.atan(C(e2, t2, s2, 1)), t2 = B(this, s2, 1), this.precision = r2, this.rounding = i2, e2.s < 0 ? n3.minus(t2) : n3.plus(t2)) : this.atan(C(e2, t2, s2, 1)) : (n3 = B(this, s2, 1).times(0 < t2.s ? 0.25 : 0.75)).s = e2.s : n3 = new this(NaN), n3;
      }
      function le(e2) {
        return new this(e2).cbrt();
      }
      function ce(e2) {
        return P(e2 = new this(e2), e2.e + 1, 2);
      }
      function pe(e2) {
        if (!e2 || "object" != typeof e2) throw Error(u + "Object expected");
        for (var t2, n3, r2 = true === e2.defaults, i2 = ["precision", 1, m, "rounding", 0, 8, "toExpNeg", -o, 0, "toExpPos", 0, o, "maxE", 0, o, "minE", -o, 0, "modulo", 0, 9], s2 = 0; s2 < i2.length; s2 += 3) if (t2 = i2[s2], r2 && (this[t2] = a[t2]), void 0 !== (n3 = e2[t2])) {
          if (!(I(n3) === n3 && i2[s2 + 1] <= n3 && n3 <= i2[s2 + 2])) throw Error(d + t2 + ": " + n3);
          this[t2] = n3;
        }
        if (t2 = "crypto", r2 && (this[t2] = a[t2]), void 0 !== (n3 = e2[t2])) {
          if (true !== n3 && false !== n3 && 0 !== n3 && 1 !== n3) throw Error(d + t2 + ": " + n3);
          if (n3) {
            if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw Error(p);
            this[t2] = true;
          } else this[t2] = false;
        }
        return this;
      }
      function fe(e2) {
        return new this(e2).cos();
      }
      function he(e2) {
        return new this(e2).cosh();
      }
      function me(e2, t2) {
        return new this(e2).div(t2);
      }
      function ge(e2) {
        return new this(e2).exp();
      }
      function de(e2) {
        return P(e2 = new this(e2), e2.e + 1, 3);
      }
      function ve() {
        var e2, t2, n3 = new this(0);
        for (y = false, e2 = 0; e2 < arguments.length; ) if ((t2 = new this(arguments[e2++])).d) n3.d && (n3 = n3.plus(t2.times(t2)));
        else {
          if (t2.s) return y = true, new this(1 / 0);
          n3 = t2;
        }
        return y = true, n3.sqrt();
      }
      function we(e2) {
        return e2 instanceof c || e2 && "[object Decimal]" === e2.name || false;
      }
      function ye(e2) {
        return new this(e2).ln();
      }
      function be(e2, t2) {
        return new this(e2).log(t2);
      }
      function Se(e2) {
        return new this(e2).log(2);
      }
      function Me(e2) {
        return new this(e2).log(10);
      }
      function Ne() {
        return n2(this, arguments, "lt");
      }
      function Ee() {
        return n2(this, arguments, "gt");
      }
      function qe(e2, t2) {
        return new this(e2).mod(t2);
      }
      function xe(e2, t2) {
        return new this(e2).mul(t2);
      }
      function Ae(e2, t2) {
        return new this(e2).pow(t2);
      }
      function Ce(e2) {
        var t2, n3, r2, i2, s2 = 0, o2 = new this(1), a2 = [];
        if (void 0 === e2 ? e2 = this.precision : q(e2, 1, m), r2 = Math.ceil(e2 / _), this.crypto) if (crypto.getRandomValues) for (t2 = crypto.getRandomValues(new Uint32Array(r2)); s2 < r2; ) 429e7 <= (i2 = t2[s2]) ? t2[s2] = crypto.getRandomValues(new Uint32Array(1))[0] : a2[s2++] = i2 % 1e7;
        else {
          if (!crypto.randomBytes) throw Error(p);
          for (t2 = crypto.randomBytes(r2 *= 4); s2 < r2; ) 214e7 <= (i2 = t2[s2] + (t2[s2 + 1] << 8) + (t2[s2 + 2] << 16) + ((127 & t2[s2 + 3]) << 24)) ? crypto.randomBytes(4).copy(t2, s2) : (a2.push(i2 % 1e7), s2 += 4);
          s2 = r2 / 4;
        }
        else for (; s2 < r2; ) a2[s2++] = 1e7 * Math.random() | 0;
        for (r2 = a2[--s2], e2 %= _, r2 && e2 && (i2 = v(10, _ - e2), a2[s2] = (r2 / i2 | 0) * i2); 0 === a2[s2]; s2--) a2.pop();
        if (s2 < 0) a2 = [n3 = 0];
        else {
          for (n3 = -1; 0 === a2[0]; n3 -= _) a2.shift();
          for (r2 = 1, i2 = a2[0]; 10 <= i2; i2 /= 10) r2++;
          r2 < _ && (n3 -= _ - r2);
        }
        return o2.e = n3, o2.d = a2, o2;
      }
      function Le(e2) {
        return P(e2 = new this(e2), e2.e + 1, this.rounding);
      }
      function Ie(e2) {
        return (e2 = new this(e2)).d ? e2.d[0] ? e2.s : 0 * e2.s : e2.s || NaN;
      }
      function Ue(e2) {
        return new this(e2).sin();
      }
      function _e(e2) {
        return new this(e2).sinh();
      }
      function Oe(e2) {
        return new this(e2).sqrt();
      }
      function Re(e2, t2) {
        return new this(e2).sub(t2);
      }
      function Te(e2) {
        return new this(e2).tan();
      }
      function Pe(e2) {
        return new this(e2).tanh();
      }
      function ke(e2) {
        return P(e2 = new this(e2), e2.e + 1, 1);
      }
      return (c = function e2(t2) {
        var n3, r2, i2;
        function s2(e3) {
          var t3, n4, r3, i3 = this;
          if (!(i3 instanceof s2)) return new s2(e3);
          if (e3 instanceof (i3.constructor = s2)) return i3.s = e3.s, void (y ? !e3.d || e3.e > s2.maxE ? (i3.e = NaN, i3.d = null) : e3.e < s2.minE ? (i3.e = 0, i3.d = [0]) : (i3.e = e3.e, i3.d = e3.d.slice()) : (i3.e = e3.e, i3.d = e3.d && e3.d.slice()));
          if ("number" == (r3 = typeof e3)) {
            if (0 === e3) return i3.s = 1 / e3 < 0 ? -1 : 1, i3.e = 0, void (i3.d = [0]);
            if (e3 < 0 ? (e3 = -e3, i3.s = -1) : i3.s = 1, e3 === ~~e3 && e3 < 1e7) {
              for (t3 = 0, n4 = e3; 10 <= n4; n4 /= 10) t3++;
              return void (y ? s2.maxE < t3 ? (i3.e = NaN, i3.d = null) : t3 < s2.minE ? (i3.e = 0, i3.d = [0]) : (i3.e = t3, i3.d = [e3]) : (i3.e = t3, i3.d = [e3]));
            }
            return 0 * e3 != 0 ? (e3 || (i3.s = NaN), i3.e = NaN, void (i3.d = null)) : z(i3, e3.toString());
          }
          if ("string" != r3) throw Error(d + e3);
          return 45 === (n4 = e3.charCodeAt(0)) ? (e3 = e3.slice(1), i3.s = -1) : (43 === n4 && (e3 = e3.slice(1)), i3.s = 1), (b.test(e3) ? z : function(e4, t4) {
            var n5, r4, i4, s3, o2, a2, u2, l2;
            if ("Infinity" === t4 || "NaN" === t4) return +t4 || (e4.s = NaN), e4.e = NaN, e4.d = null, e4;
            if (h.test(t4)) l2 = 16, t4 = t4.toLowerCase();
            else if (f.test(t4)) l2 = 2;
            else {
              if (!w.test(t4)) throw Error(d + t4);
              l2 = 8;
            }
            for (s3 = 0 <= (i4 = (t4 = 0 < (i4 = t4.search(/p/i)) ? (a2 = +t4.slice(i4 + 1), t4.substring(2, i4)) : t4.slice(2)).indexOf(".")), n5 = e4.constructor, s3 && (i4 = (o2 = (t4 = t4.replace(".", "")).length) - i4, r4 = H(n5, new n5(l2), i4, 2 * i4)), i4 = l2 = (u2 = A(t4, l2, U)).length - 1; 0 === u2[i4]; --i4) u2.pop();
            return i4 < 0 ? new n5(0 * e4.s) : (e4.e = D(u2, l2), e4.d = u2, y = false, s3 && (e4 = C(e4, r4, 4 * o2)), a2 && (e4 = e4.times(Math.abs(a2) < 54 ? v(2, a2) : c.pow(2, a2))), y = true, e4);
          })(i3, e3);
        }
        if (s2.prototype = N, s2.ROUND_UP = 0, s2.ROUND_DOWN = 1, s2.ROUND_CEIL = 2, s2.ROUND_FLOOR = 3, s2.ROUND_HALF_UP = 4, s2.ROUND_HALF_DOWN = 5, s2.ROUND_HALF_EVEN = 6, s2.ROUND_HALF_CEIL = 7, s2.ROUND_HALF_FLOOR = 8, s2.EUCLID = 9, s2.config = s2.set = pe, s2.clone = e2, s2.isDecimal = we, s2.abs = ee, s2.acos = te, s2.acosh = ne, s2.add = re, s2.asin = ie, s2.asinh = se, s2.atan = oe, s2.atanh = ae, s2.atan2 = ue, s2.cbrt = le, s2.ceil = ce, s2.cos = fe, s2.cosh = he, s2.div = me, s2.exp = ge, s2.floor = de, s2.hypot = ve, s2.ln = ye, s2.log = be, s2.log10 = Me, s2.log2 = Se, s2.max = Ne, s2.min = Ee, s2.mod = qe, s2.mul = xe, s2.pow = Ae, s2.random = Ce, s2.round = Le, s2.sign = Ie, s2.sin = Ue, s2.sinh = _e, s2.sqrt = Oe, s2.sub = Re, s2.tan = Te, s2.tanh = Pe, s2.trunc = ke, (t2 = void 0 === t2 ? {} : t2) && true !== t2.defaults) for (i2 = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], n3 = 0; n3 < i2.length; ) t2.hasOwnProperty(r2 = i2[n3++]) || (t2[r2] = this[r2]);
        return s2.config(t2), s2;
      }(a)).default = c.Decimal = c, r = new c(r), i = new c(i), "function" == typeof define && define.amd ? define(function() {
        return c;
      }) : "undefined" != typeof module && module.exports ? ("function" == typeof Symbol && "symbol" == typeof Symbol.iterator && (N[Symbol.for("nodejs.util.inspect.custom")] = N.toString, N[Symbol.toStringTag] = "Decimal"), module.exports = c) : (e = e || ("undefined" != typeof self && self && self.self == self ? self : window), t = e.Decimal, c.noConflict = function() {
        return e.Decimal = t, c;
      }, e.Decimal = c), c;
    }(exports) });
    "undefined" != typeof module && (module.exports = nerdamer), "undefined" != typeof module && (nerdamer = require_nerdamer_core(), require_Calculus()), function() {
      "use strict";
      var Z = nerdamer.getCore(), H = Z.PARSER, u = Z.groups.N, c = Z.groups.P, j = Z.groups.S, p = Z.groups.EX, C = Z.groups.FN, y = Z.groups.PL, X = Z.groups.CP, L = Z.groups.CB, I = Z.Utils.keys, U = Z.Utils.even, $ = Z.Utils.variables, l = Z.Utils.format, b = Z.Utils.round, z = Z.Frac, _ = Z.Utils.isInt, Q = Z.Symbol, Y = Z.Settings.CONST_HASH, f = Z.Utils.importFunctions();
      Z.Utils.evaluate;
      function W(e, t, n2) {
        if (Z.Utils.isSymbol(e)) this.parse(e), this.variable = this.variable || t;
        else if (isNaN(e)) "string" == typeof e && this.parse(H.parse(e));
        else {
          if (n2 = n2 || 0, void 0 === t) throw new Z.exceptions.InvalidVariableNameError("Polynomial expects a variable name when creating using order");
          this.coeffs = [], this.coeffs[n2] = e, this.fill(e);
        }
      }
      function O() {
        this.factors = {}, this.length = 0;
      }
      function J(e, t, n2) {
        this.terms = t || [], this.coeff = e, this.map = n2, this.sum = new Z.Frac(0), this.image = void 0;
      }
      W.fromArray = function(e, t) {
        if (void 0 === t) throw new Z.exceptions.InvalidVariableNameError("A variable name must be specified when creating polynomial from array");
        var n2 = new W();
        return n2.coeffs = e, n2.variable = t, n2;
      }, W.fit = function(e, t, n2, r, i, s) {
        var o = new Array(i + 1), a = n2 - t;
        o[0] = t, a -= (o[i] = e) * Math.pow(r, i);
        for (var u2 = i - 1; 0 < u2; u2--) {
          var l2 = Math.pow(r, u2), c2 = a / l2, c2 = Math.sign(c2) * Math.floor(Math.abs(c2));
          a -= c2 * l2, o[u2] = c2;
        }
        if (0 !== a) return null;
        for (u2 = 0; u2 < o.length; u2++) o[u2] = new z(o[u2]);
        return W.fromArray(o, s);
      }, W.prototype = { parse: function(e, t) {
        if (this.variable = $(e)[0], !e.isPoly()) throw Z.exceptions.NerdamerTypeError("Polynomial Expected! Received " + Z.Utils.text(e));
        if (t = t || [], (e = !e.power.absEquals(1) ? H.expand(e) : e).group === Z.groups.N) t[0] = e.multiplier;
        else if (e.group === Z.groups.S) t[e.power.toDecimal()] = e.multiplier;
        else for (var n2 in e.symbols) {
          var r = e.symbols[n2], n2 = r.power;
          if (Z.Utils.isSymbol(n2)) throw new Z.exceptions.NerdamerTypeError("power cannot be a Symbol");
          n2 = r.group === u ? 0 : n2.toDecimal(), r.symbols ? this.parse(r, t) : t[n2] = r.multiplier;
        }
        this.coeffs = t, this.fill();
      }, fill: function(e) {
        e = Number(e) || 0;
        for (var t = this.coeffs.length, n2 = 0; n2 < t; n2++) void 0 === this.coeffs[n2] && (this.coeffs[n2] = new z(e));
        return this;
      }, trim: function() {
        for (var e = this.coeffs.length; e--; ) {
          var t = this.coeffs[e], n2 = t.equals(0);
          if (!t || !n2) break;
          if (0 === e) break;
          this.coeffs.pop();
        }
        return this;
      }, modP: function(e) {
        for (var t = this.coeffs.length, n2 = 0; n2 < t; n2++) {
          var r = this.coeffs[n2];
          if (r < 0) {
            for (var i, s = n2; s < t; s++) if (0 < this.coeffs[s]) {
              i = this.coeffs[s];
              break;
            }
            if (i) {
              for (; n2 < s; s--) this.coeffs[s] = this.coeffs[s].subtract(new z(1)), this.coeffs[s - 1] = this.coeffs[s - 1].add(new z(e));
              r = this.coeffs[n2];
            }
          }
          var o, a = r.mod(e), u2 = r.subtract(a).divide(e);
          u2.equals(0) || (r = (r = this.coeffs[o = n2 + 1] || new z(0)).add(u2), this.coeffs[o] = new z(r), this.coeffs[n2] = new z(a));
        }
        return this;
      }, add: function(e) {
        for (var t = Math.max(this.coeffs.length, e.coeffs.length), n2 = 0; n2 < t; n2++) {
          var r = this.coeffs[n2] || new z(0), i = e.coeffs[n2] || new z(0);
          this.coeffs[n2] = r.add(i);
        }
        return this;
      }, subtract: function(e) {
        for (var t = Math.max(this.coeffs.length, e.coeffs.length), n2 = 0; n2 < t; n2++) {
          var r = this.coeffs[n2] || new z(0), i = e.coeffs[n2] || new z(0);
          this.coeffs[n2] = r.subtract(i);
        }
        return this;
      }, divide: function(e) {
        for (var t = this.variable, n2 = Z.Utils.arrayClone(this.coeffs), r = Z.Utils.arrayClone(e.coeffs), i = n2.length, s = r.length - 1, o = [], a = 0; a < i; a++) {
          var u2 = i - (a + 1), l2 = u2 - s, c2 = n2[u2].divide(r[s]);
          if (l2 < 0) break;
          o[l2] = c2;
          for (var p2 = 0; p2 <= s; p2++) n2[p2 + l2] = n2[p2 + l2].subtract(r[p2].multiply(c2));
        }
        e = W.fromArray(n2, t || "x").trim();
        return [W.fromArray(o, t || "x"), e];
      }, multiply: function(e) {
        for (var t = this.coeffs.length, n2 = e.coeffs.length, r = [], i = 0; i < t; i++) for (var s = this.coeffs[i], o = 0; o < n2; o++) {
          var a = i + o, u2 = e.coeffs[o], l2 = r[a] || new z(0);
          r[a] = l2.add(s.multiply(u2));
        }
        return this.coeffs = r, this;
      }, isZero: function() {
        for (var e = this.coeffs.length, t = 0; t < e; t++) if (!this.coeffs[t].equals(0)) return false;
        return true;
      }, sub: function(e) {
        for (var t = new z(0), n2 = this.coeffs.length, r = 0; r < n2; r++) {
          var i = this.coeffs[r];
          i.equals(0) || (t = t.add(i.multiply(new z(Math.pow(e, r)))));
        }
        return t;
      }, clone: function() {
        var e = new W();
        return e.coeffs = this.coeffs, e.variable = this.variable, e;
      }, deg: function() {
        return this.trim(), this.coeffs.length - 1;
      }, lc: function() {
        return this.coeffs[this.deg()].clone();
      }, monic: function() {
        for (var e = this.lc(), t = this.coeffs.length, n2 = 0; n2 < t; n2++) this.coeffs[n2] = this.coeffs[n2].divide(e);
        return this;
      }, gcd: function(e) {
        if (this.coeffs.length - 1 < e.coeffs.length - 1) return e.gcd(this);
        for (var t = this; !e.isZero(); ) {
          var n2 = e.clone();
          e = (t = t.clone()).divide(n2)[1], t = n2;
        }
        var r = Z.Math2.QGCD.apply(null, t.coeffs);
        if (!r.equals(1)) for (var i = t.coeffs.length, s = 0; s < i; s++) t.coeffs[s] = t.coeffs[s].divide(r);
        return t;
      }, diff: function() {
        for (var e = [], t = this.coeffs.length, n2 = 1; n2 < t; n2++) e.push(this.coeffs[n2].multiply(new z(n2)));
        return this.coeffs = e, this;
      }, integrate: function() {
        for (var e = [0], t = this.coeffs.length, n2 = 0; n2 < t; n2++) {
          var r = new z(n2 + 1);
          e[r] = this.coeffs[n2].divide(r);
        }
        return this.coeffs = e, this;
      }, gcf: function(e) {
        for (var t = [], n2 = 0; n2 < this.coeffs.length; n2++) {
          var r = this.coeffs[n2];
          r.equals(0) || -1 !== t.indexOf(r) || t.push(r);
        }
        var i = [Z.Math2.QGCD.apply(void 0, t), function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) if (!e2[t2].equals(0)) return t2;
        }(this.coeffs)].toDecimal();
        return e && ((e = [])[i[1] - 1] = i[0], i = W.fromArray(e, this.variable).fill()), i;
      }, quad: function(e) {
        var t = [];
        if (3 < this.coeffs.length) throw new Error("Cannot calculate quadratic order of " + (this.coeffs.length - 1));
        if (0 === this.coeffs.length) throw new Error("Polynomial array has no terms");
        var n2 = this.coeffs[2] || 0, r = this.coeffs[1] || 0, i = r * r - 4 * n2 * this.coeffs[0];
        return i < 0 && !e || (t[0] = (-r + Math.sqrt(i)) / (2 * n2), t[1] = (-r - Math.sqrt(i)) / (2 * n2)), t;
      }, squareFree: function() {
        for (var e = this.clone(), t = 1, n2 = e.clone().diff(), r = e.clone().gcd(n2), i = e.divide(r)[0], s = W.fromArray([new z(1)], e.variable); !r.equalsNumber(1); ) {
          var o = i.gcd(r), a = i.divide(o)[0];
          if (!a.equalsNumber(1) && 1 < t) {
            for (var u2 = a.clone(), l2 = 1; l2 < t; l2++) u2.multiply(a.clone());
            a = u2;
          }
          s = s.multiply(a), t++, r = r.divide(i = o)[0];
        }
        return [s, i, t];
      }, toSymbol: function() {
        var e = this.coeffs.length, t = this.variable;
        if (0 === e) return new Z.Symbol(0);
        for (var n2 = e - 1, r = "", i = 0; i < e; i++) {
          var s = i === n2 ? "" : "+", o = this.coeffs[i];
          o.equals(0) || (r += o + "*" + t + "^" + i + s);
        }
        return H.parse(r);
      }, equalsNumber: function(e) {
        return this.trim(), 1 === this.coeffs.length && this.coeffs[0].toDecimal() === String(e);
      }, toString: function() {
        return this.toSymbol().toString();
      } }, Q.prototype.coeffs = function(e, t) {
        t && !this.isPoly(true) && H.error("Polynomial expected when requesting coefficients with order"), e = e || [];
        var n2, r = this.clone().distributeMultiplier();
        if (r.isComposite()) for (var i in r.symbols) {
          i = r.symbols[i];
          i.isComposite() ? i.clone().distributeMultiplier().coeffs(e, t) : t ? e[i.isConstant() ? 0 : i.power.toDecimal()] = i.multiplier : e.push(i.multiplier);
        }
        else t ? e[r.isConstant(true) ? 0 : r.power.toDecimal()] = r.multiplier : r.group === L && r.isImaginary() ? (n2 = new Q(r.multiplier), r.each(function(e2) {
          (e2.isConstant(true) || e2.imaginary) && (n2 = H.multiply(n2, e2));
        }), e.push(n2)) : e.push(r.multiplier);
        if (t) for (var s = 0; s < e.length; s++) void 0 === e[s] && (e[s] = new Q(0));
        return e;
      }, Q.prototype.tBase = function(e) {
        if (void 0 === e) throw new Error("Symbol.tBase requires a map object!");
        for (var t = [], n2 = this.collectSymbols(null, null, null, true), r = n2.length, i = 0; i < r; i++) {
          var s = n2[i], o = s.group, a = new J(s.multiplier, [], e);
          if (o === L) for (var u2 in s.symbols) {
            var l2 = s.symbols[u2];
            a.terms[e[u2]] = l2.power;
          }
          else a.terms[e[s.value]] = s.power;
          t.push(a.fill()), a.updateCount();
        }
        return t;
      }, Q.prototype.altVar = function(e) {
        var t = this.multiplier.toString(), n2 = this.power.toString();
        return ("1" === t ? "" : t + "*") + e + ("1" === n2 ? "" : "^" + n2);
      }, Q.prototype.sameVars = function(e) {
        if (!this.symbols && this.group !== e.group) return false;
        for (var t in this.symbols) {
          var n2 = this.symbols[t], t = e.symbols[t];
          if (!t) return false;
          if (n2.value !== t.value) return false;
        }
        return true;
      }, Q.prototype.groupTerms = function(r) {
        var i, s, o;
        r = String(r);
        var a = [];
        return this.each(function(e) {
          if (e.group === y) {
            o = e.groupTerms(r);
            for (var t = 0; t < o.length; t++) {
              var n2 = o[t];
              n2 && (a[t] = n2);
            }
          } else i = Z.Utils.decompose_fn(e, r, true), s = i.x.value === r ? Number(i.x.power) : 0, a[s] = H.add(a[s] || new Q(0), i.a);
        }), a;
      }, Q.prototype.collectFactors = function() {
        var t = [];
        return this.group === L ? this.each(function(e) {
          t.push(e.clone());
        }) : t.push(this.clone()), t;
      }, O.prototype.getNumberSymbolics = function() {
        var t = 0;
        return this.each(function(e) {
          e.isConstant(true) || t++;
        }), t;
      }, O.prototype.add = function(e) {
        if (e.equals(0)) return this;
        if (e.equals(-1) && 0 < this.length) {
          var t = Z.Utils.firstObject(this.factors, null, true);
          return this.add(H.symfunction(Z.Settings.PARENTHESIS, [t.obj]).negate()), delete this.factors[t.key], this.length--, this;
        }
        if (e.group === L) {
          var n2 = this;
          e.multiplier.equals(1) || n2.add(new Q(e.multiplier)), e.each(function(e2) {
            n2.add(e2);
          });
        } else {
          this.preAdd && (e = this.preAdd(e));
          t = (e = this.pFactor ? H.pow(e, new Q(this.pFactor)) : e).isConstant();
          if (t && e.equals(1)) return this;
          t = t ? e.value : e.text();
          t in this.factors ? (this.factors[t] = H.multiply(this.factors[t], e), this.factors[t].equals(1) && (delete this.factors[t], this.length--)) : (this.factors[t] = e, this.length++);
        }
        return this;
      }, O.prototype.toSymbol = function() {
        for (var e = new Q(1), t = Object.values(this.factors).sort(function(e2, t2) {
          return e2.group > t2.group;
        }), n2 = 0, r = t.length; n2 < r; n2++) var i = t[n2], i = i.power.equals(1) && "" !== i.fname ? H.symfunction(Z.PARENTHESIS, [i]) : i, e = H.multiply(e, i);
        return e = "" === e.fname ? Q.unwrapPARENS(e) : e;
      }, O.prototype.merge = function(e) {
        for (var t in e) t in this.factors ? this.factors[t] = H.multiply(this.factors[t], e[t]) : this.factors[t] = e[t];
        return this;
      }, O.prototype.each = function(e) {
        for (var t in this.factors) {
          var n2 = this.factors[t];
          n2.fname === Z.PARENTHESIS && n2.isLinear() && (n2 = n2.args[0]), e.call(this, n2, t);
        }
        return this;
      }, O.prototype.count = function() {
        return I(this.factors).length;
      }, O.prototype.clean = function() {
        try {
          var e = Z.Settings.CONST_HASH;
          this.factors[e].lessThan(0) && (this.factors[e].equals(-1) ? delete this.factors[e] : this.factors[e].negate(), this.each(function(e2) {
            e2.negate();
          }));
        } catch (e2) {
        }
      }, O.prototype.toString = function() {
        return this.toSymbol().toString();
      }, J.prototype.updateCount = function() {
        this.count = this.count || 0;
        for (var e = 0; e < this.terms.length; e++) this.terms[e].equals(0) || this.count++;
        return this;
      }, J.prototype.getVars = function() {
        for (var e = [], t = 0; t < this.terms.length; t++) {
          var n2 = this.terms[t];
          this.getRevMap();
          n2.equals(0) || e.push(this.rev_map[t]);
        }
        return e.join(" ");
      }, J.prototype.len = function() {
        return void 0 === this.count && this.updateCount(), this.count;
      }, J.prototype.toSymbol = function(e) {
        e = e || this.getRevMap();
        for (var t = new Q(this.coeff), n2 = 0; n2 < this.terms.length; n2++) {
          var r = e[n2], i = this.terms[n2];
          i.equals(0) || r === Y || ((r = new Q(r)).power = i, t = H.multiply(t, r));
        }
        return t;
      }, J.prototype.getRevMap = function() {
        if (this.rev_map) return this.rev_map;
        var e, t = {};
        for (e in this.map) t[this.map[e]] = e;
        return this.rev_map = t;
      }, J.prototype.generateImage = function() {
        return this.image = this.terms.join(" "), this;
      }, J.prototype.getImg = function() {
        return this.image || this.generateImage(), this.image;
      }, J.prototype.fill = function() {
        for (var e = this.map.length, t = 0; t < e; t++) void 0 === this.terms[t] ? this.terms[t] = new Z.Frac(0) : this.sum = this.sum.add(this.terms[t]);
        return this;
      }, J.prototype.divide = function(e) {
        for (var t = this.coeff.divide(e.coeff), n2 = this.terms.length, r = new J(t, [], this.map), i = 0; i < n2; i++) r.terms[i] = this.terms[i].subtract(e.terms[i]), r.sum = r.sum.add(r.terms[i]);
        return r;
      }, J.prototype.multiply = function(e) {
        for (var t = this.coeff.multiply(e.coeff), n2 = this.terms.length, r = new J(t, [], this.map), i = 0; i < n2; i++) r.terms[i] = this.terms[i].add(e.terms[i]), r.sum = r.sum.add(r.terms[i]);
        return r;
      }, J.prototype.isZero = function() {
        return this.coeff.equals(0);
      }, J.prototype.toString = function() {
        return "{ coeff: " + this.coeff.toString() + ", terms: [" + this.terms.join(",") + "]: sum: " + this.sum.toString() + ", count: " + this.count + "}";
      }, Z.Utils.toMapObj = function(e) {
        for (var t = 0, n2 = {}, r = 0; r < e.length; r++) {
          var i = e[r];
          void 0 === n2[i] && (n2[i] = t, t++);
        }
        return n2.length = t, n2;
      }, Z.Utils.filledArray = function(e, t, n2) {
        for (var r = []; t--; ) r[t] = n2 ? new n2(e) : e;
        return r;
      }, Z.Utils.arrSum = function(e) {
        for (var t = 0, n2 = e.length, r = 0; r < n2; r++) t += e[r];
        return t;
      }, Z.Utils.haveIntersection = function(e, t) {
        var n2;
        return t.length > e.length && (n2 = t, t = e, e = n2), e.some(function(e2) {
          return -1 < t.indexOf(e2);
        });
      }, Z.Utils.subFunctions = function(e, r) {
        r = r || {};
        var i = [];
        return e.each(function(e2) {
          var t, n2;
          e2.group === C || e2.previousGroup === C ? (t = Z.Utils.text(e2, "hash"), (n2 = r[t]) ? i.push(e2.altVar(n2)) : (n2 = e2.fname + I(r).length, r[t] = n2, i.push(e2.altVar(n2)))) : e2.group === L || e2.group === y || e2.group === X ? i.push(Z.Utils.subFunctions(e2, r)) : i.push(e2.text());
        }), e.group === X || e.group === y ? e.altVar(Z.Utils.inBrackets(i.join("+"))) : e.group === L ? e.altVar(Z.Utils.inBrackets(i.join("*"))) : e.text();
      }, Z.Utils.getFunctionsSubs = function(e) {
        var t, n2 = {};
        for (t in e) n2[e[t]] = H.parse(t);
        return n2;
      };
      var R = Z.Algebra = { version: "1.4.6", proots: function(e, l2) {
        l2 = l2 || 7;
        function t(e2, t2, n3) {
          for (var r2 = function(e3, t3) {
            var n4 = e3.slice(0);
            if (e3.unshift(t3), 100 < t3) throw new Z.exceptions.ValueLimitExceededError("This utility accepts polynomials of degree up to 100. ");
            var r3 = [], e3 = {};
            for (e3.Degree = t3, p2 = 0; p2 < t3; p2++) r3.push(0);
            var i3 = r3.slice(0);
            function V(e4, t4, n5, r4, i4, s3) {
              i4[0] = s3.b = r4[0], i4[1] = s3.a = -(t4 * s3.b) + r4[1];
              for (var o3 = 2; o3 < e4; o3++) i4[o3] = -(t4 * s3.a + n5 * s3.b) + r4[o3], s3.b = s3.a, s3.a = i4[o3];
            }
            function H2(e4, t4, n5, r4, i4, s3, o3, a3, u4) {
              var l3 = new Object(), c3 = 3;
              return l3.b = l3.a = 0, V(t4, o3, a3, s3, u4, l3), i4.c = l3.a, i4.d = l3.b, Math.abs(i4.c) <= 100 * e4 * Math.abs(s3[t4 - 1]) && Math.abs(i4.d) <= 100 * e4 * Math.abs(s3[t4 - 2]) || (i4.h = a3 * r4, Math.abs(i4.d) >= Math.abs(i4.c) ? (c3 = 2, i4.e = n5 / i4.d, i4.f = i4.c / i4.d, i4.g = o3 * r4, i4.a3 = i4.e * (i4.g + n5) + i4.h * (r4 / i4.d), i4.a1 = -n5 + i4.f * r4, i4.a7 = i4.h + (i4.f + o3) * n5) : (c3 = 1, i4.e = n5 / i4.c, i4.f = i4.d / i4.c, i4.g = i4.e * o3, i4.a3 = i4.e * n5 + (i4.g + i4.h / i4.c) * r4, i4.a1 = -(n5 * (i4.d / i4.c)) + r4, i4.a7 = i4.g * i4.d + i4.h * i4.f + n5)), c3;
            }
            function j2(e4, t4, n5, r4, i4, s3, o3, a3, u4) {
              if (3 != n5) if (r4 = 1 == n5 ? i4 : r4, Math.abs(s3.a1) > 10 * e4 * Math.abs(r4)) {
                s3.a7 /= s3.a1, s3.a3 /= s3.a1, o3[0] = u4[0], o3[1] = -(u4[0] * s3.a7) + u4[1];
                for (l3 = 2; l3 < t4; l3++) o3[l3] = -(u4[l3 - 1] * s3.a7) + a3[l3 - 2] * s3.a3 + u4[l3];
              } else {
                o3[0] = 0, o3[1] = -(u4[0] * s3.a7);
                for (l3 = 2; l3 < t4; l3++) o3[l3] = -(u4[l3 - 1] * s3.a7) + a3[l3 - 2] * s3.a3;
              }
              else {
                o3[1] = o3[0] = 0;
                for (var l3 = 2; l3 < t4; l3++) o3[l3] = a3[l3 - 2];
              }
            }
            function X2(e4, t4, n5, r4, i4, s3, o3, a3, u4, l3, c3, p3, f3, h2, m2, g2, d2) {
              var v2;
              t4.b = t4.a = 0, 3 != e4 && (a3 = 2 != e4 ? (v2 = n5 + f3 * o3 + p3 * l3, a3 + (f3 + h2 * l3) * u4) : (v2 = (n5 + c3) * l3 + p3, (l3 + f3) * a3 + h2 * u4), u4 = -(m2[g2 - 1] / d2[g2]), 0 != (v2 = -(i4 = h2 * (m2 = -(m2[g2 - 2] + u4 * d2[g2 - 1]) / d2[g2]) * r4 - ((d2 = u4 * s3) + (g2 = u4 * u4 * i4))) + a3 + u4 * v2) && (t4.a = -(f3 * (g2 + d2) + h2 * (u4 * r4 + m2 * s3)) / v2 + f3, t4.b = h2 * (1 + i4 / v2)));
            }
            function $2(e4, t4, n5, r4) {
              var i4, s3, o3;
              (r4.sr = r4.si = r4.lr = r4.li = 0) != e4 ? 0 != n5 ? (i4 = t4 / 2, s3 = Math.abs(i4) < Math.abs(n5) ? (o3 = -(o3 = 0 <= n5 ? e4 : -e4) + i4 * (i4 / Math.abs(n5)), Math.sqrt(Math.abs(o3)) * Math.sqrt(Math.abs(n5))) : (o3 = -e4 / i4 * (n5 / i4) + 1, Math.sqrt(Math.abs(o3)) * Math.abs(i4)), 0 <= o3 ? (r4.lr = (-i4 + (s3 = 0 <= i4 ? -s3 : s3)) / e4, r4.sr = 0 != r4.lr ? n5 / r4.lr / e4 : r4.sr) : (r4.lr = r4.sr = -i4 / e4, r4.si = Math.abs(s3 / e4), r4.li = -r4.si)) : r4.lr = -t4 / e4 : r4.sr = 0 != t4 ? -n5 / t4 : r4.sr;
            }
            function G(e4, t4, n5, r4, i4, s3, o3, a3, u4, l3, c3, p3) {
              var f3, h2, m2, g2, d2, v2, w2, y2, b2, S, M, N, E, q, x, A, C2, L2, I2, U2, _2, O2, R2, T, P, k = new Object(), D = new Object(), F = new Array(t4), B = new Array(t4), G2 = 1;
              for (p3.NZ = 0, g2 = m2 = 0.25, d2 = r4, y2 = i4, k.b = k.a = 0, V(u4, c3, i4, a3, l3, k), f3 = k.a, h2 = k.b, D.h = D.g = D.f = D.e = D.d = D.c = D.a7 = D.a3 = D.a1 = 0, R2 = H2(e4, o3, f3, h2, D, s3, c3, i4, F), U2 = 0; U2 < n5; U2++) {
                if (L2 = 1, j2(e4, o3, R2, f3, h2, D, s3, F, l3), X2(R2 = H2(e4, o3, f3, h2, D, s3, c3, i4, F), k, f3, D.a1, D.a3, D.a7, h2, D.c, D.d, D.f, D.g, D.h, c3, i4, s3, o3, a3), x = k.a, C2 = A = k.b, S = 0 != s3[o3 - 1] ? -(a3[o3] / s3[o3 - 1]) : 0, M = E = 1, 0 != U2 && 3 != R2 && (T = (q = (E = 0 != C2 ? Math.abs((C2 - y2) / C2) : E) < w2 ? E * w2 : 1) < g2 ? 1 : 0, (_2 = (N = (M = 0 != S ? Math.abs((S - d2) / S) : M) < v2 ? M * v2 : 1) < m2 ? 1 : 0) || T)) {
                  for (I2 = 0; I2 < o3; I2++) B[I2] = s3[I2];
                  for (b2 = S, O2 = P = 0; ; ) {
                    if (!L2 || 0 != (L2 = 0) || !_2 || T && !(N < q)) {
                      if (!function(e5, t5, n6, r5, i5, s4, o4, a4, u5, l4, c4, p4) {
                        var f4, h3, m3, g3, d3, v3, w3, y3, b3, S2 = new Object(), M2 = 0, N2 = 0;
                        n6.NZ = 0, g3 = r5, v3 = i5;
                        do {
                          if (S2.li = S2.lr = S2.si = S2.sr = 0, $2(1, g3, v3, S2), n6.szr = S2.sr, n6.szi = S2.si, n6.lzr = S2.lr, n6.lzi = S2.li, Math.abs(Math.abs(n6.szr) - Math.abs(n6.lzr)) > 0.01 * Math.abs(n6.lzr)) break;
                          for (V(o4, g3, v3, u5, s4, a4), w3 = Math.abs(-(n6.szr * a4.b) + a4.a) + Math.abs(n6.szi * a4.b), y3 = Math.sqrt(Math.abs(v3)), f4 = 2 * Math.abs(s4[0]), d3 = -(n6.szr * a4.b), b3 = 1; b3 < t5; b3++) f4 = f4 * y3 + Math.abs(s4[b3]);
                          if (w3 <= 20 * (f4 = (9 * (f4 = f4 * y3 + Math.abs(d3 + a4.a)) + 2 * Math.abs(d3) - 7 * (Math.abs(a4.a + d3) + y3 * Math.abs(a4.b))) * e5)) {
                            n6.NZ = 2;
                            break;
                          }
                          if (20 < ++M2) break;
                          if (2 <= M2 && m3 <= 0.01 && h3 <= w3 && !N2) {
                            for (V(o4, g3 -= g3 * (m3 = m3 < e5 ? Math.sqrt(e5) : Math.sqrt(m3)), v3 += v3 * m3, u5, s4, a4), b3 = 0; b3 < 5; b3++) j2(e5, t5, H2(e5, t5, a4.a, a4.b, c4, p4, g3, v3, l4), a4.a, a4.b, c4, p4, l4, s4);
                            N2 = 1, M2 = 0;
                          }
                        } while (h3 = w3, j2(e5, t5, H2(e5, t5, a4.a, a4.b, c4, p4, g3, v3, l4), a4.a, a4.b, c4, p4, l4, s4), X2(H2(e5, t5, a4.a, a4.b, c4, p4, g3, v3, l4), a4, a4.a, c4.a1, c4.a3, c4.a7, a4.b, c4.c, c4.d, c4.f, c4.g, c4.h, g3, v3, p4, t5, u5), d3 = a4.a, 0 != (w3 = a4.b) && (m3 = Math.abs((-v3 + w3) / w3), g3 = d3, v3 = w3), 0 != w3);
                      }(e4, o3, p3, x, A, l3, u4, k, a3, F, D, s3), f3 = k.a, h2 = k.b, 0 < p3.NZ) return;
                      if (G2 = P = 1, g2 *= 0.25, O2 || !_2) G2 = 0;
                      else for (I2 = 0; I2 < o3; I2++) s3[I2] = B[I2];
                    }
                    if (0 != G2) {
                      if (k.a = b2, G2 = function(e5, t5, n6, r5, i5, s4, o4, a4, u5) {
                        var l4, c4, p4, f4, h3, m3, g3, d3, v3, w3, y3, b3 = r5 - 1;
                        for (t5.NZ = y3 = v3 = 0, g3 = n6.a; ; ) {
                          for (m3 = i5[0], o4[0] = m3, w3 = 1; w3 < s4; w3++) o4[w3] = m3 = m3 * g3 + i5[w3];
                          for (p4 = Math.abs(m3), f4 = Math.abs(g3), l4 = 0.5 * Math.abs(o4[0]), w3 = 1; w3 < s4; w3++) l4 = l4 * f4 + Math.abs(o4[w3]);
                          if (p4 <= 20 * e5 * (2 * l4 - p4)) {
                            t5.NZ = 1, t5.szr = g3, t5.szi = 0;
                            break;
                          }
                          if (10 < ++y3) break;
                          if (2 <= y3 && Math.abs(d3) <= 1e-3 * Math.abs(-d3 + g3) && h3 < p4) {
                            v3 = 1, t5.a = g3;
                            break;
                          }
                          for (h3 = p4, u5[0] = c4 = a4[0], w3 = 1; w3 < r5; w3++) u5[w3] = c4 = c4 * g3 + a4[w3];
                          if (Math.abs(c4) > 10 * Math.abs(a4[b3]) * e5) for (d3 = -m3 / c4, a4[0] = o4[0], w3 = 1; w3 < r5; w3++) a4[w3] = d3 * u5[w3 - 1] + o4[w3];
                          else for (a4[0] = 0, w3 = 1; w3 < r5; w3++) a4[w3] = u5[w3 - 1];
                          for (c4 = a4[0], w3 = 1; w3 < r5; w3++) c4 = c4 * g3 + a4[w3];
                          g3 += d3 = Math.abs(c4) > 10 * Math.abs(a4[b3]) * e5 ? -m3 / c4 : 0;
                        }
                        return v3;
                      }(e4, p3, k, o3, a3, u4, l3, s3, F), b2 = k.a, 0 < p3.NZ) return;
                      if (O2 = 1, m2 *= 0.25, 0 != G2) {
                        x = -(b2 + b2), A = b2 * b2;
                        continue;
                      }
                    }
                    for (I2 = 0; I2 < o3; I2++) s3[I2] = B[I2];
                    if (!T || P) break;
                  }
                  V(u4, c3, i4, a3, l3, k), R2 = H2(e4, o3, f3 = k.a, h2 = k.b, D, s3, c3, i4, F);
                }
                y2 = C2, d2 = S, w2 = E, v2 = M;
              }
            }
            !function(e4, t4, n5, r4) {
              for (var i4, s3, o3, a3, u4, l3, c3, p3, f3, h2, m2, g2, d2, v2, w2 = e4.Degree, y2 = 0.017453292519943295, b2 = Math.LN2, S = e4.Degree + 1, M = new Array(S), N = new Array(S), E = new Array(S), q = new Array(S), x = new Object(), A = new Object(), C2 = 1; i4 = C2, 1 < (l3 = 1 + (C2 /= 2)); ) ;
              var L2 = Number.MIN_VALUE / i4, I2 = Math.cos(94 * y2), U2 = Math.sin(94 * y2), _2 = Math.sqrt(0.5), O2 = -_2;
              for (A.NZ = f3 = 0, A.szr = A.szi = A.lzr = A.lzi = 0; 0 == t4[w2]; ) n5[f3] = r4[f3] = 0, w2--, f3++;
              for (d2 = w2 + 1; 1 <= w2; ) {
                if (w2 <= 2) {
                  w2 < 2 ? (n5[e4.Degree - 1] = -(t4[1] / t4[0]), r4[e4.Degree - 1] = 0) : ($2(t4[x.li = x.lr = x.si = x.sr = 0], t4[1], t4[2], x), n5[e4.Degree - 2] = x.sr, r4[e4.Degree - 2] = x.si, n5[e4.Degree - 1] = x.lr, r4[e4.Degree - 1] = x.li);
                  break;
                }
                for (a3 = 0, u4 = Number.MAX_VALUE, R2 = 0; R2 < d2; R2++) a3 < (T = Math.abs(t4[R2])) && (a3 = T), 0 != T && T < u4 && (u4 = T);
                if (((m2 = L2 / u4) <= 1 && 10 <= a3 || 1 < m2 && Number.MAX_VALUE / m2 >= a3) && (m2 = 0 == m2 ? Number.MIN_VALUE : m2, m2 = Math.floor(Math.log(m2) / b2 + 0.5), 1 != (o3 = Math.pow(2, m2)))) for (R2 = 0; R2 < d2; R2++) t4[R2] *= o3;
                for (var R2 = 0; R2 < d2; R2++) N[R2] = Math.abs(t4[R2]);
                N[w2] = -N[w2], g2 = w2 - 1, T = Math.exp((Math.log(-N[w2]) - Math.log(N[0])) / w2), P = T = 0 != N[g2] ? (P = -N[w2] / N[g2]) < T ? P : T : T;
                do {
                  for (var T, P = 0.1 * (T = P), k = N[0], R2 = 1; R2 < d2; R2++) k = k * P + N[R2];
                } while (0 < k);
                0;
                do {
                  for (var D = k = N[0], R2 = 1; R2 < w2; R2++) D = T * D + (k = T * k + N[R2]);
                } while (T -= s3 = (k = T * k + N[w2]) / D, 5e-3 < Math.abs(s3 / T));
                for (var F = T, R2 = 1; R2 < w2; R2++) M[R2] = (w2 - R2) * t4[R2] / w2;
                for (M[0] = t4[0], C2 = t4[w2], l3 = t4[g2], v2 = 0 == M[g2] ? 1 : 0, h2 = 0; h2 < 5; h2++) if (c3 = M[g2], v2) {
                  for (R2 = 0; R2 < g2; R2++) M[f3 = g2 - R2] = M[f3 - 1];
                  v2 = (M[0] = 0) == M[g2] ? 1 : 0;
                } else {
                  for (var B = -C2 / c3, R2 = 0; R2 < g2; R2++) M[f3 = g2 - R2] = B * M[f3 - 1] + t4[f3];
                  M[0] = t4[0], v2 = Math.abs(M[g2]) <= Math.abs(l3) * i4 * 10 ? 1 : 0;
                }
                for (R2 = 0; R2 < w2; R2++) q[R2] = M[R2];
                for (h2 = 1; h2 <= 20; h2++) {
                  if (p3 = -U2 * O2 + I2 * _2, O2 = U2 * _2 + I2 * O2, G(i4, S, 20 * h2, p3 = F * (_2 = p3), F, M, w2, t4, d2, E, -2 * p3, A), 0 != A.NZ) {
                    n5[f3 = e4.Degree - w2] = A.szr, r4[f3] = A.szi;
                    for (w2 = (d2 -= A.NZ) - 1, R2 = 0; R2 < d2; R2++) t4[R2] = E[R2];
                    1 != A.NZ && (n5[f3 + 1] = A.lzr, r4[f3 + 1] = A.lzi);
                    break;
                  }
                  for (R2 = 0; R2 < w2; R2++) M[R2] = q[R2];
                }
                if (20 < h2) {
                  e4.Degree -= w2;
                  break;
                }
              }
            }(e3, n4, i3, r3);
            var s2 = r3.length;
            for (p2 = 0; p2 < s2; p2++) {
              var o2 = b(r3[p2], l2 + 8), a2 = b(i3[p2], l2 + 8);
              a2 = 2 < l2 - String(a2).length ? a2 : i3[p2];
              var u3 = o2 < 0 ? "-" : "";
              0 === a2 && (a2 = ""), 0 === o2 && (o2 = ""), o2 = 1 === Math.abs(o2) ? u3 + "i" : o2 ? o2 + "*i" : "";
              o2 = a2 && o2 ? a2 + "+" + o2 : a2 + o2;
              i3[p2] = o2.replace(/\+\-/g, "-");
            }
            return i3;
          }(e2, n3).concat(s), i2 = 0; i2 < 0; i2++) r2.unshift(0);
          return r2;
        }
        var n2, s = [];
        if (e instanceof Q && e.isPoly()) {
          if (e.distributeMultiplier(), e.group === y && (n2 = Z.Utils.arrayMin(I(e.symbols)), n2 = e.symbols[n2].clone().toUnitMultiplier(), e = H.expand(H.divide(e, n2)), s.push(0)), e.group === Z.groups.S) return [0];
          e.group === Z.groups.PL && (a = I(e.symbols), r = Z.Utils.arrayMin(a), e = Z.PARSER.divide(e, Z.PARSER.parse(e.value + "^" + r)));
          for (var r = I(e.symbols).sort().pop(), i = e.group === Z.groups.PL ? e.symbols : e.symbols[r], o = i.group, a = o === j ? [i.power.toDecimal()] : I(i.symbols), u2 = [], c2 = Z.Utils.arrayMax(a), p2 = 1; p2 <= c2; p2++) {
            var f2 = 0;
            -1 !== a.indexOf(p2 + "") && (f2 = (o === j ? i : i.symbols[p2]).multiplier), u2.unshift(f2);
          }
          return u2.push(e.symbols[Y].multiplier), i.group === j && (u2[0] = i.multiplier), t(u2, 0, c2);
        }
        if (Z.Utils.isArray(e)) {
          for (var h = e, u2 = [], a = [], m = 0, p2 = 0; p2 < h.length; p2++) {
            for (var g = h[p2][0], d = h[p2][1], v = d - m - 1, w = 0; w < v; w++) u2.unshift(0);
            u2.unshift(g), 0 !== d && a.push(d), m = d;
          }
          return t(u2, 0, c2 = Math.max.apply(void 0, a));
        }
        throw new Z.exceptions.NerdamerTypeError("Cannot calculate roots. Symbol must be a polynomial!");
      }, roots: function(e) {
        if (e.isConstant(true, true)) return Z.Utils.nroots(e);
        e = R.proots(e).map(function(e2) {
          return H.parse(e2);
        });
        return Z.Vector.fromArray(e);
      }, froot: function(a, e, u2) {
        return function(e2) {
          for (var t = u2 || Z.Utils.build(Z.Calculus.diff(a.clone())), n2 = a instanceof Function ? a : Z.Utils.build(a), r = false, i = 0; !r; ) {
            var s = e2 - n2(e2) / t(e2), o = Math.abs(s) - Math.abs(e2);
            e2 = s, Math.abs(o) < 1e-12 ? r = true : 1e4 < i && (r = !(e2 = null)), i++;
          }
          return e2;
        }(Number(e));
      }, quad: function(e, t, n2) {
        function r(e2, t2, n3, r2) {
          return H.parse("-(" + t2 + "+" + r2 + "*sqrt((" + t2 + ")^2-4*(" + e2 + ")*(" + n3 + ")))/(2*" + e2 + ")");
        }
        return [r(e, t, n2, 1), r(e, t, n2, -1)];
      }, sumProd: function(e, t) {
        return R.quad(-t, e, -1).map(function(e2) {
          return e2.invert();
        });
      }, coeffs: function(e, t, n2) {
        t = String(t), e = H.expand(e), n2 = n2 || [new Q(0)], e.group === p && e.contains(t, true) && H.error("Unable to get coefficients using expression " + e.toString());
        var r, i = $(e);
        if (1 !== i.length || i[0] !== t || e.isImaginary()) t || H.error("Polynomial contains more than one variable. Please specify which variable is to be used!"), -1 === i.indexOf(t) ? n2[0] = H.add(e, n2[0]) : (n2 = n2 || [new Q(0)], e.group === L ? ((r = e.symbols[t]) || H.error("Expression is not a polynomial!"), i = Number(r.power), ((l2 = H.divide(e.clone(), r.clone())).contains(t, true) || i < 0 || !_(i)) && H.error("Expression is not a polynomial!"), (u2 = n2[i]) && (l2 = H.add(u2, l2)), n2[i] = l2) : e.group === X && e.each(function(e2) {
          R.coeffs(e2.clone(), t, n2);
        }, true));
        else for (var s = new W(e).coeffs.map(function(e2) {
          return new Q(e2);
        }), o = 0, a = s.length; o < a; o++) {
          var u2, l2 = s[o];
          (u2 = n2[o]) && (l2 = H.add(u2, l2)), n2[o] = l2;
        }
        for (o = 0, a = n2.length; o < a; o++) void 0 === n2[o] && (n2[o] = new Q(0));
        return n2;
      }, polyPowers: function(e, t, n2) {
        if (n2 = n2 || [], (s = e.group) === y && t === e.value) n2 = n2.concat(I(e.symbols));
        else if (s === X) for (var r in e.symbols) {
          var i = e.symbols[r], s = i.group, r = i.value;
          s === j && t === r ? n2.push(i.power) : s === y || s === X ? n2 = R.polyPowers(i, t, n2) : s === L && i.contains(t) ? (i = i.symbols[t]) && n2.push(i.power) : s !== u && t === r || n2.push(0);
        }
        else s === L && e.contains(t) && n2.push(Z.Utils.decompose_fn(e, t, true).x.power);
        return Z.Utils.arrayUnique(n2).sort();
      }, Factor: { split: function(e) {
        var n2 = new Q(1), r = new Q(1);
        return R.Factor.factor(e, new O()).each(function(e2) {
          var t = H.parse(e2);
          e2.isConstant(true) ? n2 = H.multiply(n2, t) : r = H.multiply(r, t);
        }), [n2, r];
      }, mix: function(e, t) {
        for (var n2 = I(e), r = n2.length, i = [], s = 0; s < r; s++) {
          for (var o = n2[s], a = e[o], u2 = i.length, l2 = 0; l2 < u2; l2++) {
            var c2 = i[l2] * o;
            i.push(c2), t && i.push(-c2);
          }
          for (l2 = 1; l2 <= a; l2++) i.push(Math.pow(o, l2));
        }
        return i;
      }, common: function(e, t) {
        try {
          if (e.group === X) {
            for (var n2 = H.expand(e.clone(), true).collectSymbols(null, null, function(e2, t2) {
              return (t2.length || 1) - (e2.length || 1);
            }), r = {}, i = [], s = 0; s < n2.length; s++) {
              var o = n2[s];
              i.push(o.multiplier.clone()), o.each(function(e2) {
                var t2 = Number(e2.power);
                if (isNaN(t2)) throw new Error("exiting");
                e2.value in r ? (t2 < r[e2.value][0] && (r[e2.value][0] = t2), r[e2.value][1].push(e2)) : r[e2.value] = [t2, [e2]];
              });
            }
            var a, u2 = new Q(1);
            for (a in r) r[a][1].length === n2.length && (u2 = H.multiply(u2, H.pow(new Q(a), new Q(r[a][0]))));
            var l2 = Z.Math2.QGCD.apply(null, i);
            if (!l2.equals(1)) {
              t.add(new Q(l2));
              for (s = 0; s < n2.length; s++) n2[s].multiplier = n2[s].multiplier.divide(l2);
            }
            if (!u2.equals(1)) {
              t.add(u2), e = new Q(0);
              for (s = 0; s < n2.length; s++) e = H.add(e, H.divide(n2[s], u2.clone()));
            }
          }
        } catch (e2) {
        }
        return e;
      }, zeroes: function(e, t) {
        function n2() {
          throw new Z.exceptions.ValueLimitExceededError("Exiting");
        }
        try {
          for (var r, i, s, o = (e = H.expand(e.clone())).toString(), a = $(e), u2 = new Q(0), l2 = [], c2 = [], p2 = 0, f2 = a.length; p2 < a.length; p2++) {
            for (var h = {}, m = 0; m < f2; m++) p2 !== m && (h[a[m]] = 0);
            var g, d = (g = H.parse(o, h)).power;
            _(d) || n2(), l2.push(g), c2.push(g.power);
          }
          Z.Utils.allSame(c2) ? (i = e.length, 2 === (s = l2.length) && (r = new z(c2[0] / (i - 1))), 3 === s && (r = new z(c2[0] / Math.round((Math.sqrt(8 * i - 1) - 3) / 2)))) : r = Z.Math2.QGCD.apply(null, c2), _(r) || n2();
          for (p2 = 0; p2 < l2.length; p2++) {
            var v = l2[p2], w = v.power.clone().divide(r);
            v.multiplier = new z(Math.pow(v.multiplier, 1 / w)), v.power = r.clone(), u2 = H.add(u2, v);
          }
          if (u2.group !== X) return e;
          for (; ; ) {
            var y2 = R.div(e.clone(), u2.clone());
            if (!y2[1].equals(0)) break;
            if (e = y2[0], t.add(u2.clone()), e.equals(1)) break;
          }
        } catch (o2) {
        }
        return e;
      }, factor: function(e, t) {
        if (e.isConstant()) return Z.Math2.factor(e);
        var n2, r, i = H.parse(e), t = R.Factor._factor(i, t);
        return t.equals(e) || t.group === L && (n2 = new Q(1), e = H.parse(t.power), r = H.parse(t.multiplier), t.toUnitMultiplier(), t.multiplier.lessThan(0) && (n2.negate(), t.negate()), t.each(function(e2) {
          e2 = H.parse(R.Factor._factor(e2));
          e2.group === L ? (r = H.multiply(r, Q.create(e2.multiplier)), e2.each(function(e3) {
            e3 = H.parse(R.Factor._factor(e3));
            n2 = H.multiply(n2, e3), e3.group === L && (r = H.multiply(r, Q.create(e3.multiplier)));
          })) : n2 = H.multiply(n2, e2);
        }), t = H.pow(H.multiply(r, n2), e)), t;
      }, quadFactor: function(e, t) {
        if (e.isPoly() && R.degree(e.equals(2))) {
          var n2 = Z.Utils.variables(e)[0], r = R.coeffs(e, n2), i = R.Factor._factor(r[2].clone());
          if (i.group === L) {
            var s = i.collectSymbols();
            if (2 < s.length) return e;
            var o = H.multiply(H.parse(r[0]), H.parse(s[0])), a = H.parse(r[1]).negate(), i = H.parse(s[1]), o = R.quad(i, a, o).filter(function(e2) {
              if (Z.Utils.isInt(e2)) return e2;
            });
            1 === o.length && (o = o[0], r = H.divide(r[0], H.parse(o)), Z.Utils.isInt(r) && (t.add(H.parse(l("({0})*({1})+({2})", s[1], n2, r))), t.add(H.parse(l("({0})*({1})+({2})", s[0], n2, o))), e = new Q(1)));
          }
        }
        return e;
      }, cubeFactor: function(e, t) {
        var n2, r, i, s, o, a;
        return !e.isComposite() || 2 === (a = e.collectSymbols()).length && (n2 = a[0].sign(), r = a[0].clone().abs(), i = a[1].sign(), s = a[1].clone().abs(), r.isCube() && s.isCube() && (n2 < i && ([n2, i] = [i, n2], [r, s] = [s, r]), o = H.parse(r.getNth(3)), a = H.parse(s.getNth(3)), o = H.multiply(H.expand(H.pow(r.clone().toUnitMultiplier(), H.parse("1/3"))), o), a = H.multiply(H.expand(H.pow(s.clone().toUnitMultiplier(), H.parse("1/3"))), a), 1 === n2 && -1 === i ? (t.add(H.parse(l("(({0})-({1}))", o, a))), t.add(H.parse(l("(({0})^2+({0})*({1})+({1})^2)", o, a))), e = Q(1)) : 1 === n2 && 1 === i && (t.add(H.parse(l("(({0})+({1}))", o, a))), t.add(H.parse(l("(({0})^2-({0})*({1})+({1})^2)", o, a))), e = Q(1)))), e;
      }, _factor: function(e, t) {
        var n2;
        e.group;
        if (e.group === C) {
          var r = e.args[0];
          if (r.group === j && r.isSimple()) return e;
        } else if (e.group === j && e.isSimple()) return e;
        e.group === X && (e.distributeMultiplier(true), n2 = new Q(0), e.each(function(e2) {
          (e2.group === X && e2.power.greaterThan(1) || e2.group === L) && (e2 = H.expand(e2)), n2 = H.add(n2, e2);
        }), n2.power = e.power, e = n2);
        r = (e = e.group === C && "sqrt" !== e.fname ? Z.Utils.evaluate(e) : e).clone();
        try {
          if (e.group === L) {
            var i = H.parse(e.power), s = R.Simplify.strip(e.getDenom()), o = R.Simplify.strip(e.getNum()), a = s.pop(), u2 = o.pop();
            if (u2.equals(e)) return e;
            var l2 = R.Factor.factor(u2), c2 = R.Factor.factor(a), p2 = R.Simplify.unstrip(o, l2), f2 = R.Simplify.unstrip(s, c2);
            return A = H.divide(p2, f2);
          }
          if (e.group === j) return e;
          if (e.isConstant()) return e.equals(1) ? e.clone() : Z.Math2.factor(e);
          i = e.power.clone();
          if (!_(i) || i.lessThan(0) && e.group === C) return e;
          var h = i.sign();
          e.toLinear(), t = t || new O();
          var m = {};
          e = H.parse(Z.Utils.subFunctions(e, m)), 0 < I(m).length && (t.preAdd = function(e2) {
            return H.parse(e2, Z.Utils.getFunctionsSubs(m));
          }), e.isLinear() || (t.pFactor = e.power.toString(), e.toLinear());
          var g = $(e);
          e.isImaginary() && g.push(Z.Settings.IMAGINARY);
          var d = 1 < g.length;
          if (d) {
            var v = true, w = true;
            if (e.each(function(e2) {
              e2.group !== j && (v = false), e2.multiplier.equals(1) || (w = false);
            }), v && w) return H.pow(H.parse(e, Z.Utils.getFunctionsSubs(m)), H.parse(i));
          }
          var y2 = new O();
          e = R.Factor.coeffFactor(e, y2), y2.each(function(e2) {
            U(i) && e2.lessThan(0) && e2.negate(), h < 0 && e2.invert(), t.add(e2);
          });
          var b2 = new O();
          if (e = R.Factor.powerFactor(e, b2), b2.each(function(e2) {
            h < 0 && e2.invert(), t.add(e2);
          }), d) e = R.Factor.cubeFactor(e, t), e = R.Factor.mfactor(e, t), t.each(function(e2) {
            h < 0 && e2.power.negate();
          });
          else {
            var S = g[0];
            e = R.Factor.squareFree(e, t, S);
            var M = new O();
            e = R.Factor.trialAndError(e, M, S);
            var N, E = M.toSymbol();
            if (E.equals(r)) return E;
            for (N in M.factors) {
              var q = M.factors[N];
              t.add(H.pow(q, H.parse(i)));
            }
            e.equals(r) && (e = R.Factor.quadFactor(e, t));
          }
          e = H.parse(e, Z.Utils.getFunctionsSubs(m));
          var x = 1 === t.length;
          t.add(H.pow(e, H.parse(i)));
          var A = t.toSymbol();
          return A = x && e.equals(1) && A.isLinear() ? H.pow(A, H.parse(i)) : A;
        } catch (e2) {
          return r;
        }
      }, reduce: function(e, t) {
        if (e.group === X && 2 === e.length) {
          var n2 = e.collectSymbols().sort(function(e2, t2) {
            return t2.multiplier - e2.multiplier;
          });
          if (n2[0].power.equals(n2[1].power)) {
            var r = H.parse(n2[0].power), i = n2[0].clone().toLinear(), s = n2[1].clone().toLinear();
            t.add(H.add(i.clone(), s.clone())), s.negate();
            for (var o = Number(r), a = new Q(0), u2 = 1; u2 <= o; u2++) var l2 = H.pow(i.clone(), H.subtract(r.clone(), new Q(u2))), c2 = H.pow(s.clone(), H.subtract(new Q(u2), new Q(1))), a = H.add(a, H.multiply(l2, c2));
            return a;
          }
        }
        return e;
      }, squareFree: function(e, t, n2) {
        if (e.isConstant() || e.group === j) return e;
        var r = new W(e, n2).squareFree(), n2 = r[2];
        if (1 === n2) return e;
        e = r[1].toSymbol();
        return e.power = e.power.multiply(new z(n2)), t.add(R.Factor.factor(e)), R.Factor.squareFree(r[0].toSymbol(), t);
      }, powerFactor: function(e, t) {
        if (e.group !== y || e.previousGroup === p) return e;
        var n2 = I(e.symbols);
        if (!Z.Utils.allNumeric(n2)) return e;
        var n2 = Z.Utils.arrayMin(n2), r = new Q(0), i = H.parse(e.value + "^" + n2);
        return e.each(function(e2) {
          e2 = H.divide(e2, i.clone()), r = H.add(r, e2);
        }), t.add(i), r;
      }, coeffFactor: function(e, t) {
        var n2, r, i, s;
        return e.isComposite() && ((n2 = Z.Math2.QGCD.apply(null, e.coeffs())).equals(1) ? ((r = function(e2) {
          var t2;
          return e2.group === L ? (t2 = 0, e2.each(function(e3) {
            t2 += e3.power;
          })) : t2 = Number(e2.power), t2;
        })(s = (i = e.collectSymbols(null, null, null, true).sort(function(e2, t2) {
          return e2.isConstant(true) ? 1 : t2.power - e2.power;
        }))[0]) > r(i[1]) || i[1].isConstant(true)) && s.multiplier.lessThan(0) && (t.add(new Q(-1)), e.each(function(e2) {
          e2.negate();
        }, true)) : (e.each(function(e2) {
          e2.isComposite() ? e2.each(function(e3) {
            e3.multiplier = e3.multiplier.divide(n2);
          }) : e2.multiplier = e2.multiplier.divide(n2);
        }), e.updateHash()), t && t.add(new Q(n2))), e;
      }, trialAndError: function(e, t, n2) {
        var r = e.clone();
        try {
          var i = [];
          if (e.isConstant() || e.group === j) return e;
          for (var s = new W(e, n2), o = s.coeffs[0], a = Z.Math2.ifactor(o), u2 = R.proots(e), l2 = 0; l2 < u2.length; l2++) {
            var c2 = u2[l2], p2 = 1;
            if (!isNaN(c2)) {
              for (var f2 in a) {
                var h = Z.Utils.round(Math.log(f2) / Math.log(Math.abs(c2)), 8);
                if (_(h)) {
                  c2 = f2, p2 = h;
                  break;
                }
              }
              var m = new z(c2), g = [new z(m.num).negate()];
              g[p2] = new z(m.den);
              var d = W.fromArray(g, s.variable).fill(), v = s.divide(d);
              v[1].equalsNumber(0) && (s = v[0], i.push(d.toSymbol()));
            }
          }
          return s.equalsNumber(1) || (s = R.Factor.search(s, t)), i.forEach(function(e2) {
            t.add(e2);
          }), s.toSymbol();
        } catch (e2) {
          return r;
        }
      }, search: function(i, s, o) {
        o = o || 10;
        function e(e2, t2, n3, r2) {
          if ((n3 = W.fit(e2, t2, n3, o, r2, a)) && 1 < n3.coeffs.length) {
            r2 = i.divide(n3);
            if (r2[1].equalsNumber(0)) return s.add(n3.toSymbol()), [r2[0], n3];
          }
          return null;
        }
        var a = i.variable, t = i.coeffs[0], n2 = Z.Math2.ifactor(t), r = i.lc(), u2 = Z.Math2.ifactor(r), l2 = i.sub(o), c2 = Z.Math2.ifactor(l2), p2 = R.Factor.mix(c2, l2 < 0), f2 = Math.ceil(i.coeffs.length / 2), h = r.lessThan(0), m = t.lessThan(0);
        for (n2[u2[1] = 1] = 1; f2--; ) for (var g in u2) for (var d in n2) for (var v = 0; v < p2.length; v++) {
          var w = e(g, d, p2[v], f2);
          if (w) return i = w[0], i = !Z.Utils.isPrime(i.sub(o)) ? R.Factor.search(i, s) : i;
          w || (h && m ? w = e(-g, -d, p2[v], f2) : h ? w = e(-g, d, p2[v], f2) : m && (w = e(g, -d, p2[v], f2)));
        }
        return i;
      }, mSqfrFactor: function(e, t) {
        if (e.group !== C) for (var n2 = $(e).reverse(), r = 0; r < n2.length; r++) do {
          if (n2[r] !== e.value) {
            var i = Z.Calculus.diff(e, n2[r]), s = R.Factor.coeffFactor(i);
            if (s.equals(0)) break;
            var o = true;
            if (s.isConstant() && e.isComposite() && e.each(function(e2) {
              e2.multiplier % s != 0 && (o = false);
            }, true), o) {
              var a = R.div(e, s.clone()), u2 = a[1].equals(0);
              if (e.equals(a[0]) && a[1].equals(0)) break;
              if (a[0].isConstant()) {
                t.add(a[0]);
                break;
              }
            } else u2 = false;
            u2 && (t.add(a[0]), e = s);
          } else t.add(e), e = new Q(1);
        } while (u2);
        return e;
      }, sqdiff: function(e, t) {
        if (e.isConstant("all")) return e;
        try {
          var n2, r, i, s, o, a = function(e2) {
            return Z.Utils.block("POSITIVE_MULTIPLIERS", function() {
              return Q.unwrapPARENS(f.sqrt(f.abs(e2)));
            }, true);
          }, u2 = Z.Utils.separate(e.clone()), l2 = [];
          for (n2 in u2) "constants" !== n2 && l2.push(u2[n2]);
          if (l2.sort(function(e2, t2) {
            return t2.power - e2.power;
          }), 2 === l2.length) {
            if (o = l2.pop(), r = l2.pop(), U(o.power) && U(r.power) && o.sign() === r.sign() && o.group === j && r.group === j) throw new Error("Unable to factor");
            o.isComposite() && r.power.equals(2) ? (r = a(r), (i = R.Factor.factor(H.add(o, u2.constants))).power.equals(2) && (i.toLinear(), t.add(H.subtract(i.clone(), r.clone())), t.add(H.add(i, r)), e = new Q(1))) : (o = o.powSimp(), r = r.powSimp(), o.group !== j && "" !== o.fname || !o.power.equals(2) || r.group !== j && "" !== r.fname || !r.power.equals(2) || u2.constants || (o.multiplier.lessThan(0) && (s = r, r = o, o = s), o.multiplier.greaterThan(0) && (o = a(o), r = a(r)), t.add(H.subtract(o.clone(), r.clone())), t.add(H.add(o, r)), e = new Q(1)));
          }
        } catch (e2) {
        }
        return e;
      }, mfactor: function(t, e) {
        if (t.group === C) {
          var n2, r;
          "sqrt" === t.fname ? (n2 = new O(), r = R.Factor.common(t.args[0].clone(), n2), r = R.Factor.coeffFactor(r, n2), t = H.multiply(H.symfunction("sqrt", [r]), H.parse(t.multiplier)), n2.each(function(e2) {
            t = H.multiply(t, H.parse(Z.Utils.format("sqrt({0})", e2)));
          })) : e.add(t);
        } else {
          t = R.Factor.mSqfrFactor(t, e);
          for (var i, s = $(t), o = t.collectSymbols().map(function(e2) {
            return Q.unwrapSQRT(e2);
          }), a = {}, u2 = {}, l2 = s.length, c2 = o.length, p2 = 0; p2 < l2; p2++) {
            var f2 = s[p2];
            a[f2] = new Q(0);
            for (var h = 0; h < c2; h++) {
              var m, g = o[h];
              g.contains(f2) && (m = (g.value === f2 ? g : g.symbols[f2]).power.toDecimal(), (!u2[f2] || m < u2[f2]) && (u2[f2] = m), a[f2] = H.add(a[f2], g.clone()));
            }
          }
          for (i in a) {
            var d = H.parse(i + "^" + u2[i]), v = H.divide(a[i], d), w = H.expand(v);
            if (w.equals(1)) break;
            v = R.div(t.clone(), w);
            if (v[0].equals(0)) break;
            if (v[1].equals(0)) {
              var y2 = false;
              if (v[0].each(function(e2) {
                _(e2.multiplier) || (y2 = true);
              }), y2) {
                v[1] = H.expand(H.multiply(v[1], w));
                break;
              }
            }
            w = _(w) && w.lessThan(0);
            if (v[1].equals(0) && !w) {
              w = R.div(t.clone(), v[0].clone());
              if ((d = w[0]).equals(0)) return t;
              if (t = w[1], d.equals(-1) && !t.equals(0)) return t;
              w = v[0];
              if (t.equals(w)) {
                v = R.Factor.reduce(w, e);
                return t.equals(v) ? v : R.Factor.mfactor(v, e);
              }
              return (e.add(w), t.equals(0)) ? d : d.isConstant("all") ? (e.add(d), d) : R.Factor.mfactor(d, e);
            }
          }
        }
        return t = R.Factor.sqdiff(t, e), t = R.Factor.zeroes(t, e);
      } }, allLinear: function(e) {
        for (var t = e.length, n2 = 0; n2 < t; n2++) if (!R.isLinear(e[n2])) return false;
        return true;
      }, isLinear: function(e) {
        var t = false, n2 = e.group;
        if (n2 === y || n2 === X) for (var r in t = true, e.symbols) {
          var i = e.symbols[r], r = i.group;
          if (r !== C && r !== p || (t = false), r === L) t = 1 === $(i).length;
          else if (r === y || r === X) t = R.isLinear(i);
          else if (i.group !== u && "1" !== i.power.toString()) {
            t = false;
            break;
          }
        }
        else n2 === j && 1 === e.power && (t = true);
        return t;
      }, gcd: function() {
        var e = 1 === arguments.length && arguments[0] instanceof Z.Vector ? arguments[0].elements : Z.Utils.arguments2Array(arguments);
        if (0 === e.length) return new Q(1);
        if (1 === e.length) return e[0];
        for (var t = [], n2 = false, r = 0; r < e.length; r++) if (e[r].group === C && "gcd" === e[r].fname) (e = e.concat(arguments[r].args)).splice(r, 1);
        else {
          var i = $(e[r]);
          if (Z.Utils.haveIntersection(i, t)) {
            n2 = true;
            break;
          }
          t = t.concat(i);
        }
        if (n2 || 0 === t.length) {
          if (e.every(function(e2) {
            return e2.getDenom().equals(1);
          })) {
            for (var s = e[0], r = 1; r < e.length; r++) s = R.gcd_(e[r], s);
            return s;
          }
          return H.divide(R.gcd.apply(null, e.map(function(e2) {
            return e2.getNum();
          })), R.lcm.apply(null, e.map(function(e2) {
            return e2.getDenom();
          })));
        }
        return H.symfunction("gcd", e);
      }, gcd_: function(e, t) {
        if (e.group !== C && e.group !== c || (e = Z.Utils.block("PARSE2NUMBER", function() {
          return H.parse(e);
        })), t.group === C && (t = Z.Utils.block("PARSE2NUMBER", function() {
          return H.parse(t);
        })), e.isConstant() && t.isConstant()) return new Q(Z.Math2.QGCD(new z(+e), new z(+t)));
        var n2 = H.multiply(e.getDenom() || new Q(1), t.getDenom() || new Q(1)).invert();
        if (e = H.multiply(e.clone(), n2.clone()), t = H.multiply(t.clone(), n2.clone()), e = H.expand(e), t = H.expand(t), e.group === L || t.group === L) {
          var r = H.divide(e.clone(), t.clone());
          if (!(u2 = H.multiply(t.clone(), r.getDenom().invert())).equals(1)) return u2;
        }
        if (e.group === p || t.group === p) {
          var r = new Q(Z.Math2.GCD(e.multiplier, t.multiplier)), i = R.gcd_(e.value === Y ? new Q(1) : H.parse(e.value), t.value === Y ? new Q(1) : H.parse(t.value)), s = R.gcd_(H.parse(e.power), H.parse(t.power));
          return H.multiply(r, H.pow(i, s));
        }
        e.length < t.length && (u2 = e, e = t, t = u2);
        i = $(e), s = $(t);
        if (i.length === s.length && 1 === i.length && i[0] === s[0] || 1 === i.length && 0 === s.length || 0 === i.length && 1 === s.length) return e = new W(e), t = new W(t), H.divide(e.gcd(t).toSymbol(), n2);
        var o, a = [];
        for (e.each(function(e2) {
          a.push(e2.multiplier);
        }), t.each(function(e2) {
          a.push(e2.multiplier);
        }); !t.equals(0); ) {
          var u2 = t.clone();
          if (e = e.clone(), o = R.div(e, u2), t = o[1], o[0].equals(0)) return H.divide(new Q(Z.Math2.QGCD(e.multiplier, t.multiplier)), n2);
          e = u2;
        }
        var l2 = Z.Math2.QGCD.apply(void 0, a);
        return l2.equals(1) || e.each(function(e2) {
          e2.multiplier = e2.multiplier.divide(l2);
        }), !e.equals(1) || e.isConstant() || t.isConstant() ? H.divide(e, n2) : H.divide(H.symfunction("gcd", arguments), n2);
      }, lcm: function() {
        var e;
        1 === arguments.length ? arguments[0] instanceof Z.Vector ? e = arguments[0].elements : H.error("lcm expects either 1 vector or 2 or more arguments") : e = Z.Utils.arguments2Array(arguments);
        var t = e.reduce(function(e2, t2) {
          return H.multiply(e2, t2.clone());
        }, new Q(1)), n2 = function(e2, t2) {
          t2 = Number(t2);
          for (var n3, r, i = [], s = Math.pow(2, e2.length), o = t2; o < s; o++) {
            for (n3 = [], r = e2.length - 1; 0 != (o & 1 << r) && n3.push(e2[r]), r--; ) ;
            n3.length === t2 && i.push(n3);
          }
          return i;
        }(arguments, arguments.length - 1).map(function(e2) {
          return e2.reduce(function(e3, t2) {
            return H.multiply(e3, t2.clone());
          }, new Q(1));
        }), n2 = e.every(function(e2) {
          return Z.Utils.isVariableSymbol(e2);
        }) ? H.symfunction("gcd", Z.Utils.arrayUnique(n2)) : R.gcd.apply(null, n2);
        return H.divide(t, n2);
      }, divide: function(e, t) {
        var n2 = Z.Algebra.Factor.factor(e.clone()), r = n2.getDenom();
        return r.isConstant("all") ? r = new Q(1) : e = H.expand(Q.unwrapPARENS(H.multiply(n2, r.clone()))), e = R.div(e, t), t = H.divide(e[1], t), H.divide(H.add(e[0], t), r);
      }, div: function(e, t) {
        var n2, r, i = [new Q(0), e.clone()];
        try {
          if (t.isConstant("all")) return e.each(function(e2) {
            e2.multiplier = e2.multiplier.divide(t.multiplier);
          }), [e, new Q(0)];
          if (e = H.expand(e), t = H.expand(t), e.group === j && t.group === X) {
            var s = e.value, o = Z.Utils.decompose_fn(t.clone(), s, true);
            if (e.isLinear() && o.x && o.x.isLinear() && t.isLinear()) {
              var a = Q.create(e.multiplier);
              return [H.divide(a.clone(), o.a.clone()), H.divide(H.multiply(a, o.b), o.a).negate()];
            }
          }
          if (e.group === j && t.group === j) {
            var u2 = H.divide(e.clone(), t.clone());
            return u2.isConstant() ? [u2, new Q(0)] : [new Q(0), e.clone()];
          }
          var l2, c2, p2 = e.hasFunc(), f2 = t.hasFunc(), h = false;
          (p2 || f2) && (h = true, l2 = {}, e = H.parse(Z.Utils.subFunctions(e, l2)), t = H.parse(Z.Utils.subFunctions(t, l2)), c2 = Z.Utils.getFunctionsSubs(l2));
          var m = Z.Utils.arrayUnique($(e).concat($(t)));
          if ((e.isImaginary() || t.isImaginary()) && m.push(Z.Settings.IMAGINARY), 1 === m.length) var g = (F = new W(e).divide(new W(t)))[0].toSymbol(), d = F[1].toSymbol();
          else {
            m.push(Y);
            var v = function(e2) {
              for (var t2 = new Q(0), n3 = 0; n3 < e2.length; n3++) var r2 = e2[n3].toSymbol(), t2 = H.add(t2, r2);
              return t2;
            }, b2 = function(e2, t2) {
              var n3, r2 = Math.max.apply(null, e2.terms), i2 = 0;
              if (!t2) {
                for (var s2 = 0; s2 < e2.terms.length; s2++) if (e2.terms[s2].equals(r2) && (n3 = s2, i2++), 1 < i2) return;
              }
              if (t2) {
                for (s2 = 0; s2 < e2.terms.length; s2++) if (e2.terms[s2].equals(r2)) {
                  n3 = s2;
                  break;
                }
              }
              return [r2, n3, e2];
            }, S = function(e2, t2) {
              var n3 = e2[t2 = t2 || 0], r2 = e2.length;
              if (n3) {
                for (var i2, s2 = b2(n3), o2 = t2 + 1; o2 < r2; o2++) {
                  var a2 = e2[o2], u3 = n3.sum.equals(a2.sum);
                  if (!u3 && s2) break;
                  if (u3) {
                    for (var l3, c3, p3, f3, h2 = n3.terms.length, m2 = 0; m2 < h2; m2++) {
                      var g2 = n3.terms[m2], d2 = a2.terms[m2];
                      void 0 !== l3 && !g2.greaterThan(l3) || (l3 = g2, p3 = m2), void 0 !== c3 && !d2.greaterThan(c3) || (c3 = d2, f3 = m2);
                    }
                    var v2 = l3.subtract(a2.terms[p3]), u3 = c3.subtract(n3.terms[f3]);
                    if (v2 < u3) {
                      s2 = [c3, f3, a2];
                      break;
                    }
                    if (u3 < v2) {
                      s2 = [l3, p3, n3];
                      break;
                    }
                  } else if (s2 = b2(a2)) break;
                  s2 = b2(a2);
                }
                if (!s2) return b2(e2[0], true);
                for (o2 = 0; o2 < E.length; o2++) {
                  var w2, y3 = E[o2].terms;
                  if ((w2 = s2[1]) === y3.length - 1) return;
                  if (!(i2 = y3[w2]).equals(0)) break;
                }
                return i2.equals(0) ? S(e2, ++t2) : s2;
              }
            }, w = Z.Utils.toMapObj(m), y2 = function(e2, t2) {
              return t2.sum.subtract(e2.sum);
            }, M = function(e2, t2) {
              if (!e2 || !t2) return false;
              for (var n3 = 0; n3 < e2.terms.length; n3++) if (e2.terms[n3].lessThan(t2.terms[n3])) return false;
              return true;
            }, N = e.tBase(w).sort(y2), E = t.tBase(w).sort(y2), q = M(N[0], E[0]) && N[0].count > E[0].count ? E : N, x = S(q), A = [];
            if (x) {
              var C2 = x[1], L2 = function(e2, t2) {
                var n3 = e2.len(), r2 = t2.len(), t2 = t2.terms[C2], e2 = e2.terms[C2];
                return n3 < r2 && t2.greaterThan(e2) ? r2 - n3 : t2.subtract(e2);
              }, C2 = function(e2, t2) {
                for (var n3 = [], r2 = 0; r2 < e2.length; r2++) for (var i2 = e2[r2], s2 = 0; s2 < i2.terms.length; s2++) {
                  var o2 = n3[s2], a2 = i2.terms[s2];
                  0 === r2 ? n3[s2] = a2 : o2 && !o2.equals(a2) && (n3[s2] = void 0);
                }
                for (r2 = 0; r2 < n3.length; r2++) if ((i2 = n3[r2]) && !i2.equals(0)) return r2;
                return t2;
              }(N, C2);
              N.sort(L2), E.sort(L2);
              var I2 = E[0], U2 = N[0], _2 = new J(new z(1), [], U2.map);
              if (I2.sum.greaterThan(U2.sum) && 1 < U2.len()) for (var O2 = 0; O2 < U2.terms.length; O2++) {
                var R2 = I2.terms[O2].subtract(U2.terms[O2]);
                if (R2.equals(0)) _2.terms[O2] = new z(0);
                else {
                  var T = R2.add(new z(1));
                  _2.terms[O2] = R2;
                  for (var P = 0; P < N.length; P++) N[P].terms[O2] = N[P].terms[O2].add(T);
                }
              }
              for (var k = M(N[0], E[0]), D = 0; k && (r = E, !(n2 = N)[0].sum.equals(r[0].sum) || n2.length >= r.length); ) {
                if (200 < D++) throw new Z.exceptions.InfiniteLoopError("Unable to compute!");
                var F = N[0].divide(E[0]);
                A.push(F), N.shift();
                for (O2 = 1; O2 < E.length; O2++) {
                  var B = E[O2].multiply(F).generateImage(), G = N.length;
                  0 === G && (B.coeff = B.coeff.neg(), N.push(B), N.sort(L2));
                  for (P = 0; P < G; P++) {
                    var V = N[P];
                    if (V.getImg() === B.getImg()) {
                      V.coeff = V.coeff.subtract(B.coeff), V.coeff.equals(0) && (Z.Utils.remove(N, P), P--);
                      break;
                    }
                    P === G - 1 && (B.coeff = B.coeff.neg(), N.push(B), N.sort(L2));
                  }
                }
                if (!(k = M(N[0], E[0])) && N.length >= E.length) {
                  for (O2 = 1; O2 < N.length; O2++) if (k = M(N[O2], E[0])) {
                    N.unshift(Z.Utils.remove(N, O2));
                    break;
                  }
                }
              }
            }
            g = v(A), d = v(N), void 0 !== _2 && (_2 = _2.toSymbol(), g = H.divide(g, _2.clone()), d = H.divide(d, _2));
          }
          return h && (g = H.parse(g.text(), c2), d = H.parse(d.text(), c2)), [g, d];
        } catch (e2) {
          return i;
        }
      }, line: function(e, t, n2) {
        Z.Utils.isArray(e) && (e = Z.Utils.convertToVector(e)), Z.Utils.isArray(t) && (t = Z.Utils.convertToVector(t)), n2 = H.parse(n2 || "x"), Z.Utils.isVector(e) && Z.Utils.isVector(t) || H.error('Line expects a vector! Received "' + e + '" & "' + t + '"');
        var r = H.subtract(t.e(1).clone(), e.e(1).clone()), t = H.subtract(t.e(2).clone(), e.e(2).clone()), r = H.divide(t, r), n2 = H.multiply(n2, r.clone()), r = H.multiply(e.e(1).clone(), r);
        return H.add(H.subtract(n2, r), e.e(2).clone());
      }, PartFrac: { createTemplate: function(r, e, t, n2) {
        (r = R.Factor.factor(r)).each(function(e2, t2) {
          var n3;
          e2.group === C && "" === e2.fname && e2.args[0].group === j && (n3 = e2.args[0], this.symbols ? (delete this.symbols[t2], this.symbols[n3.value] = n3) : r = e2.args[0]);
        });
        for (var i = e.collectFactors(), s = [], o = [], a = new Q(1), u2 = 0; u2 < i.length; u2++) {
          var l2 = Q.unwrapPARENS(i[u2]);
          if (l2.power.greaterThan(1)) for (var c2 = Number(l2.power), p2 = l2.clone().toLinear(), f2 = Number(R.degree(p2, n2)), h = 0; h < c2; h++) {
            var m = H.pow(p2.clone(), new Q(h + 1));
            t.push(m.clone());
            var g = H.divide(r.clone(), m.clone());
            o.push(f2), s.push(g);
          }
          else {
            f2 = Number(R.degree(l2, n2)), t.push(l2);
            g = H.divide(r.clone(), l2.clone());
            g = H.expand(Q.unwrapPARENS(g)), o.push(f2), s.push(g);
          }
        }
        return [t = t.map(function(e2) {
          return H.multiply(e2, a.clone());
        }), s, o];
      }, partfrac: function(t, o, n2) {
        var e = $(t);
        o = o || H.parse(e[0]);
        try {
          var a, r, i, u2, l2, c2, s, p2, f2, h, m, g, d, v, w = H.expand(t.getNum()), y2 = H.expand(t.getDenom().toUnitMultiplier());
          if (w.multiplier = t.multiplier, i = w.groupTerms(o), Number(R.degree(w, o)) >= Number(R.degree(y2, o)) ? (p2 = (s = R.div(w.clone(), H.expand(y2.clone())))[0], i = (w = s[1]).groupTerms(o)) : p2 = new Q(0), 1 === Number(R.degree(y2, o))) {
            var b2 = H.divide(w, y2);
            return n2 ? [p2, b2] : H.add(p2, b2);
          }
          r = R.Factor.factor(y2), m = R.PartFrac.createTemplate(y2.clone(), r, [], o), g = m[0], f2 = m[1], u2 = m[2], c2 = [i.length], l2 = [], a = [], h = [], f2.map(function(e2, t2) {
            d = g[t2], v = u2[t2];
            for (var n3 = 0; n3 < v; n3++) {
              a.push(d.clone());
              var r2 = Q.create(o, n3), i2 = H.expand(H.multiply(e2, r2.clone())).groupTerms(o), s2 = i2.length;
              c2.push(s2), l2.push(i2), h.push(r2.clone());
            }
          });
          for (var S = Z.Utils.arrayMax(c2), M = new Z.Matrix(Z.Utils.fillHoles(i, S)).transpose(), N = new Z.Matrix(), E = 0; E < l2.length; E++) N.elements.push(Z.Utils.fillHoles(l2[E], S));
          var q = H.multiply(N.transpose().invert(), M), x = n2 ? [p2] : p2;
          return q.each(function(e2, t2) {
            t2 = H.multiply(h[t2], H.divide(e2, a[t2]));
            n2 ? x.push(t2) : x = H.add(x, t2);
          }), x;
        } catch (e2) {
          try {
            if (t.isComposite()) {
              var A = {};
              t.each(function(e3) {
                var t2 = e3.getDenom(), n3 = e3.getNum(), e3 = A[t2];
                A[t2] = e3 ? H.add(e3, n3) : n3;
              });
              var C2, L2 = new Q(0);
              for (C2 in A) L2 = H.add(L2, H.divide(A[C2], H.parse(C2)));
              t = L2;
            }
          } catch (e3) {
          }
        }
        return t;
      } }, degree: function(e, t, n2) {
        if (n2 = n2 || { nd: [], sd: [], depth: 0 }, !t) {
          var r = $(e);
          if (1 < r.length) throw new Error("You must specify the variable for multivariate polynomials!");
          if (0 === r.length) return new Q(0);
          t = H.parse(r[0]);
        }
        r = e.group;
        e.isComposite() ? ((e = e.clone()).distributeExponent(), e.each(function(e2) {
          n2.depth++, R.degree(e2, t, n2), n2.depth--;
        })) : e.group === L ? e.each(function(e2) {
          n2.depth++, R.degree(e2, t, n2), n2.depth++;
        }) : r === p && e.value === t.value ? n2.sd.push(e.power.clone()) : r === j && e.value === t.value ? n2.nd.push(H.parse(e.power)) : n2.nd.push(new Q(0));
        e = 0 < n2.nd.length ? Z.Utils.arrayMax(n2.nd) : void 0;
        return 0 === n2.depth && 0 < n2.sd.length ? (void 0 !== e && n2.sd.unshift(e), H.symfunction("max", n2.sd)) : Z.Utils.isSymbol(e) ? e : H.parse(e);
      }, sqComplete: function(e, t, n2) {
        Z.Utils.isSymbol(t) || (t = H.parse(t));
        var r, i, s, o, a, u2 = function(e2) {
          throw new Z.exceptions.ValueLimitExceededError(e2 = e2 || "Stopping");
        };
        return e.isPoly(true) || u2("Must be a polynomial!"), o = Z.Utils.inBrackets, e = e.clone(), (r = Z.Algebra.degree(e, t)).equals(2) || u2("Cannot complete square for degree " + r), a = (s = Z.Algebra.coeffs(e, t))[2], u2 = s[1].sign(), r = H.divide(s[1], new Q(2)), e = H.pow(r.clone(), new Q(2)), n2 ? [a, r, i] : (a = f.sqrt(a), e = H.divide(f.sqrt(e), a.clone()), i = H.subtract(s[0], H.pow(e.clone(), new Q(2))), { a: e = H.parse(o(a.clone() + "*" + t + (u2 < 0 ? "-" : "+") + e)), c: i, f: H.add(H.pow(e.clone(), new Q(2)), i.clone()) });
      }, Simplify: { strip: function(e) {
        var t = H.parse(e.multiplier);
        e.toUnitMultiplier();
        var n2 = H.parse(e.power);
        return e.toLinear(), [t, n2, e];
      }, unstrip: function(e, t) {
        var n2 = e[0], e = e[1];
        return H.multiply(n2, H.pow(t, e));
      }, complexSimp: function(e, t) {
        var n2 = e.realpart(), r = e.imagpart(), i = t.realpart(), s = t.imagpart(), e = H.multiply(n2.clone(), i.clone()), t = H.multiply(r.clone(), s.clone()), r = H.multiply(i.clone(), r), n2 = H.multiply(n2, s.clone()), s = H.add(H.pow(i, new Q(2)), H.pow(s, new Q(2)));
        return H.divide(H.add(H.add(e, t), H.multiply(H.subtract(r, n2), Q.imaginary())), s);
      }, trigSimp: function(e) {
        var t, n2, r, i, s, o;
        return e.containsFunction(["cos", "sin", "tan"]) && (e = e.clone(), n2 = (e = (t = R.Simplify.strip(e)).pop()).clone(), e.group === X ? (r = new Q(0), e.each(function(e2) {
          e2 = R.Simplify.trigSimp(e2.fnTransform());
          r = H.add(r, e2);
        }, true), n2 = H.pow(H.multiply(new Q(e.multiplier), r), new Q(e.power))) : e.group === L && (i = e.getNum(), s = e.getDenom(), (n2 = "sin" === i.fname && "cos" === s.fname && i.args[0].equals(s.args[0]) && i.power.equals(s.power) ? H.parse(Z.Utils.format("({0})*({1})*tan({2})^({3})", s.multiplier, i.multiplier, i.args[0], i.power)) : n2).group === L && (o = new Q(1), n2.each(function(e2) {
          "tan" === e2.fname && (e2 = H.parse(Z.Utils.format("({0})*sin({1})^({2})/cos({1})^({2})", e2.multiplier, R.Simplify.simplify(e2.args[0]), e2.power))), o = H.multiply(o, e2);
        }), n2 = o)), e = n2 = R.Simplify.unstrip(t, n2).distributeMultiplier()), e;
      }, fracSimp: function(e) {
        var t = e.getDenom();
        if ((e = (a = e.getNum()).isImaginary() && t.isImaginary() ? R.Simplify.complexSimp(a, t) : e).isComposite()) {
          for (var n2, r, i, s, o, a, u2 = (e = 1 < e.power ? H.expand(e) : e).collectSymbols(), l2 = u2.pop(); u2.length; ) o = u2.pop(), s = H.parse(l2.getDenom()), i = H.parse(o.getDenom()), n2 = l2.getNum(), r = o.getNum(), o = H.multiply(s.clone(), i.clone()), i = H.multiply(n2, i), s = H.multiply(r, s), s = H.add(i, s), l2 = H.divide(s, o);
          return t = H.expand(l2.getDenom()), (t = (a = H.expand(l2.getNum())).isImaginary() && t.isImaginary() ? R.Simplify.complexSimp(a, t) : H.divide(a, t)).equals(e) ? e : R.Simplify.simplify(t);
        }
        return e;
      }, ratSimp: function(e) {
        var t, n2;
        return e.group === L && (t = e.getDenom(), n2 = e.getNum().distributeMultiplier(), t = R.Simplify.fracSimp(t), n2 = R.Simplify.fracSimp(n2), e = H.divide(n2, t)), e;
      }, sqrtSimp: function(e, t) {
        if (e.isSQRT()) {
          var n2, r, i = R.Factor.factor(e.args[0].clone()), s = H.parse(i.multiplier), o = s.sign(), a = H.sqrt(s.abs());
          if (_(a)) return i.group === L ? (n2 = new Q(1), i.each(function(e2) {
            var t2;
            e2.group === u ? (t2 = H.sqrt(e2.clone()), _(t2) ? a = H.multiply(a, t2) : n2 = H.multiply(n2, e2)) : n2 = H.multiply(n2, e2);
          }), o = H.multiply(n2, H.parse(o)), (r = H.sqrt(o.clone())).isImaginary && (r = H.sqrt(H.expand(o.clone())))) : r = H.sqrt(i.clone().toUnitMultiplier()), H.multiply(a, r);
        } else e.isComposite() && e.isLinear() ? (a = new Q(0), e.each(function(e2) {
          a = H.add(a, R.Simplify.sqrtSimp(e2));
        }, true), a = H.multiply(a, H.parse(e.multiplier))) : e.group === L && (a = H.parse(e.multiplier), e.each(function(e2) {
          e2 = R.Simplify.sqrtSimp(e2);
          a = H.multiply(a, e2);
        }, true), a = H.pow(a, H.parse(e.power)));
        return a || H.parse(e);
      }, patternSub: function(n2) {
        var r = {}, i = function(e) {
          var t = false;
          return e.each(function(e2) {
            e2.group === X ? t = true : e2.symbols && (t = i(e2));
          }), t;
        }, s = function(e) {
          e.each(function(e2) {
            var t;
            !e2.symbols && e2.group !== C || (i(e2) ? s(e2) : r[e2.value] || (t = Z.Utils.getU(n2), r[e2.value] = t, n2 = n2.sub(e2.value, t)));
          }, true);
        };
        return s(n2), [n2, r];
      }, simplify: function(e) {
        var t = R.Simplify.strip(e);
        if (e = t.pop(), (e = R.Simplify.fracSimp(e)).isConstant() || e.group === Z.groups.S) return t.push(e), R.Simplify.unstrip(t, e);
        var n2, r = e.clone(), r = R.Simplify.trigSimp(r);
        return r = R.Simplify.ratSimp(r), (r = R.Factor.factor(r)).group === Z.groups.CP && r.isLinear() && (e = r.multiplier.clone(), r.toUnitMultiplier(), n2 = new Q(0), r.each(function(e2) {
          e2 = R.Simplify.simplify(e2);
          n2 = H.add(n2, e2);
        }), (r = n2).multiplier = n2.multiplier.multiply(e)), R.Simplify.unstrip(t, r);
      } }, Classes: { Polynomial: W, Factors: O, MVTerm: J } };
      Z.Expression.prototype.simplify = function() {
        return R.Simplify.simplify(this.symbol);
      }, nerdamer.useAlgebraDiv = function() {
        var n2 = R.divideFn = H.divide, r = 0;
        H.divide = function(e, t) {
          t = 1 === ++r ? Z.Algebra.divide(e, t) : n2(e, t);
          return r = 0, t;
        };
      }, nerdamer.useParserDiv = function() {
        R.divideFn && (H.divide = R.divideFn), delete R.divideFn;
      }, nerdamer.register([{ name: "factor", visible: true, numargs: 1, build: function() {
        return R.Factor.factor;
      } }, { name: "simplify", visible: true, numargs: 1, build: function() {
        return R.Simplify.simplify;
      } }, { name: "gcd", visible: true, numargs: [1], build: function() {
        return R.gcd;
      } }, { name: "lcm", visible: true, numargs: [1], build: function() {
        return R.lcm;
      } }, { name: "roots", visible: true, numargs: -1, build: function() {
        return R.roots;
      } }, { name: "divide", visible: true, numargs: 2, build: function() {
        return R.divide;
      } }, { name: "div", visible: true, numargs: 2, build: function() {
        return R.div;
      } }, { name: "partfrac", visible: true, numargs: [1, 2], build: function() {
        return R.PartFrac.partfrac;
      } }, { name: "deg", visible: true, numargs: [1, 2], build: function() {
        return R.degree;
      } }, { name: "coeffs", visible: true, numargs: [1, 2], build: function() {
        return function() {
          var e = R.coeffs.apply(R, arguments);
          return new Z.Vector(e);
        };
      } }, { name: "line", visible: true, numargs: [2, 3], build: function() {
        return R.line;
      } }, { name: "sqcomp", visible: true, numargs: [1, 2], build: function() {
        return function(t, e) {
          try {
            return e = e || $(t)[0], R.sqComplete(t.clone(), e).f;
          } catch (e2) {
            return t;
          }
        };
      } }]), nerdamer.updateAPI();
    }(), "undefined" != typeof module && void 0 === nerdamer && (nerdamer = require_nerdamer_core(), require_Algebra()), function() {
      "use strict";
      var ct = nerdamer.getCore(), pt = ct.PARSER, ft = ct.Frac, ht = ct.Settings, mt = ct.Utils.isSymbol, gt = ct.groups.FN, dt = ct.Symbol, m = ct.Utils.text, vt = ct.Utils.inBrackets, wt = ct.Utils.isInt, yt = ct.Utils.format, bt = ct.Utils.even, k = ct.Utils.evaluate, g = ct.groups.N, St = ct.groups.S, gt = ct.groups.FN, Mt = ct.groups.PL, Nt = ct.groups.CP, Et = ct.groups.CB, qt = ct.groups.EX, d = ct.groups.P, xt = ht.LOG, At = "sqrt", Ct = "sin", Lt = "cos", It = "tan", Ut = "sec", _t = "csc", Ot = "cot", Rt = "asin", Tt = "atan", Pt = "sinh", kt = "cosh", Dt = "tanh";
      function Ft(e) {
        this.message = e || "";
      }
      Ft.prototype = new Error(), dt.prototype.hasIntegral = function() {
        return this.containsFunction("integrate");
      }, dt.prototype.fnTransform = function() {
        if (this.group !== gt) return this;
        var e, t, n2, r = this.args[0], i = new dt(this.multiplier), s = this.clone().toUnitMultiplier();
        if (this.isLinear()) switch (this.fname) {
          case Pt:
            n2 = pt.parse(yt("(e^({0})-e^(-({0})))/2", r));
            break;
          case kt:
            n2 = pt.parse(yt("(e^({0})+e^(-({0})))/2", r));
            break;
          case Dt:
            n2 = pt.parse(yt("(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))", r));
            break;
          case It:
            n2 = pt.parse(yt("sin({0})/cos({0})", r));
            break;
          case _t:
            n2 = pt.parse(yt("1/sin({0})", r));
            break;
          case Ut:
            n2 = pt.parse(yt("1/cos({0})", r));
            break;
          default:
            n2 = s;
        }
        else if (this.power.equals(2)) switch (this.fname) {
          case Ct:
            n2 = pt.parse(yt("1/2-cos(2*({0}))/2", r));
            break;
          case Lt:
            n2 = pt.parse(yt("1/2+cos(2*({0}))/2", r));
            break;
          case It:
            n2 = pt.parse(yt("sin({0})^2/cos({0})^2", r));
            break;
          case kt:
            n2 = pt.parse(yt("1/2+cosh(2*({0}))/2", r));
            break;
          case Pt:
            n2 = pt.parse(yt("-1/2+cosh(2*({0}))/2", r));
            break;
          case Dt:
            n2 = pt.parse(yt("(1+cosh(2*({0})))/(-1+cosh(2*({0})))", r));
            break;
          case Ut:
            n2 = pt.parse(yt("(1-cos(2*({0})))/(1+cos(2*({0})))+1", r));
            break;
          default:
            n2 = s;
        }
        else this.fname === Ut ? n2 = pt.parse(yt("1/cos({0})^({1})", this.args[0], this.power)) : this.fname === _t ? n2 = pt.parse(yt("1/sin({0})^({1})", this.args[0], this.power)) : this.fname === It ? n2 = this.power.lessThan(0) ? pt.parse(yt("cos({0})^(-({1}))/sin({0})^({1})", this.args[0], this.power.negate())) : pt.parse(yt("sin({0})^({1})/cos({0})^({1})", this.args[0], this.power)) : this.fname === Ct && this.power.lessThan(0) ? n2 = pt.parse(yt("csc({0})^(-({1}))", this.args[0], this.power.negate())) : this.fname === Lt && this.power.lessThan(0) ? n2 = pt.parse(yt("sec({0})^(-({1}))", this.args[0], this.power.negate())) : this.fname === Ct && this.power.equals(3) ? n2 = pt.parse(yt("(3*sin({0})-sin(3*({0})))/4", this.args[0])) : this.fname === Lt && this.power.equals(3) ? n2 = pt.parse(yt("(cos(3*({0}))+3*cos({0}))/4", this.args[0])) : this.fname !== Lt && this.fname !== Ct || !bt(this.power) ? n2 = s : (t = this.power / 2, e = pt.pow(this.clone().toLinear(), pt.parse(2)).fnTransform(), t = pt.expand(pt.pow(e, pt.parse(t))), n2 = new dt(0), t.each(function(e2) {
          e2 = e2.fnTransform();
          n2 = pt.add(n2, e2);
        }, true));
        return pt.multiply(n2, i);
      }, dt.prototype.hasTrig = function() {
        if (this.isConstant(true) || this.group === St) return false;
        if (this.fname && (ct.Utils.in_trig(this.fname) || ct.Utils.in_inverse_trig(this.fname))) return true;
        if (this.symbols) {
          for (var e in this.symbols) if (this.symbols[e].hasTrig()) return true;
        }
        return false;
      }, ct.Expression.prototype.hasIntegral = function() {
        return this.symbol.hasIntegral();
      }, ct.Utils.toCommonDenominator = function(e) {
        if (e.isComposite() && e.isLinear()) {
          var t = new dt(e.multiplier), n2 = new dt(1), r = new dt(0);
          return e.each(function(e2) {
            n2 = pt.multiply(n2, e2.getDenom());
          }, true), e.each(function(e2) {
            var t2 = e2.getNum(), e2 = e2.getDenom(), e2 = pt.multiply(t2, pt.divide(n2.clone(), e2));
            r = pt.add(r, e2);
          }), pt.multiply(t, ct.Algebra.divide(pt.expand(r), pt.expand(n2)));
        }
        return e;
      }, ct.Utils.in_inverse_trig = function(e) {
        return -1 !== [Rt, "acos", Tt, "acsc", "asec", "acot"].indexOf(e);
      }, ct.Utils.in_trig = function(e) {
        return -1 !== [Lt, Ct, It, Ut, _t, Ot].indexOf(e);
      }, ct.Utils.in_htrig = function(e) {
        return -1 !== [Pt, kt, Dt, "acsch", "asech", "acoth"].indexOf(e);
      }, ct.Matrix.jacobian = function(e, t) {
        var i = new ct.Matrix();
        return (t = t || ct.Utils.arrayGetVariables(e)).forEach(function(n2, r) {
          e.forEach(function(e2, t2) {
            e2 = ct.Calculus.diff(e2.clone(), n2);
            i.set(t2, r, e2);
          });
        }), i;
      }, ct.Matrix.prototype.max = function() {
        var t = new dt(0);
        return this.each(function(e) {
          e = e.abs();
          e.gt(t) && (t = e);
        }), t;
      }, ct.Matrix.cMatrix = function(n2, e) {
        var r = new ct.Matrix();
        return e.forEach(function(e2, t) {
          r.set(t, 0, pt.parse(n2));
        }), r;
      };
      var Bt = ct.Utils.all_functions = function(e) {
        for (var t = 0, n2 = e.length; t < n2; t++) if (e[t].group !== gt) return false;
        return true;
      }, l = ct.Utils.cosAsinBtranform = function(e, t) {
        e = e.args[0], t = t.args[0];
        return pt.parse(yt("(sin(({0})+({1}))-sin(({0})-({1})))/2", e, t));
      }, c = ct.Utils.cosAsinAtranform = function(e, t) {
        if (1 !== Number(t.power)) return pt.multiply(e, t);
        e = e.args[0];
        return pt.parse(yt("(sin(2*({0})))/2", e));
      }, p = ct.Utils.cosAsinBtranform = function(e, t) {
        e = e.args[0], t = t.args[0];
        return pt.parse(yt("(cos(({0})+({1}))-cos(({0})-({1})))/2", e, t));
      }, Gt = ct.Utils.trigTransform = function(e) {
        for (var t, n2, r, i, s = {}, o = new dt(1), a = 0, u = e.length; a < u; a++) (r = e[a]).group === gt ? (n2 = r.fname) === Lt && s.sin ? (t = (s.sin.args[0].toString() !== r.args[0].toString() ? l : c)(r, s.sin), delete s.sin, o = pt.multiply(o, t)) : n2 === Ct && s.cos ? (t = (s.cos.args[0].toString() !== r.args[0].toString() ? l : c)(r, s.cos), delete s.cos, o = pt.multiply(o, t)) : n2 === Ct && s.sin ? (t = s.sin.args[0].toString() !== r.args[0].toString() ? p(r, s.sin) : pt.multiply(r, s.sin), delete s.sin, o = t) : s[n2] = r : o = pt.multiply(o, r);
        for (i in s) o = pt.multiply(o, s[i]);
        return o;
      };
      ct.Settings.integration_depth = 10, ct.Settings.max_lim_depth = 10;
      var Vt = ct.Calculus = { version: "1.4.6", sum: function(s, o, a, u) {
        if (o.group !== ct.groups.S) throw new ct.exceptions.NerdamerTypeError("Index must be symbol. " + m(o) + " provided");
        var e;
        return o = o.value, ct.Utils.isNumericSymbol(a) && ct.Utils.isNumericSymbol(u) ? (e = u - a < 200 ? "" : "PARSE2NUMBER", a = Number(a), u = Number(u), ct.Utils.block(e, function() {
          for (var e2 = s.text(), t = { "~": true }, n2 = new ct.Symbol(0), r = a; r <= u; r++) {
            t[o] = new dt(r);
            var i = pt.parse(e2, t), n2 = pt.add(n2, i);
          }
          return n2;
        })) : pt.symfunction("sum", arguments);
      }, product: function(i, s, o, a) {
        if (s.group !== ct.groups.S) throw new ct.exceptions.NerdamerTypeError("Index must be symbol. " + m(s) + " provided");
        return s = s.value, ct.Utils.isNumericSymbol(o) && ct.Utils.isNumericSymbol(a) ? ct.Utils.block(a - o < 200 ? "" : "PARSE2NUMBER", function() {
          o = Number(o), a = Number(a.multiplier);
          for (var e = i.text(), t = {}, n2 = new ct.Symbol(1), r = o; r <= a; r++) t[s] = new dt(r), n2 = pt.multiply(n2, pt.parse(e, t));
          return n2;
        }) : pt.symfunction("product", arguments);
      }, diff: function(e, l2, r) {
        if (ct.Utils.isVector(e)) {
          var t = new ct.Vector([]);
          return e.each(function(e2) {
            t.elements.push(Vt.diff(e2, l2, r));
          }), t;
        }
        if (ct.Utils.isMatrix(e)) {
          var i = new ct.Matrix();
          return e.each(function(e2, t2, n3) {
            i.set(t2, n3, Vt.diff(e2, l2, r));
          }), i;
        }
        var n2, s, c2 = mt(l2) ? l2.text() : l2;
        return r = mt(r) ? r.multiplier : r || 1, void 0 === c2 && (c2 = ct.Utils.variables(e)[0]), e.group === gt && e.fname === At && (s = e.args[0], n2 = e.power.clone(), s.group === g && s.group === d || (s.power = mt(s.power) ? pt.multiply(s.power, pt.multiply(new dt(0.5)), n2) : s.power.multiply(new ft(0.5)).multiply(n2), s.multiplier = s.multiplier.multiply(e.multiplier)), e = s), e = e.group !== gt || mt(e.power) ? f(e) : (n2 = f(pt.parse(e)), s = Vt.diff(e.args[0].clone(), c2), pt.multiply(n2, s)), e = 1 < r ? Vt.diff(e, l2, --r) : e;
        function p2(e2) {
          return e2.value !== c2 && !e2.contains(c2, true) || (e2.multiplier = e2.multiplier.multiply(e2.power), e2.power = e2.power.subtract(new ft(1)), e2.power.equals(0) && (e2 = dt(e2.multiplier))), e2;
        }
        function f(e2) {
          var t2 = e2.group;
          if (t2 === g || t2 === St && e2.value !== c2 || t2 === d) e2 = dt(0);
          else if (t2 === St) e2 = p2(e2);
          else {
            if (t2 === Et) {
              var n3 = e2.multiplier.clone();
              e2.toUnitMultiplier();
              var r2 = pt.multiply(function(e3) {
                for (var t3 = e3.collectSymbols(), n4 = new dt(0), r3 = t3.length, i3 = 0; i3 < r3; i3++) {
                  for (var s3 = Vt.diff(t3[i3].clone(), c2), o2 = 0; o2 < r3; o2++) i3 !== o2 && (s3 = pt.multiply(s3, t3[o2].clone()));
                  n4 = pt.add(n4, s3);
                }
                return n4;
              }(e2), p2(e2));
              return r2.multiplier = r2.multiplier.multiply(n3), r2;
            }
            if (t2 === gt && e2.power.equals(1)) switch (e2.fname) {
              case xt:
                s2 = e2.clone(), (e2 = e2.args[0].clone()).power = e2.power.negate(), e2.multiplier = s2.multiplier.divide(e2.multiplier);
                break;
              case Lt:
                e2.fname = Ct, e2.multiplier.negate();
                break;
              case Ct:
                e2.fname = Lt;
                break;
              case It:
                e2.fname = Ut, e2.power = new ft(2);
                break;
              case Ut:
                e2 = h(e2, It);
                break;
              case _t:
                e2 = h(e2, "-cot");
                break;
              case Ot:
                e2.fname = _t, e2.multiplier.negate(), e2.power = new ft(2);
                break;
              case Rt:
                e2 = pt.parse("(sqrt(1-(" + m(e2.args[0]) + ")^2))^(-1)");
                break;
              case "acos":
                e2 = pt.parse("-(sqrt(1-(" + m(e2.args[0]) + ")^2))^(-1)");
                break;
              case Tt:
                e2 = pt.parse("(1+(" + m(e2.args[0]) + ")^2)^(-1)");
                break;
              case "abs":
                n3 = e2.multiplier.clone(), e2.toUnitMultiplier(), (o = e2.args[0].clone()).toUnitMultiplier(), (e2 = pt.parse(vt(m(e2.args[0])) + "/abs" + vt(m(o)))).multiplier = n3;
                break;
              case "parens":
                e2 = dt(1);
                break;
              case "cosh":
                e2.fname = "sinh";
                break;
              case "sinh":
                e2.fname = "cosh";
                break;
              case Dt:
                e2.fname = "sech", e2.power = new ft(2);
                break;
              case "sech":
                e2 = h(e2, "-tanh");
                break;
              case "csch":
                var i2 = String(e2.args[0]);
                return pt.parse("-coth(" + i2 + ")*csch(" + i2 + ")");
              case "coth":
                i2 = String(e2.args[0]);
                return pt.parse("-csch(" + i2 + ")^2");
              case "asinh":
                e2 = pt.parse("(sqrt(1+(" + m(e2.args[0]) + ")^2))^(-1)");
                break;
              case "acosh":
                e2 = pt.parse("(sqrt(-1+(" + m(e2.args[0]) + ")^2))^(-1)");
                break;
              case "atanh":
                e2 = pt.parse("(1-(" + m(e2.args[0]) + ")^2)^(-1)");
                break;
              case "asech":
                i2 = String(e2.args[0]);
                e2 = pt.parse("-1/(sqrt(1/(" + i2 + ")^2-1)*(" + i2 + ")^2)");
                break;
              case "acoth":
                e2 = pt.parse("-1/((" + e2.args[0] + ")^2-1)");
                break;
              case "acsch":
                i2 = String(e2.args[0]);
                e2 = pt.parse("-1/(sqrt(1/(" + i2 + ")^2+1)*(" + i2 + ")^2)");
                break;
              case "asec":
                i2 = String(e2.args[0]);
                e2 = pt.parse("1/(sqrt(1-1/(" + i2 + ")^2)*(" + i2 + ")^2)");
                break;
              case "acsc":
                i2 = String(e2.args[0]);
                e2 = pt.parse("-1/(sqrt(1-1/(" + i2 + ")^2)*(" + i2 + ")^2)");
                break;
              case "acot":
                e2 = pt.parse("-1/((" + e2.args[0] + ")^2+1)");
                break;
              case "S":
                i2 = String(e2.args[0]);
                e2 = pt.parse("sin((pi*(" + i2 + ")^2)/2)");
                break;
              case "C":
                i2 = String(e2.args[0]);
                e2 = pt.parse("cos((pi*(" + i2 + ")^2)/2)");
                break;
              case "Si":
                i2 = e2.args[0];
                e2 = pt.parse("sin(" + i2 + ")/(" + i2 + ")");
                break;
              case "Shi":
                i2 = e2.args[0];
                e2 = pt.parse("sinh(" + i2 + ")/(" + i2 + ")");
                break;
              case "Ci":
                i2 = e2.args[0];
                e2 = pt.parse("cos(" + i2 + ")/(" + i2 + ")");
                break;
              case "Chi":
                i2 = e2.args[0];
                e2 = pt.parse("cosh(" + i2 + ")/(" + i2 + ")");
                break;
              case "Ei":
                i2 = e2.args[0];
                e2 = pt.parse("e^(" + i2 + ")/(" + i2 + ")");
                break;
              case "Li":
                i2 = e2.args[0];
                e2 = pt.parse("1/" + ht.LOG + "(" + i2 + ")");
                break;
              case "erf":
                e2 = pt.parse("(2*e^(-(" + e2.args[0] + ")^2))/sqrt(pi)");
                break;
              case "atan2":
                var s2 = String(e2.args[0]), i2 = String(e2.args[1]);
                e2 = pt.parse("(" + i2 + ")/((" + i2 + ")^2+(" + s2 + ")^2)");
                break;
              case "sign":
                e2 = new dt(0);
                break;
              case "sinc":
                e2 = pt.parse(yt("(({0})*cos({0})-sin({0}))*({0})^(-2)", e2.args[0]));
                break;
              case ht.LOG10:
                e2 = pt.parse("1/((" + e2.args[0] + ")*" + ht.LOG + "(10))");
                break;
              default:
                e2 = pt.symfunction("diff", [e2, l2]);
            }
            else if (t2 === qt || t2 === gt && mt(e2.power)) {
              var r2 = t2 === qt ? e2.value : t2 === gt && e2.contains(c2) ? e2.fname + vt(m(e2.args[0])) : e2.value + vt(m(e2.args[0])), o = (pt.multiply(pt.parse(xt + vt(r2)), e2.power.clone()), Vt.diff(pt.multiply(pt.parse(xt + vt(r2)), e2.power.clone()), c2));
              e2 = pt.multiply(e2, o);
            } else if (t2 !== gt || e2.power.equals(1)) {
              if (t2 === Nt || t2 === Mt) {
                var a, t2 = e2.clone(), u = new dt(0);
                for (a in e2.symbols) u = pt.add(u, Vt.diff(e2.symbols[a].clone(), c2));
                e2 = pt.multiply(p2(t2), u);
              }
            } else (o = e2.clone()).toLinear(), o.toUnitMultiplier(), e2 = pt.multiply(p2(e2.clone()), f(o));
          }
          return e2.updateHash(), e2;
        }
        function h(e2, t2, n3) {
          return pt.multiply(e2, pt.parse(t2 + vt(n3 || m(e2.args[0]))));
        }
      }, integration: { u_substitution: function(e, i) {
        function t(e2, t2, n3) {
          var r2 = Vt.diff(t2, i), r2 = n3 ? n3(e2, t2) : pt.divide(e2.clone(), r2);
          return r2.contains(i, true) ? null : r2;
        }
        function n2(e2, t2) {
          e2 = Vt.integrate(pt.symfunction(e2, [new dt(u)]), u, 0);
          return (e2 = e2.sub(new dt(u), t2)).updateHash(), e2;
        }
        var r, s = e[0].clone(), o = e[1].clone(), a = s.group, e = o.group, u = "__u__";
        if (a === gt && e !== gt) return (r = t(o, (c2 = s.args[0]).clone())) ? pt.multiply(r, n2(s.fname, c2)) : (r = t(o, s)) ? Vt.integration.poly_integrate(s) : void 0;
        if (e === gt && a !== gt) {
          if (r = t(s, (c2 = o.args[0]).clone())) return pt.multiply(r, n2(o.fname, c2));
        } else {
          if (a === gt && e === gt) return (r = t(s.clone(), o.clone())) || (r = t(o.clone(), s.clone())) ? pt.multiply(Vt.integration.poly_integrate(o), r) : void 0;
          if (a === qt && e !== qt) {
            if (!(r = t(o, (p2 = s.power).clone()))) {
              var l2 = Vt.integration.decompose_arg(p2.clone(), i), c2 = Vt.diff(l2[2].clone(), i), c2 = Vt.integration.decompose_arg(c2.clone(), i);
              if (pt.multiply(l2[1], c2[1]).power.equals(o.power)) {
                c2 = pt.divide(l2[0].clone(), c2[0].clone()), c2 = pt.multiply(c2.clone(), pt.pow(new dt(s.value), pt.multiply(l2[0], new dt(u)))), c2 = pt.multiply(c2, new dt(u));
                return Vt.integration.by_parts(c2, u, 0, {}).sub(u, l2[1].clone());
              }
            }
            l2 = Vt.integrate(s.sub(p2.clone(), new dt(u)), u, 0);
            return pt.multiply(l2.sub(new dt(u), p2), r);
          }
          if (e === qt && a !== qt) {
            r = t(s, (p2 = o.power).clone());
            l2 = Vt.integrate(o.sub(p2, new dt(u)), u, 0);
            return pt.multiply(l2.sub(new dt(u), p2), r);
          }
          if (s.isComposite() || o.isComposite()) {
            var a = function(e2, t2) {
              t2 = Vt.diff(t2, i), e2 = ct.Algebra.Factor.factor(e2), t2 = ct.Algebra.Factor.factor(t2);
              return pt.divide(e2, t2);
            }, l2 = s.isComposite() ? s.clone().toLinear() : s.clone(), p2 = o.isComposite() ? o.clone().toLinear() : o.clone();
            return (r = t(l2.clone(), p2.clone(), a)) ? pt.multiply(Vt.integration.poly_integrate(o), r) : (r = t(p2.clone(), l2.clone(), a)) ? pt.multiply(Vt.integration.poly_integrate(s), r) : void 0;
          }
        }
      }, poly_integrate: function(e) {
        var t = e.power.toString(), n2 = e.multiplier.toDecimal(), e = e.toUnitMultiplier().toLinear();
        return -1 === Number(t) ? pt.multiply(new dt(n2), pt.symfunction(xt, [e])) : pt.parse(yt("({0})*({1})^(({2})+1)/(({2})+1)", n2, e, t));
      }, stop: function(e) {
        throw ct.Utils.warn(e = e || "Unable to compute integral!"), new Ft(e);
      }, partial_fraction: function(e, t, n2, r) {
        var i;
        return mt(t) || (t = pt.parse(t)), i = new dt(0), (e = ct.Algebra.PartFrac.partfrac(e, t)).group === Et && e.isLinear() ? (e.each(function(e2) {
          e2.isLinear() || Vt.integration.stop();
        }), e.each(function(e2) {
          i = pt.add(i, Vt.integrate(e2, t, n2, r));
        })) : i = pt.add(i, Vt.integrate(e, t, n2, r)), i;
      }, get_udv: function(e) {
        function t(e2) {
          var t2, n3 = e2.group;
          n3 === gt ? (t2 = e2.fname, ct.Utils.in_trig(t2) || ct.Utils.in_htrig(t2) ? r[3].push(e2) : ct.Utils.in_inverse_trig(t2) ? r[1].push(e2) : t2 === xt ? r[0].push(e2) : Vt.integration.stop()) : n3 === St || e2.isComposite() && e2.isLinear() || n3 === Et && e2.isLinear() ? r[2].push(e2) : n3 === qt || e2.isComposite() && !e2.isLinear() ? r[4].push(e2) : Vt.integration.stop();
        }
        var r = [[], [], [], [], []];
        e.group === Et ? e.each(function(e2) {
          t(dt.unwrapSQRT(e2, true));
        }) : t(e);
        for (var n2, i = new dt(1), s = 0; s < 5; s++) {
          var o = r[s], a = o.length;
          if (0 < a) {
            if (1 < a) for (var u = new dt(1), l2 = 0; l2 < a; l2++) u = pt.multiply(u, o[l2].clone());
            else u = o[0].clone();
            n2 ? i = pt.multiply(i, u) : (n2 = u).multiplier = n2.multiplier.multiply(e.multiplier);
          }
        }
        return [n2, i];
      }, trig_sub: function(e, t, n2, r, i, s) {
        (i = i || Vt.integration.decompose_arg(e.clone().toLinear(), t))[3], i[2];
        var o = i[0], a = i[1];
        if (a.power.equals(2) && o.greaterThan(0)) {
          t = ct.Utils.getU(e), i = pt.parse(It + vt(t)), o = pt.parse(Ut + vt(t) + "^2"), o = pt.multiply(e.sub(a, i), o), a = Vt.integrate(o, t, n2, r).sub(i, a);
          return ct.Utils.clearU(i), a;
        }
      }, by_parts: function(e, t, n2, r) {
        var i, s, o, a, u, l2;
        return r.previous = r.previous || [], o = (s = Vt.integration.get_udv(e))[0], i = s[1], u = (a = dt.unwrapSQRT(pt.expand(Vt.diff(o.clone(), t)), true)).clone().stripVar(t), a = pt.divide(a, u.clone()), e = Vt.integrate(i.clone(), t, n2 || 0), a = (s = pt.multiply(e.clone(), a)).toString(), -1 !== r.previous.indexOf(a) && ct.Utils.in_trig(o.fname) && i.isE() ? (r.is_cyclic = true, new dt(1)) : (r.previous.push(a), o = pt.multiply(o, e), e = s.multiplier.clone(), s.toUnitMultiplier(), (u = pt.multiply(Vt.integrate(s.clone(), t, n2, r), u)).multiplier = u.multiplier.multiply(e), u = pt.subtract(o, u), r.is_cyclic && (r.previous.pop(), 0 === r.previous.length && (u = pt.expand(u), l2 = new dt(0), u.each(function(e2) {
          e2.contains(t) || (l2 = pt.add(l2, e2.clone()));
        }), u = pt.divide(pt.subtract(u, l2.clone()), pt.subtract(new dt(1), l2)))), u);
      }, decompose_arg: ct.Utils.decompose_fn }, integrate: function(ot, at, ut, lt) {
        var e;
        if (at || (e = ct.Utils.variables(ot), at = (at = 1 === e.length ? e[0] : at) || "x"), ct.Utils.isVector(ot)) {
          var t = new ct.Vector([]);
          return ot.each(function(e2) {
            t.elements.push(Vt.integrate(e2, at));
          }), t;
        }
        return isNaN(at) || pt.error("variable expected but received " + at), ot.isConstant(true) ? pt.multiply(ot.clone(), pt.parse(at)) : (lt = lt || {}, ct.Utils.block("PARSE2NUMBER", function() {
          ut = ut || 0;
          var t2, n2 = mt(at) ? at.toString() : at, e2 = (ce = dt.unwrapSQRT(ot.clone(), true)).group;
          try {
            if (++ut > ct.Settings.integration_depth && Vt.integration.stop("Maximum depth reached. Exiting!"), ce.contains(n2, true)) {
              if (e2 === St) t2 = Vt.integration.poly_integrate(ce, n2, ut);
              else if (e2 === qt) if (ce.previousGroup === gt && "sqrt" !== ce.fname && ce.fname !== ht.PARENTHESIS && Vt.integration.stop(), ce.contains(n2) && ce.previousGroup !== gt) ce.power.contains(n2) ? Vt.integration.stop() : ((We = Vt.diff(ce.clone().toLinear(), n2)).contains(n2) && Vt.integration.stop(), t2 = Vt.integration.poly_integrate(ce, n2, ut));
              else {
                if ((f = Vt.diff(ce.power.clone(), n2)).contains(n2)) {
                  var r = f.stripVar(n2);
                  if ((h = pt.divide(f.clone(), r.clone())).group === St && h.isLinear()) return r.multiplier = r.multiplier.divide(new ft(2)), pt.parse(yt("({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))", r, n2, ce.multiplier));
                  Vt.integration.stop();
                }
                ce.isE() ? f.isLinear() ? t2 = ce : f.isE() && f.power.group === St && f.power.power.equals(1) ? t2 = pt.multiply(pt.symfunction("Ei", [ce.power.clone()]), ce.power) : Vt.integration.stop() : (g2 = pt.symfunction(xt, [pt.parse(ce.value)]), t2 = pt.divide(ce, g2)), t2 = pt.divide(t2, f);
              }
              else if (ce.isComposite() && ce.isLinear()) {
                var i = pt.parse(ce.multiplier);
                ce.toUnitMultiplier(), t2 = new dt(0), ce.each(function(e3) {
                  t2 = pt.add(t2, Vt.integrate(e3, n2, ut));
                }), t2 = pt.multiply(i, t2);
              } else if (e2 === Nt) if ((ce = ce.power.greaterThan(1) ? pt.expand(ce) : ce).power.equals(1)) t2 = new dt(0), ce.each(function(e3) {
                t2 = pt.add(t2, Vt.integrate(e3, n2, ut));
              }, true);
              else {
                var s = Number(ce.power), i = ce.multiplier.clone();
                ce.toUnitMultiplier();
                var o, a, u, l2 = ce.clone().toLinear(), c2 = (Ve = Vt.integration.decompose_arg(l2, n2))[3], p2 = Ve[2], f = Ve[0], h = Ve[1];
                if (-1 === s && h.group !== Mt && h.power.equals(2)) {
                  var m2, g2, d2, v, w, y, b, S, M, N, E, q = !wt(c2) || 0 < c2;
                  t2 = h.group === St && h.power.equals(2) && q ? (m2 = function(e3) {
                    var t3 = new dt(1);
                    return e3.each(function(e4) {
                      t3 = pt.multiply(t3, "abs" === e4.fname ? e4.args[0] : e4);
                    }), t3;
                  }, d2 = f.clone(), v = c2.clone(), d2 = pt.pow(d2, new dt(0.5)), v = pt.pow(v, new dt(0.5)), g2 = pt.multiply(m2(v), m2(d2)), R = pt.symfunction(Tt, [pt.divide(pt.multiply(f, h.toLinear()), g2.clone())]), pt.divide(R, g2)) : h.group === St && h.isLinear() ? pt.divide(Vt.integration.poly_integrate(ce), f) : h.power.equals(4) ? (E = vt, d2 = pt.parse(At + E(f) + "*" + n2 + "^2"), v = pt.parse(At + E(2) + "*" + E(f) + "^" + E("1/4") + "*" + E(c2) + "^" + E("1/4") + "*" + n2), w = pt.parse(At + E(c2)), P = pt.add(pt.add(d2.clone(), v.clone()), w.clone()), X = pt.add(pt.subtract(d2, v), w), y = pt.parse(At + E(2) + "*" + E(c2) + "^" + E("3/4")), b = pt.parse(At + E(c2) + "*" + E(c2) + "^" + E("1/4") + "*" + n2), S = pt.parse("2*" + E(c2) + "*" + At + E(2) + "*" + E(c2) + "^" + E("1/4")), M = pt.divide(pt.subtract(y.clone(), b.clone()), pt.multiply(S.clone(), X)), N = pt.divide(pt.add(y, b), pt.multiply(S, P.clone())), pt.add(Vt.integrate(M, n2, ut, lt), Vt.integrate(N, n2, ut, lt))) : Vt.integration.partial_fraction(ce, n2, ut);
                } else if (-0.5 === s) h.group === St && h.power.equals(2) && p2.multiplier.lessThan(0) && !c2.multiplier.lessThan(0) ? (f.negate(), t2 = c2.isConstant() && f.isConstant() ? (g2 = pt.symfunction(At, [f.clone()]), o = pt.symfunction(At, [pt.multiply(f.clone(), c2)]), pt.divide(pt.symfunction(Rt, [pt.divide(p2.toLinear(), o)]), g2)) : (a = pt.symfunction(At, [f]), u = pt.multiply(a.clone(), h.clone().toLinear()), pt.divide(pt.symfunction(Tt, [pt.divide(u, pt.symfunction(At, [l2.clone()]))]), a))) : Vt.integration.stop();
                else if (0.5 === s && h.power.equals(2) && f.greaterThan(0)) Vt.integration.stop();
                else if (h.isLinear() && h.group !== Mt) t2 = pt.divide(Vt.integration.poly_integrate(ce), f);
                else {
                  if (h.power.equals(2) && f.greaterThan(0)) {
                    var x = pt.parse(At + vt(f)), A = pt.parse(At + vt(c2)), C = pt.multiply(x.clone(), A.clone()).invert(), L = pt.pow(c2, new dt(ce.power)), I = ct.Utils.getU(ce);
                    Ze = pt.multiply(C, h.clone().toLinear());
                    var U = pt.parse(Tt + vt(Ze)), _ = 2 * (Math.abs(ce.power) - 1), O = Vt.integrate(pt.parse(Lt + vt(I) + "^" + _));
                    return ct.Utils.clearU(I), pt.multiply(O.sub(I, U), L);
                  }
                  if (ce.group === Et || ce.power.lessThan(0)) {
                    var R = ce.clone().toLinear(), T = ct.Algebra.Factor.factor(R).toString() !== R.toString();
                    if (ct.Algebra.degree(R, pt.parse(n2)).equals(2) && !T) try {
                      var P, k2, D = ct.Algebra.sqComplete(R, n2);
                      Ze = ct.Utils.getU(R), P = D.f.sub(D.a, Ze), k2 = pt.pow(P, pt.parse(ce.power)), t2 = Vt.integrate(k2, Ze).sub(Ze, D.a);
                    } catch (e3) {
                      Vt.integration.stop();
                    }
                    else t2 = Vt.integration.partial_fraction(ce, n2, ut, lt);
                  } else t2 = Vt.integration.by_parts(ce, n2, ut, lt);
                }
                t2.multiplier = t2.multiplier.multiply(i);
              }
              else if (e2 === gt) {
                var F = ce.args[0], i = ce.multiplier.clone();
                ce.toUnitMultiplier();
                var B, G, V, H, j, X, $, Z, z, f = (Ve = Vt.integration.decompose_arg(F, n2))[0], h = Ve[1], Q = ce.fname;
                if (Q === xt || Q === Rt || "acos" === Q || Q === Tt && h.isLinear()) {
                  var Y, s = ce.power.toString();
                  wt(s) && (ut -= s), t2 = F.isComposite() ? (Ze = ct.Utils.getU(ce), R = pt.pow(pt.parse(xt + vt(Ze)), new dt(s)), Ce = Vt.diff(F, n2), Y = pt.multiply(R, Ce), O = Vt.integrate(Y, Ze, ut, lt), pt.multiply(pt.parse(i), O.sub(Ze, F))) : pt.multiply(pt.parse(i), Vt.integration.by_parts(ce, n2, ut, lt));
                } else {
                  if (Q === It && ce.power.lessThan(0)) return (Je = ce.clone()).power.negate(), Je.fname = Ot, pt.multiply(pt.parse(i), Vt.integrate(Je, n2, ut));
                  if (!f.contains(n2, true) && ce.isLinear()) if ("abs" === Q) (h = pt.divide(F.clone(), f.clone())).group !== St || h.power.lessThan(0) ? Vt.integration.stop() : t2 = ct.Utils.even(h.power) ? Vt.integrate(F, n2, ut) : ((z = Vt.integrate(h, n2, ut)).power = z.power.subtract(new ft(1)), pt.multiply(pt.multiply(pt.symfunction("abs", [h.toLinear()]), z), f));
                  else {
                    var W = ce.args[0].group, J = Vt.integration.decompose_arg(F, n2);
                    switch ((W !== Nt && W !== St && W !== Et || !J[1].power.equals(1) || F.hasFunc()) && Vt.integration.stop(), Q) {
                      case Lt:
                        t2 = pt.symfunction(Ct, [F]);
                        break;
                      case Ct:
                        (t2 = pt.symfunction(Lt, [F])).negate();
                        break;
                      case It:
                        t2 = pt.parse(yt(ht.LOG + "(sec({0}))", F));
                        break;
                      case Ut:
                        t2 = pt.parse(yt(ht.LOG + "(tan({0})+sec({0}))", F));
                        break;
                      case _t:
                        t2 = pt.parse(yt("-" + ht.LOG + "(csc({0})+cot({0}))", F));
                        break;
                      case Ot:
                        t2 = pt.parse(yt(ht.LOG + "(sin({0}))", F));
                        break;
                      case Pt:
                        t2 = pt.symfunction(kt, [F]);
                        break;
                      case kt:
                        t2 = pt.symfunction(Pt, [F]);
                        break;
                      case Dt:
                        t2 = pt.parse(yt(ht.LOG + "(cosh({0}))", F));
                        break;
                      case "asec":
                      case "acsc":
                      case "acot":
                      case "asech":
                      case "acsch":
                      case "acoth":
                        t2 = Vt.integration.by_parts(ce, n2, ut, lt);
                        break;
                      case "sech":
                        t2 = pt.parse(yt("atan(sinh({0}))", F));
                        break;
                      case "csch":
                        t2 = pt.parse(yt(ht.LOG + "(tanh(({0})/2))", F));
                        break;
                      case "coth":
                        t2 = pt.parse(yt(ht.LOG + "(sinh({0}))", F));
                        break;
                      case "exp":
                        t2 = Vt.integrate(pt.parse(yt("e^({0})", F)), n2, ut);
                        break;
                      case "S":
                        var F = ce.args[0].clone(), K = (Se = Vt.integration.decompose_arg(F, n2))[1], ee = Se[0], te = Se[3];
                        t2 = pt.parse(yt("(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)", ee, te, h));
                        break;
                      case "C":
                        F = ce.args[0].clone(), K = (Se = Vt.integration.decompose_arg(F, n2))[1], ee = Se[0], te = Se[3];
                        t2 = pt.parse(yt("(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)", ee, te, K));
                        break;
                      case "erf":
                        F = ce.args[0].clone(), K = (Se = Vt.integration.decompose_arg(F, n2))[1], ee = Se[0];
                        t2 = pt.parse(yt("e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))", ee, K, F));
                        break;
                      case "sign":
                        t2 = pt.multiply(ce.clone(), F.clone());
                        break;
                      default:
                        Vt.integration.stop();
                    }
                    t2 = pt.divide(t2, f);
                  }
                  else h.isLinear() ? Q === Lt || Q === Ct ? (s = Number(ce.power), t2 = s < 0 ? (ce.fname = Q === Ct ? _t : Ut, ce.invert().updateHash(), Vt.integrate(ce, n2, ut)) : (F = ce.args[0], B = ce.clone(), G = ce.clone(), Ie = new dt((s - 1) / s), V = pt.multiply(f.clone(), new dt(s)).invert(), B.power = B.power.subtract(new ft(1)), G.power = G.power.subtract(new ft(2)), We = pt.symfunction(Q === Lt ? Ct : Lt, [F.clone()]), Q === Ct && We.negate(), pt.add(pt.multiply(pt.multiply(V, B), We), pt.multiply(Ie, Vt.integrate(pt.parse(G), n2, ut))))) : Q === It || Q === Ot ? ce.args[0].isLinear(n2) && (_ = ce.power.subtract(new ft(1)).toString(), nt = ce.clone().toUnitMultiplier(), Z = pt.parse(yt((Q === Ot ? "-" : "") + "1/({2}*{0})*{3}({1})^({0})", _, F, f, Q)), nt.power = nt.power.subtract(new ft(2)), nt.power.equals(0) && (nt = pt.parse(nt)), t2 = pt.subtract(Z, Vt.integrate(nt, n2, ut))) : Q === Ut || Q === _t ? (H = ce.power.subtract(new ft(1)).toString(), j = ce.power.subtract(new ft(2)).toString(), X = Q === Ut ? It : Ot, nt = ce.clone().toUnitMultiplier(), $ = yt((Q === _t ? "-" : "") + "1/({0}*{1})*{4}({3})^({2})*{5}({3})", f, H, j, F, Q, X), Z = pt.parse($), nt.power = nt.power.subtract(new ft(2)), nt.power.equals(0) && (nt = pt.parse(nt)), t2 = pt.add(Z, pt.multiply(new dt(j / H), Vt.integrate(nt, n2, ut)))) : Q !== kt && Q !== Pt || !ce.power.equals(2) ? Vt.integration.stop() : t2 = Vt.integrate(ce.fnTransform(), n2, ut) : Vt.integration.stop();
                  t2.multiplier = t2.multiplier.multiply(i);
                }
              } else if (e2 === Mt) t2 = Vt.integration.partial_fraction(ce, n2, ut);
              else if (e2 === Et) {
                var ne = (ce = ce.getDenom().group === St ? pt.expand(ce) : ce).stripVar(n2), re = pt.divide(ce.clone(), ne.clone());
                if (ne.contains(n2) && (re = pt.multiply(re, ne), ne = new dt(1)), re.group !== Et) {
                  if (re.equals(1)) return Vt.integrate(pt.expand(ce), n2, ut);
                  re.clone().toLinear().isPoly(true) && 1 < ct.Utils.variables(re).length && (re = ct.Algebra.Factor.factor(re)), t2 = Vt.integrate(re, n2, ut);
                } else {
                  var ie = re.collectSymbols().sort(function(e3, t3) {
                    return e3.group === t3.group ? Number(e3.power) === Number(t3.power) ? e3 < t3 ? 1 : -1 : t3.power - e3.power : t3.group - e3.group;
                  }).map(function(e3) {
                    e3 = dt.unwrapSQRT(e3, true);
                    return "exp" === e3.fname ? pt.parse(yt("({1})*e^({0})", e3.args[0], e3.multiplier)) : e3;
                  }), se = ie.length;
                  if (ce.power < 0) {
                    if (2 === se) return Vt.integrate(pt.expand(ce), n2, ut, lt);
                  } else if (2 === se) {
                    try {
                      t2 = Vt.integration.u_substitution(ie, n2);
                    } catch (e3) {
                    }
                    if (!t2) {
                      var oe, ae, ue, le, ce, pe, fe, he, me, ge, de, ve, we, ye, be, Se, Me, Ne, Ee, qe, xe, Ae, Ce, Le, Ie, Ue, _e, Oe, Re, Te, Pe = ie[0].group, ke = ie[1].group, De = ie[0], Fe = ie[1], Be = De.fname, Ge = Fe.fname;
                      if (ce = pt.multiply(De.clone(), Fe.clone()), Pe === gt && ke === gt) if (Be === xt || Ge === xt) t2 = Vt.integration.by_parts(ce.clone(), n2, ut, lt);
                      else {
                        ie.sort(function(e3, t3) {
                          return t3.fname > e3.fname;
                        });
                        var Ve, He = De.args[0];
                        He.isLinear() && (He.group === Nt || He.group === Et || He.group === St) || Vt.integration.stop(), h = (Ve = Vt.integration.decompose_arg(He, n2))[1], f = Ve[0], h.isLinear() || Vt.integration.stop();
                        var je, Xe = Fe.args[0];
                        if (He.equals(Xe)) if (Be === Ct && Ge === Lt || Be === Lt && Ge === Ct) if (De.power.lessThan(0) && Vt.integration.stop(), Be === Ct && De.power.add(Fe.power).equals(0)) De.fname = It, De.updateHash(), t2 = Vt.integrate(De, n2, ut);
                        else if (bt(De.power) && Ge === Lt && Fe.power.lessThan(0)) {
                          var _ = Number(De.power) / 2, $e = pt.parse(yt("(1-cos({0})^2)^({1})", De.args[0], _));
                          t2 = Vt.integrate(pt.expand(pt.multiply($e, Fe.clone())), n2, ut, lt);
                        } else if (bt(De.power) && Ge === Ct && Fe.power.lessThan(0)) {
                          _ = Number(De.power) / 2, $e = pt.parse(yt("(1-sin({0})^2)^({1})", De.args[0], _));
                          t2 = Vt.integrate(pt.expand(pt.multiply($e, Fe.clone())), n2, ut, lt);
                        } else {
                          var Ze, ze = ct.Utils.even(De.power), Qe = ct.Utils.even(Fe.power);
                          if (t2 = new dt(0), ze && Qe) {
                            var Ye = function(e3) {
                              var t3 = e3.power / 2, t3 = e3.fname === Lt ? "((1/2)+(cos(2*(" + e3.args[0] + "))/2))^" + t3 : "((1/2)-(cos(2*(" + e3.args[0] + "))/2))^" + t3;
                              return pt.parse(t3);
                            }, f = Ye(De), c2 = Ye(Fe), We = pt.multiply(f, c2);
                            return (Je = pt.expand(We)).each(function(e3) {
                              t2 = pt.add(t2, Vt.integrate(e3, n2, ut));
                            }), pt.multiply(t2, ne);
                          }
                          nt = ze ? (Ze = De, Fe) : (Ze = Fe, De);
                          var Je, Ke = Ze.fname === Lt ? -1 : 1, et = ((_ = nt.power) - 1) / 2, tt = pt.parse("(1-" + Ze.fname + ct.Utils.inBrackets(He) + "^2)^" + et);
                          (Je = pt.expand(pt.multiply(new dt(Ke), pt.multiply(Ze.clone(), tt)))).each(function(e3) {
                            t2 = pt.add(t2, Vt.integration.poly_integrate(e3.clone()));
                          });
                        }
                        else Be === Ut && Ge === It && h.isLinear() && Fe.isLinear() ? t2 = pt.parse(yt("sec({0})^({1})/({1})", De.args[0], De.power)) : Be === It && Ge === Ut && h.isLinear() ? De.isLinear() && Fe.isLinear() ? t2 = pt.divide(pt.symfunction(Ut, [He.clone()]), f) : bt(De.power) ? (s = Number(De.power) / 2, We = pt.parse(yt("(sec({0})^2-1)^({1})", De.args[0], s)), t2 = Vt.integrate(pt.expand(pt.multiply(We, Fe)), n2, ut)) : Vt.integration.stop() : t2 = Be === Ut && Ge === Lt ? (De.fname = Lt, De.invert().updateHash(), Vt.integrate(pt.multiply(De, Fe), n2, ut)) : Be === Ct && Ge === _t ? (Fe.fname = Ct, Fe.invert().updateHash(), Vt.integrate(pt.multiply(De, Fe), n2, ut)) : (We = Be !== It || Ge !== Lt && Ge !== Ct || !Fe.power.lessThan(0) ? pt.multiply(De.fnTransform(), Fe.fnTransform()) : pt.multiply(De.fnTransform(), Fe), Vt.integrate(pt.expand(We), n2, ut));
                        else Be !== Ct && Be !== Lt || Ge !== Ct && Ge !== Lt ? Vt.integration.stop() : De.isLinear() && Fe.isLinear() ? t2 = De.args[0].isLinear() && Fe.args[0].isLinear() ? (Ge === Ct ? (p2 = De.args[0], je = Fe.args[0]) : (je = De.args[0], p2 = Fe.args[0]), R = pt.parse(yt("(sin(({1})+({0}))+sin(({1})-({0})))/2", p2.toString(), je.toString())), Vt.integrate(R, n2, ut)) : (st = Gt(ie), Vt.integrate(pt.expand(st), n2, ut)) : (st = new dt(1), ie.map(function(e3) {
                          e3 = e3.fnTransform();
                          st = pt.multiply(st, e3);
                        }), We = pt.expand(st), (t2 = Vt.integrate(We, n2, ut)).hasIntegral() && (t2 = Vt.integrate(Gt(st.collectSymbols()), n2, ut)));
                      }
                      else Pe === gt && ke === St ? (oe = De.isLinear(), De.fname === Lt && oe && Fe.power.equals(-1) ? t2 = pt.symfunction("Ci", [De.args[0]]) : De.fname === Lt && Fe.power.equals(-1) ? t2 = Vt.integrate(pt.multiply(De.fnTransform(), Fe.clone()), n2, ut) : De.fname === kt && oe && Fe.power.equals(-1) ? t2 = pt.symfunction("Chi", [De.args[0]]) : De.fname === kt && Fe.power.equals(-1) ? t2 = Vt.integrate(pt.multiply(De.fnTransform(), Fe.clone()), n2, ut) : De.fname === Ct && oe && Fe.power.equals(-1) ? t2 = pt.symfunction("Si", [De.args[0]]) : De.fname === Ct && Fe.power.equals(-1) ? t2 = Vt.integrate(pt.multiply(De.fnTransform(), Fe.clone()), n2, ut) : De.fname === Pt && oe && Fe.power.equals(-1) ? t2 = pt.symfunction("Shi", [De.args[0]]) : De.fname === Pt && Fe.power.equals(-1) ? t2 = Vt.integrate(pt.multiply(De.fnTransform(), Fe.clone()), n2, ut) : De.fname === xt && Fe.power.equals(-1) ? t2 = Vt.integration.poly_integrate(De, n2, ut) : "erf" === De.fname ? Fe.power.equals(1) && (ee = (Se = Vt.integration.decompose_arg(De.args[0], n2))[0], K = Se[1], F = De.args[0].toString(), t2 = pt.parse(yt("(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)", ee, K, F))) : t2 = Vt.integration.by_parts(ce, n2, ut, lt)) : Pe === qt && ke === St ? (h = Be === xt ? Vt.integration.decompose_arg(De.args[0], n2)[1] : null, t2 = De.isE() && (De.power.group === St || De.power.group === Et) && Fe.power.equals(-1) ? pt.symfunction("Ei", [De.power.clone()]) : Be === xt && h.value === Fe.value ? Vt.integration.poly_integrate(De, n2, ut) : Vt.integration.by_parts(ce, n2, ut, lt)) : Pe === Mt && ke === St ? (ce = Fe.value === De.value && De.power.equals(-1) ? (ae = Math.min.apply(null, ct.Utils.keys(De.symbols)), ue = Math.min(ae, Fe.power), (le = Fe.clone()).power = new ft(ue), Fe = pt.divide(Fe, le.clone()), We = new dt(0), De.each(function(e3) {
                        We = pt.add(We, pt.divide(e3.clone(), le.clone()));
                      }), We.multiplier = De.multiplier, pt.divide(Fe, We)) : pt.expand(ce), t2 = Vt.integration.partial_fraction(ce, n2, ut)) : Pe === Nt && ke === St ? (R = De.clone().toLinear(), pe = ct.Algebra.degree(R, pt.parse(n2)).equals(1), De.power.equals(-0.5) ? (f = (Ve = Vt.integration.decompose_arg(De.clone().toLinear(), n2))[0].negate(), h = Ve[1], c2 = Ve[3], xe = Number(De.power), Ae = Number(Fe.power), wt(Ae) && ct.Utils.even(Ae) && h.power.equals(2) ? (Me = pt.divide(pt.multiply(pt.pow(c2.clone(), new dt(2)), pt.symfunction(At, [pt.divide(c2.clone(), f.clone())])), pt.pow(f.clone(), new dt(2))), Me = pt.multiply(Me, pt.symfunction(At, [c2]).invert()), (fe = pt.parse("sin(u)")).power = fe.power.multiply(Fe.power), O = Vt.integrate(fe, "u", ut), he = pt.parse("asin(sqrt(" + f + "/" + c2 + ")*" + n2 + ")"), t2 = pt.multiply(Me, O.sub(new dt("u"), he))) : -0.5 === xe && (me = function(e3, t3) {
                        t3 = pt.parse(Vt.integrate(e3, n2, ut, lt).sub(n2, yt(t3, n2)));
                        if (!t3.hasIntegral()) return t3;
                      }, -1 === Ae ? t2 = me(pt.expand(pt.expand(pt.pow(pt.multiply(De.invert(), Fe.invert()), new dt(2)))).invert(), "sqrt(1-1/({0})^2)") : -2 === Ae && (t2 = me(pt.sqrt(pt.expand(pt.divide(pt.pow(ce, new dt(2)).invert(), pt.pow(new dt(n2), new dt(2))).negate())).invert(), "sqrt(1-1/({0})^2)")))) : De.power.equals(-1) && Fe.isLinear() && pe ? t2 = Vt.integration.partial_fraction(ce, n2, ut) : !De.power.lessThan(0) && wt(De.power) ? (ge = pt.expand(De), t2 = new dt(0), ge.each(function(e3) {
                        e3.group === Mt ? e3.each(function(e4) {
                          t2 = pt.add(t2, Vt.integrate(pt.multiply(Fe.clone(), e4), n2, ut));
                        }) : t2 = pt.add(t2, Vt.integrate(pt.multiply(Fe.clone(), e3), n2, ut));
                      })) : De.power.lessThan(-2) ? t2 = Vt.integration.by_parts(ce, n2, ut, lt) : De.power.lessThan(0) && Fe.power.greaterThan(1) ? (f = (Ve = Vt.integration.decompose_arg(De.clone().toLinear(), n2))[0].negate(), h = Ve[1], c2 = Ve[3], l2 = De.clone().toLinear(), t2 = h.group !== Mt && h.isLinear() ? (s = Number(Fe.power), Ze = new dt(Ce = "_u_"), de = pt.expand(pt.divide(pt.pow(pt.subtract(Ze.clone(), c2.clone()), new dt(s)), Ze.clone())), (ve = {})[Ce] = l2, we = pt.parse(de, ve), Vt.integrate(we, n2, 0)) : Fe.power.greaterThan(h.power) || Fe.power.equals(h.power) ? (ye = new ct.Algebra.Classes.Factors(), De = ct.Algebra.Factor.coeffFactor(De.invert(), ye), (be = ct.Algebra.divide(Fe, De)).group !== Et ? (t2 = new dt(0), be.each(function(e3) {
                        t2 = pt.add(t2, Vt.integrate(e3, n2, ut));
                      }), ye.each(function(e3) {
                        t2 = pt.divide(t2, e3);
                      }), pt.expand(t2)) : Vt.integration.by_parts(ce, n2, ut, lt)) : Vt.integration.partial_fraction(ce, n2, ut)) : De.power.den.equals(2) ? (f = (Se = Vt.integration.decompose_arg(De.clone().toLinear(), n2))[3], h = Se[1], c2 = Se[0], je = Se[2], t2 = h.power.equals(2) && c2.lessThan(0) ? (f.equals(1) || (ne = pt.multiply(ne, pt.pow(f, new dt(2)))), Ze = n2, Me = pt.divide(pt.pow(c2.clone().negate(), new dt(0.5)), pt.pow(f, new dt(0.5))), Ce = pt.symfunction(Lt, [new dt(Ze)]), Ne = pt.pow(pt.symfunction(Lt, [new dt(Ze)]), new dt(De.power.num)), Ee = pt.pow(pt.symfunction(Ct, [new dt(Ze)]), new dt(Fe.power)), qe = pt.multiply(pt.multiply(Ne, Ce), Ee), (O = Vt.integrate(qe, Ze, ut)).sub(Ze, pt.symfunction(Rt, [pt.multiply(new dt(n2), Me)]))) : Vt.integration.partial_fraction(ce, n2, ut, lt)) : pe && (t2 = Vt.integration.partial_fraction(ce, n2, ut))) : De.isComposite() && Fe.isComposite() ? (t2 = new dt(0), De.power.greaterThan(0) && Fe.power.greaterThan(0) ? (Je = pt.expand(ce)).each(function(e3) {
                        t2 = pt.add(t2, Vt.integrate(e3, n2, ut));
                      }, true) : (xe = Number(De.power), Ae = Number(Fe.power), xe < 0 && 0 < Ae && (We = De, De = Fe, Fe = We), -1 === xe && -1 === Ae ? t2 = Vt.integration.partial_fraction(ce, n2) : De.each(function(e3) {
                        e3 = pt.multiply(e3, Fe.clone()), e3 = Vt.integrate(e3, n2, ut);
                        t2 = pt.add(t2, e3);
                      }))) : Pe === Nt && ie[0].power.greaterThan(0) ? (De = pt.expand(De), t2 = new dt(0), De.each(function(e3) {
                        t2 = pt.add(t2, Vt.integrate(pt.multiply(e3, Fe.clone()), n2, ut));
                      }, true)) : Pe === gt && ke === qt && ct.Utils.in_htrig(De.fname) ? (De = De.fnTransform(), t2 = Vt.integrate(pt.expand(pt.multiply(De, Fe)), n2, ut)) : Pe === gt && ke === Nt || ke === gt && Pe === Nt ? (ke === gt && Pe === Nt && (We = De, De = Fe, Fe = We), Ce = dt.unwrapSQRT(Vt.diff(De.clone(), n2), true), Le = dt.unwrapSQRT(Fe, true), Ce.power.equals(Le.power) ? (s = new dt(Fe.power), Ue = Ce.clone().toLinear(), _e = Fe.clone().toLinear(), (Ie = ct.Algebra.divide(Ue.toLinear(), _e)).isConstant() && (Oe = pt.pow(Ie, s.negate()), t2 = pt.multiply(Oe, Vt.integration.poly_integrate(De.clone())))) : t2 = Vt.integration.by_parts(ce, n2, ut, lt)) : (Re = De.clone().toLinear(), Te = Fe.clone().toLinear(), t2 = Pe === qt && ke === qt && De.power.contains(n2) && Fe.power.contains(n2) && !Re.contains(n2) && !Te.contains(n2) ? pt.parse(yt("(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))", Re.toString(), Te.toString(), De.power.multiplier.toString(), Fe.power.multiplier.toString(), n2)) : Vt.integration.by_parts(ce, n2, ut, lt));
                    }
                  } else if (3 === se && (ie[2].group === St && ie[2].power.lessThan(2) || ie[0].group === Nt)) {
                    var nt, rt = ie[0];
                    rt.group === Nt ? (rt.power.greaterThan(1) && (rt = pt.expand(rt)), nt = pt.multiply(ie[1], ie[2]), t2 = new dt(0), rt.each(function(e3) {
                      e3 = pt.multiply(e3, nt.clone()), e3 = Vt.integrate(e3, n2, ut);
                      t2 = pt.add(t2, e3);
                    }, true)) : t2 = Vt.integration.by_parts(ce, n2, ut, lt);
                  } else if (Bt(ie)) {
                    for (var We = new dt(1), it = 0, se = ie.length; it < se; it++) We = pt.multiply(We, ie[it].fnTransform());
                    We = pt.expand(We), t2 = Vt.integrate(We, n2, ut);
                  } else {
                    var st = Gt(ie);
                    t2 = Vt.integrate(pt.expand(st), n2, ut);
                  }
                }
                t2 = pt.multiply(t2, ne);
              }
            } else t2 = pt.multiply(ce.clone(), pt.parse(n2));
            if (t2) return t2;
          } catch (e3) {
            if (!(e3 instanceof Ft || e3 instanceof ct.exceptions.DivisionByZero)) throw e3;
          }
          return pt.symfunction("integrate", [ot, at]);
        }, false));
      }, defint: function(e, t, n2, r) {
        r = r || "x";
        function i(t2, e2, n3) {
          try {
            return pt.parse(t2, e2);
          } catch (e3) {
            return Vt.Limit.limit(t2, r, n3);
          }
        }
        var s, o, a = ct.Utils.variables(e), u = e.hasTrig();
        return 1 !== a.length || r || (r = a[0]), u || (s = Vt.integrate(e, r)), u || s.hasIntegral() ? 1 === a.length && t.isConstant() && n2.isConstant() ? (o = ct.Utils.build(e), new dt(ct.Math2.num_integrate(o, Number(t), Number(n2)))) : pt.symfunction("defint", [e, t, n2, r]) : (o = {}, (e = {})[r] = n2, o[r] = t, n2 = i(s, e, n2), t = i(s, o, t), pt.subtract(n2, t));
      }, Limit: { interval: function(e, t) {
        return pt.parse(yt("[{0}, {1}]", e, t));
      }, diverges: function() {
        return Vt.Limit.interval("-Infinity", "Infinity");
      }, divide: function(e, t, n2, r, i) {
        if (!(i++ > ht.max_lim_depth)) {
          e.clone();
          var s = t.clone();
          if ("abs" === t.fname) {
            var o = e.sign(), a = r.sign();
            if (r.isInfinity) return pt.multiply(new dt(o), new dt(a));
            if (r.equals(0)) {
              var a = pt.parse(e.multiplier), u = pt.parse(t.multiplier);
              return pt.divide(pt.multiply(a, Vt.Limit.interval("-1", "1")), u);
            }
            Vt.Limit.diverges();
          }
          var l2 = function(e2) {
            if (ct.Utils.isVector(e2)) {
              for (var t2 = 0; t2 < e2.elements.length; t2++) if (!e2.elements[t2].isInfinity) return false;
              return true;
            }
            return e2.isInfinity;
          }, c2 = function(e2, t2) {
            return !ct.Utils.isVector(e2) && e2.equals(t2);
          };
          do {
            var p2, f, h = k(Vt.Limit.limit(e.clone(), n2, r, i)), m2 = k(Vt.Limit.limit(t.clone(), n2, r, i)), g2 = l2(h) && l2(m2) || c2(h, 0) && c2(m2, 0);
          } while (g2 && (p2 = Vt.diff(e.clone(), n2), f = Vt.diff(t.clone(), n2), e = (f = pt.expand(pt.divide(p2, f))).getNum(), t = f.getDenom()), g2);
          u = m2.equals(0), s = Number(s.power);
          return r.isConstant(true) && u ? dt.infinity(ct.Utils.even(s) && h.lessThan(0) ? -1 : void 0) : u ? Vt.Limit.diverges() : pt.divide(h, m2);
        }
      }, rewriteToLog: function(e) {
        var t = e.power.clone();
        return e.toLinear(), pt.pow(new dt("e"), pt.multiply(t, pt.symfunction(ht.LOG + "", [e])));
      }, getSubbed: function(t, e, n2) {
        var r;
        t.group === qt && (t = Vt.rewriteToLog(t));
        try {
          r = t.sub(e, n2);
        } catch (e2) {
          r = t;
        }
        return r;
      }, isInterval: function(e) {
        return ct.Utils.isVector(e);
      }, isConvergent: function(e) {
        return !(Vt.Limit.isInterval(e) && e.elements[0].isInfinity && e.elements[1].isInfinity || e.containsFunction("limit"));
      }, limit: function(t, n2, r, i) {
        if (t.isLinear() && t.isComposite()) {
          var s = new dt(0);
          return t.each(function(e2) {
            s = pt.add(s, Vt.Limit.limit(e2, n2, r, i));
          }, true), s;
        }
        if (t = ct.Algebra.Simplify.simplify(t), i = i || 1, !(i++ > ht.max_lim_depth)) {
          var e = pt.parse(t.multiplier);
          t.toUnitMultiplier();
          try {
            if (t.isConstant(true)) d2 = t;
            else {
              var o = {};
              o[n2] = r;
              try {
                var a = pt.parse(t.sub(n2, r), o);
                (a.isConstant(true) || a.isInfinity) && (d2 = a);
              } catch (e2) {
              }
              if (!d2) {
                var u, l2 = t.getNum(), c2 = t.getDenom();
                if (c2.isConstant(true)) {
                  if (t.group === qt) {
                    var p2, f, h, m2, g2, d2, v = t.clone().toLinear(), w = (t.power.clone(), v.getNum()), y = v.getDenom(), b = ct.Utils.decompose_fn(y, n2, true);
                    d2 = w.group === St && w.multiplier.isOne() && b.ax.group === St && b.b.isConstant(true) && b.a.isOne() && b.b.isConstant(true) ? pt.parse(yt("(1/e^({0}))", b.b)) : (f = (p2 = Vt.Limit.rewriteToLog(t.clone())).power.clone(), h = p2.clone().toLinear(), m2 = Vt.Limit.limit(h, n2, r, i), g2 = Vt.Limit.limit(f, n2, r, i), pt.pow(m2, g2));
                  } else if (t.group === gt && 1 === t.args.length) {
                    var S, M = Vt.Limit.limit(t.args[0], n2, r, i);
                    if (ct.Utils.isVector(M)) return d2 = M.map(function(e2) {
                      return t.clone().args[0] = e2, Vt.Limit.limit(pt.symfunction(t.fname, [e2]), n2, r, i);
                    }), pt.multiply(e, d2);
                    if (M.isConstant(true)) {
                      var N = pt.symfunction(t.fname, [M]);
                      try {
                        k(N), S = true;
                      } catch (e2) {
                        S = false;
                      }
                    }
                    if (S) d2 = N;
                    else if (Vt.Limit.isConvergent(M)) if (t.fname === xt) switch (M.toString()) {
                      case "0":
                        d2 = dt.infinity().negate();
                        break;
                      case "Infinity":
                      case "-Infinity":
                        d2 = dt.infinity();
                    }
                    else if (t.fname !== Lt && t.fname !== Ct || !r.isInfinity) {
                      if (t.fname === It) {
                        var E = t.args[0], q = E.getNum(), x = E.getDenom(), A = q.toUnitMultiplier();
                        (r.isInfinity || A.equals("pi") && x.equals(2)) && (d2 = divergent());
                      } else if (t.fname === ht.FACTORIAL && M.isInfinity) return dt.infinity();
                    } else d2 = Vt.Limit.interval(-1, 1);
                  } else if (t.group === St) {
                    if (0 < t.power) return pt.parse(t, o);
                    d2 = ct.Utils.even(t.power) ? dt.infinity() : Vt.Limit.diverges();
                  } else if (t.group === Et) {
                    for (var v = (U = t.collectSymbols().sort(function(e2, t2) {
                      return e2.group - t2.group;
                    })).pop(), C = k(Vt.Limit.limit(v, n2, r, i)); U.length; ) {
                      var L = U.pop(), I = k(Vt.Limit.limit(L, n2, r, i));
                      C.isInfinity || !Vt.Limit.isConvergent(C) && I.equals(0) || C.equals(0) && Vt.Limit.isConvergent(I) ? ((L = L.containsFunction(xt) ? [v, v = L][0] : L).invert(), C = C.isInfinity && I.isInfinity ? dt.infinity() : Vt.Limit.divide(v, L, n2, r, i)) : (C = pt.multiply(C, I), v = pt.multiply(v, L));
                    }
                    d2 = C;
                  } else if (t.isComposite()) {
                    t.isLinear() || (t = pt.expand(t)), d2 = new dt(0);
                    for (var U = t.collectSymbols().sort(function(e2, t2) {
                      return t2.group - e2.group;
                    }), _ = [], O = new dt(0), R = 0, T = U.length; R < T; R++) (P = U[R].clone()).group === gt || P.group === Et && P.hasFunc() ? O = pt.add(O, P) : _.push(P);
                    _.unshift(O), 1 !== _.length && (U = _);
                    for (R = 0, T = U.length; R < T; R++) {
                      var P = U[R];
                      try {
                        u = Vt.Limit.limit(P, n2, r, i);
                      } catch (e2) {
                        u = Vt.Limit.diverges();
                      }
                      try {
                        d2 = pt.add(d2, u);
                      } catch (e2) {
                        if (i++ > ht.max_lim_depth) return;
                        d2 = Vt.Limit.limit(Vt.diff(t, n2), n2, r, i);
                      }
                    }
                  }
                } else d2 = Vt.Limit.divide(l2, c2, n2, r, i);
              }
            }
            d2 = d2 || pt.symfunction("limit", [t, n2, r]);
          } catch (e2) {
            d2 = pt.symfunction("limit", [t, n2, r]);
          }
          return pt.multiply(e, d2);
        }
      } }, Fresnel: { S: function(e) {
        return e.isConstant(true) ? Vt.defint(pt.parse("sin(pi*x^2/2)"), dt(0), e, "x") : pt.symfunction("S", arguments);
      }, C: function(e) {
        return e.isConstant(true) ? Vt.defint(pt.parse("cos(pi*x^2/2)"), dt(0), e, "x") : pt.symfunction("C", arguments);
      } } };
      nerdamer.register([{ name: "diff", visible: true, numargs: [1, 3], build: function() {
        return Vt.diff;
      } }, { name: "sum", visible: true, numargs: 4, build: function() {
        return Vt.sum;
      } }, { name: "product", visible: true, numargs: 4, build: function() {
        return Vt.product;
      } }, { name: "integrate", visible: true, numargs: [1, 2], build: function() {
        return Vt.integrate;
      } }, { name: "defint", visible: true, numargs: [3, 4], build: function() {
        return Vt.defint;
      } }, { name: "S", visible: true, numargs: 1, build: function() {
        return Vt.Fresnel.S;
      } }, { name: "C", visible: true, numargs: 1, build: function() {
        return Vt.Fresnel.C;
      } }, { name: "limit", visible: true, numargs: [3, 4], build: function() {
        return Vt.Limit.limit;
      } }]), nerdamer.updateAPI();
    }(), "undefined" != typeof module && (nerdamer = require_nerdamer_core(), require_Calculus(), require_Algebra()), function() {
      var t, H = nerdamer.getCore(), j = H.PARSER, X = H.Algebra, $ = H.Calculus, Z = $.integration.decompose_arg, z = H.Utils.evaluate, q = H.Utils.remove, c = H.Utils.format, Q = H.Utils.build, f = H.Utils.knownVariable, Y = H.Symbol, W = H.Utils.isSymbol, l = H.Utils.variables, J = H.groups.S, K = H.groups.PL, ee = H.groups.CB, te = H.groups.CP, ne = H.groups.FN, re = H.Settings, s = H.Utils.range, ie = H.Utils.isArray;
      function se(e2, t2) {
        if (t2.isConstant() && e2.isConstant() && !e2.equals(t2) || e2.equals(H.Settings.IMAGINARY) && t2.isConstant(true) || t2.equals(H.Settings.IMAGINARY) && e2.isConstant(true)) throw new H.exceptions.NerdamerValueError(e2.toString() + " does not equal " + t2.toString());
        this.LHS = e2, this.RHS = t2;
      }
      H.Settings.SOLVE_RADIUS = 1e3, H.Settings.ROOTS_PER_SIDE = 10, H.Settings.make_pi_conversions = false, H.Settings.STEP_SIZE = 0.1, H.Settings.EPSILON = 1e-13, H.Settings.MAX_NEWTON_ITERATIONS = 200, H.Settings.MAX_NON_LINEAR_TRIES = 12, H.Settings.NON_LINEAR_JUMP_AT = 50, H.Settings.NON_LINEAR_JUMP_SIZE = 100, H.Settings.NON_LINEAR_START = 0.01, H.Settings.NEWTON_SLICES = 200, H.Settings.NEWTON_EPSILON = 2 * Number.EPSILON, H.Settings.SOLUTION_PROXIMITY = 1e-14, H.Settings.FILTER_SOLUTIONS = true, H.Settings.MAX_SOLVE_DEPTH = 10, H.Settings.ZERO_EPSILON = 1e-9, H.Settings.MAX_BISECTION_ITER = 2e3, H.Settings.BI_SECTION_EPSILON = 1e-12, H.Symbol.prototype.hasTrig = function() {
        return this.containsFunction(["cos", "sin", "tan", "cot", "csc", "sec"]);
      }, H.Symbol.prototype.hasNegativeTerms = function() {
        if (this.isComposite()) for (var e2 in this.symbols) {
          var t2 = this.symbols[e2];
          if (t2.group === K && t2.hasNegativeTerms() || this.symbols[e2].power.lessThan(0)) return true;
        }
        return false;
      }, se.prototype = { toString: function() {
        return this.LHS.toString() + "=" + this.RHS.toString();
      }, text: function(e2) {
        return this.LHS.text(e2) + "=" + this.RHS.text(e2);
      }, toLHS: function(e2) {
        var t2 = (n2 = (e2 = void 0 === e2) ? this.removeDenom() : this.clone()).LHS, n2 = n2.RHS;
        t2.isConstant(true) && !n2.isConstant(true) && ([t2, n2] = [n2, t2]);
        n2 = j.subtract(t2, n2);
        return new se(e2 ? j.expand(n2) : n2, new Y(0)).removeDenom().LHS;
      }, removeDenom: function() {
        var e2 = this.LHS.clone(), t2 = this.RHS.clone(), n2 = j.multiply(e2.getDenom(), t2.getDenom());
        if (e2 = j.expand(j.multiply(e2, n2.clone())), (t2 = j.expand(j.multiply(t2, n2))).group === te && t2.group !== te && (r = e2, e2 = t2, t2 = r), e2.group === ee) {
          var r = new Y(e2.multiplier), i = t2.clone();
          e2.each(function(e3) {
            e3.power.lessThan(0) ? i = j.divide(i, e3) : r = j.multiply(r, e3);
          }), e2 = r, t2 = i;
        } else if (e2.group === te) for (var s2 in e2.symbols) {
          var o = e2.symbols[s2];
          if (o.group === ee) for (var a in o.symbols) {
            a = o.symbols[a];
            if (a.power.lessThan(0)) return new se(j.expand(j.multiply(a.clone().toLinear(), e2)), j.expand(j.multiply(a.clone().toLinear(), t2)));
          }
        }
        return new se(e2, t2);
      }, clone: function() {
        return new se(this.LHS.clone(), this.RHS.clone());
      }, sub: function(e2, t2) {
        var n2 = this.clone();
        return n2.LHS = n2.LHS.sub(e2.clone(), t2.clone()), n2.RHS = n2.RHS.sub(e2.clone(), t2.clone()), n2;
      }, isZero: function() {
        return H.Utils.evaluate(this.toLHS()).equals(0);
      }, latex: function(e2) {
        return [this.LHS.latex(e2), this.RHS.latex(e2)].join("=");
      } }, j.equals = function(e2, t2) {
        return new se(e2, t2);
      }, t = j.functions.simplify[0], j.functions.simplify[0] = function(e2) {
        return e2 instanceof se ? (e2.LHS = t(e2.LHS), e2.RHS = t(e2.RHS), e2) : t(e2);
      }, H.Expression.prototype.equals = function(e2) {
        return e2 instanceof H.Expression && (e2 = e2.symbol), new se(this.symbol, e2);
      }, H.Expression.prototype.solveFor = function(e2) {
        var t2;
        if (this.symbol instanceof se) {
          if (this.symbol.LHS.isConstant() && this.symbol.RHS.equals(e2)) return new H.Expression(this.symbol.LHS);
          if (this.symbol.RHS.isConstant() && this.symbol.LHS.equals(e2)) return new H.Expression(this.symbol.RHS);
          t2 = this.symbol.toLHS();
        } else t2 = this.symbol;
        return ue(t2, e2).map(function(e3) {
          return new H.Expression(e3);
        });
      }, H.Expression.prototype.expand = function() {
        if (this.symbol instanceof se) {
          var e2 = this.symbol.clone();
          return e2.RHS = j.expand(e2.RHS), e2.LHS = j.expand(e2.LHS), new H.Expression(e2);
        }
        return new H.Expression(j.expand(this.symbol));
      }, H.Expression.prototype.variables = function() {
        return this.symbol instanceof se ? H.Utils.arrayUnique(l(this.symbol.LHS).concat(l(this.symbol.RHS))) : l(this.symbol);
      };
      function e(e2, t2) {
        return j.equals(e2, t2);
      }
      H.Equation = se;
      var oe = H.Utils.checkAll = function(e2, t2) {
        for (var n2 = 0; n2 < e2.length; n2++) if (t2(e2[n2])) return false;
        return true;
      }, ae = H.Solve = { version: "2.0.3", solutions: [], solve: function(e2, t2) {
        t2 = ue(e2, String(t2));
        return new H.Vector(t2);
      }, toLHS: function(e2, t2) {
        return W(e2) ? e2 : (e2 instanceof se || ((n2 = e2.split("="))[1] = n2[1] || "0", e2 = new se(j.parse(n2[0]), j.parse(n2[1]))), e2.toLHS(t2));
        var n2;
      }, solveCircle: function(e2, t2) {
        for (var n2 = t2.map(function(e3) {
          return j.parse(e3);
        }), r = [], i = [], s2 = 0; s2 < e2.length; s2++) {
          for (var o = [], a = 0; a < n2.length; a++) o.push(Number(H.Algebra.degree(e2[s2], n2[a])));
          o.push(H.Utils.arraySum(o, true)), r.push(o);
        }
        var u, l2, c2 = e2[0], p = e2[1];
        return r[0][2] > r[1][2] && ([p, c2] = [c2, p], [r[1], r[0]] = [r[0], r[1]]), 1 === r[0][0] && 2 === r[0][2] && 2 === r[1][0] && 4 === r[1][2] && (u = t2[0], l2 = t2[1], t2 = ue(j.parse(p, f(u, ue(j.parse(c2), u)[0])), l2).map(function(e3) {
          return e3.toString();
        }), p = [ue(j.parse(c2, f(l2, t2[0])))[0].toString()], t2[1] && p.push(ue(j.parse(c2, f(l2, t2[1])))[0].toString()), re.SOLUTIONS_AS_OBJECT ? ((i = {})[u] = p, i[l2] = t2) : (t2.unshift(l2), p.unshift(u), i = [p, t2])), i;
      }, solveNonLinearSystem: function(e2, t2, r) {
        if (t2 < 0) return [];
        r = void 0 === r ? H.Settings.NON_LINEAR_START : r;
        var i = H.Settings.MAX_NON_LINEAR_TRIES, s2 = Math.floor(i / 2);
        t2 = void 0 === t2 ? i : t2;
        var o, a, u, l2, c2, p = H.Settings.NON_LINEAR_JUMP_AT, f2 = H.Settings.NON_LINEAR_JUMP_SIZE, h = true, m = H.Utils.arrayGetVariables(e2), i = H.Matrix.jacobian(e2, m, function(e3) {
          return Q(e3, m);
        }, true), g = H.Settings.MAX_NEWTON_ITERATIONS, d = e2.map(function(e3) {
          return Q(e3, m);
        }), v = i.map(function(e3) {
          return Q(e3, m);
        }, true), w = H.Matrix.cMatrix(0, m), y = H.Matrix.cMatrix(r, m), b = 0;
        do {
          if (g < b) break;
          o = function(e3, n2) {
            return e3.map(function(e4, t3) {
              return Number(n2.get(t3, 0));
            });
          }(m, y), l2 = y.clone(), d.forEach(function(e3, t3) {
            y.set(t3, 0, e3.apply(null, o));
          });
          var S = new H.Matrix();
          if (v.each(function(e3, t3, n2) {
            e3 = e3.apply(null, o);
            S.set(t3, n2, e3);
          }), S = S.invert(), c2 = (a = j.multiply(S, y).negate()).subtract(w, function(e3) {
            return j.parse(Number(e3));
          }), w = l2.add(a, function(e3) {
            return j.parse(Number(e3));
          }), y = w, p <= b && 1 < u) {
            t2 === s2 && (r = 0);
            var M = s2 < t2 ? 1 : -1;
            return n = t2 % Math.floor(s2) + 1, r += M * n * f2, ae.solveNonLinearSystem(e2, --t2, r);
          }
        } while ((M = u, b++, u = c2.max(), Number(u) !== Number(M)) && Number(u) >= Number.EPSILON);
        return h ? ae.systemSolutions(y, m, true, function(e3) {
          return H.Utils.round(Number(e3), 14);
        }) : [];
      }, systemSolutions: function(e2, r, i, s2) {
        var o = H.Settings.SOLUTIONS_AS_OBJECT ? {} : [];
        return e2.each(function(e3, t2) {
          var n2 = (i ? j.expand(e3) : e3).valueOf();
          s2 && (n2 = s2.call(e3, n2));
          t2 = r[t2];
          H.Settings.SOLUTIONS_AS_OBJECT ? o[t2] = n2 : o.push([t2, n2]);
        }), o;
      }, solveSystemBySubstitution: function(e2) {
        var t2 = l(e2[0]), n2 = l(e2[1]);
        return 2 === e2.length && 2 === t2.length && H.Utils.arrayEqual(t2, n2) ? ae.solveCircle(e2, t2) : [];
      }, solveSystem: function(e2, t2) {
        for (var n2 = 0; n2 < e2.length; n2++) e2[n2] = ae.toLHS(e2[n2]);
        var r, i = e2.length, s2 = new H.Matrix(), o = new H.Matrix(), a = false;
        if (void 0 === t2) {
          if (!X.allLinear(e2)) try {
            return ae.solveNonLinearSystem(e2);
          } catch (c3) {
            if (c3 instanceof H.exceptions.DivisionByZero) return ae.solveSystemBySubstitution(e2);
          }
          if (1 === (r = H.Utils.arrayGetVariables(e2)).length) {
            var u, l2 = 0;
            do {
              var c2 = e2[l2].clone();
            } while (0 < l2 && (c2 = c2.sub(r[0], u[0])), u = ue(c2, r[0]), ++l2 < e2.length);
            return re.SOLUTIONS_AS_OBJECT ? (h = {})[r[0]] = u : h = 0 === u.length ? u : [r[0], u], h;
          }
          if (r.length < e2.length) {
            for (var p = [], l2 = e2.length, n2 = 0; n2 < l2 - 1; n2++) p.push(j.parse(e2[n2]));
            var f2 = {}, h = ae.solveSystem(p, r);
            Array.isArray(h) ? h.forEach(function(e3) {
              f2[e3[0]] = e3[1];
            }) : f2 = h;
            for (var m = true, n2 = l2 - 1; n2 < l2; n2++) j.parse(e2[n2], f2).equals(0) || (m = false);
            if (m) return h;
          }
          for (n2 = 0; n2 < r.length; n2++) nerdamer.setVar(r[n2], "delete");
          for (n2 = 0; n2 < i; n2++) {
            for (var c2 = e2[n2], g = 0; g < r.length; g++) {
              var d = r[g], v = [];
              c2.each(function(e3) {
                e3.contains(d) && (v = v.concat(e3.coeffs()));
              });
              var w = H.Utils.arraySum(v);
              s2.set(n2, g, w);
            }
            var y = c2.clone();
            r.map(function(e3) {
              y = y.stripVar(e3, true);
            }), o.set(n2, 0, y.negate());
          }
        } else for (r = t2, a = true, n2 = 0; n2 < i; n2++) {
          o.set(n2, 0, new Y(0));
          for (c2 = j.expand(e2[n2]).collectSymbols(), g = 0; g < t2.length; g++) {
            s2.set(n2, g, new Y(0));
            for (var d = t2[g], b = 0; b < c2.length; b++) {
              for (var S, M = c2[b], N = false, E = 0; E < t2.length; E++) M.contains(t2[E]) && (N && H.err("Multiple variables found for term " + M), N = true);
              M.contains(d) && (S = Z(q(c2, b), d), s2.set(n2, g, j.add(s2.get(n2, g), S[0])));
            }
          }
          for (b = 0; b < c2.length; b++) o.set(n2, 0, j.add(o.get(n2, 0), c2[b]));
        }
        if (r.length !== e2.length || s2.determinant().equals(0)) throw new H.exceptions.SolveError("System does not have a distinct solution");
        h = (s2 = s2.invert()).multiply(o);
        return H.Utils.isArray(t2) && h.each(function(e3) {
          return e3.negate();
        }), ae.systemSolutions(h, r, a);
      }, quad: function(e2, t2, n2) {
        e2 = j.subtract(j.pow(t2.clone(), Y(2)), j.multiply(j.multiply(n2.clone(), e2.clone()), Y(4))), e2 = j.expand(e2), e2 = j.pow(e2, Y(0.5)), n2 = j.parse(j.multiply(new Y(2), n2.clone()));
        return [j.parse(c("(-({0})+({1}))/({2})", t2, e2, n2)), j.parse(c("(-({0})-({1}))/({2})", t2, e2, n2))];
      }, cubic: function(e2, t2, n2, r) {
        r = r.text(), n2 = n2.text(), t2 = t2.text(), e2 = `(-(${n2})^3/(27*(${r})^3)+(${n2})*(${t2})/(6*(${r})^2)-(${e2.text()})/(2*(${r})))`, t2 = `((${t2})/(3*(${r}))-(${n2})^2/(9*(${r})^2))`, n2 = `((${e2})+sqrt((${e2})^2+(${t2})^3))^(1/3)+((${e2})-sqrt((${e2})^2+(${t2})^3))^(1/3)-(${`(${n2})/(3*(${r}))`})`, r = "1/2+sqrt(3)/2*i";
        return [j.parse(n2), j.parse(`(${n2})(${r})`), j.parse(`(${n2})(${r})^2`)];
      }, quartic: function(e2, t2, n2, r, i) {
        var s2, o, a, u = {};
        return H.Utils.arrayUnique(l(i).concat(l(r)).concat(l(n2)).concat(l(t2)).concat(l(e2))).map(function(e3) {
          u[e3] = 1;
        }), i = i.toString(), r = r.toString(), n2 = n2.toString(), t2 = t2.toString(), e2 = e2.toString(), s2 = j.parse(c("(8*({0})*({2})-3*({1})^2)/(8*({0})^2)", i, r, n2)).toString(), o = j.parse(c("(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)", i, r, n2, t2)).toString(), a = j.parse(c("12*({0})*({4})-3*({1})*({3})+({2})^2", i, r, n2, t2, e2)).toString(), e2 = j.parse(c("2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})", i, r, n2, t2, e2)).toString(), e2 = j.parse(c("((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)", a, e2)).toString(), J = j.parse(c("(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)", i, s2, e2, a)).toString(), [j.parse(c("-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))", i, r, s2, o, J)), j.parse(c("-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))", i, r, s2, o, J)), j.parse(c("-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))", i, r, s2, o, J)), j.parse(c("-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))", i, r, s2, o, J))];
      }, divideAndConquer: function(e2, t2) {
        var n2 = [], e2 = H.Algebra.Factor.factor(e2);
        return e2.group === ee && e2.each(function(e3) {
          e3 = Y.unwrapPARENS(e3), n2 = n2.concat(ue(e3, t2));
        }), n2;
      }, csolve: function(u, l2) {
        return H.Utils.block("IGNORE_E", function() {
          var e2 = [], t2 = H.Utils.decompose_fn(u, l2, true);
          if (t2.x.group === J) for (var n2, r = j.parse(t2.x.power), i = Number(r), s2 = j.pow(j.divide(t2.b.negate(), t2.a), r.invert()), s2 = (t2 = Y.toPolarFormArray(s2))[0], o = (t2[1], s2.toString()), a = (r.toString(), 0); a < i; a++) n2 = c("({0})*e^(2*{1}*pi*{2}*{3})", o, a, r, H.Settings.IMAGINARY), n2 = j.parse(n2), e2.push(n2);
          return e2;
        }, true);
      }, getPoints: function(e2, t2, u) {
        t2 = t2 || 0.01, u = u || [];
        var l2 = Q(e2), n2 = Math.round(0), r = l2(n2), c2 = r / Math.abs(r), i = H.Settings.ROOTS_PER_SIDE, r = i;
        u.push(Math.floor(n2 / 2)), u.push(Math.abs(n2)), u.push(n2), e2.each(function(e3) {
          e3.containsFunction(H.Settings.LOG) && u.push(0.1);
        });
        e2 = s(-H.Settings.SOLVE_RADIUS, n2, t2), n2 = s(n2, H.Settings.SOLVE_RADIUS, t2), t2 = function(e3, t3) {
          for (var n3, r2, i2, s2 = [], o = 0, a = e3.length; o < a; o++) n3 = e3[o], i2 = (r2 = l2(n3)) / Math.abs(r2), isNaN(r2) || !isFinite(r2) || s2.length > t3 || (i2 !== c2 && s2.push(n3), c2 = i2);
          u = u.concat(s2);
        };
        return t2(e2, r), t2(n2, i), u;
      }, bisection: function(e2, t2) {
        var n2 = e2 - 1, r = e2 + 1;
        if (Math.sign(t2(n2)) !== Math.sign(t2(r))) {
          var i, s2, o = 0;
          do {
            if (i = Math.abs(r - n2), o++ > H.Settings.MAX_BISECTION_ITER || isNaN(i)) return;
          } while (s2 = (n2 + r) / 2, 0 < t2(n2) * t2(s2) ? n2 = s2 : r = s2, i >= re.EPSILON);
          var a = (n2 + r) / 2, e2 = t2(a);
          if (!isNaN(e2) && Math.abs(e2) <= H.Settings.BI_SECTION_EPSILON) return H.Utils.round(a, 13);
        }
      }, Newton: function(e2, t2, n2) {
        var r = H.Settings.MAX_NEWTON_ITERATIONS, i = 0, s2 = e2;
        do {
          var o = t2(s2);
          if (0 === s2 && 0 === o) {
            a = 0;
            break;
          }
          if (r < ++i) return;
          var a = s2 - o / n2(s2), o = Math.abs(a - s2), s2 = a;
        } while (o > re.NEWTON_EPSILON);
        if (Math.abs(t2(a)) <= re.EPSILON) return a;
      }, rewrite: function(e2, t2, n2) {
        var r, i;
        t2 = t2 || new Y(0), e2.isComposite() && e2.isLinear() ? (r = [], i = [], e2.each(function(e3) {
          ("sqrt" === (e3 = e3.clone()).fname && e3.contains(n2) ? r : i).push(e3);
        }, true), 1 === r.length && (t2 = j.expand(j.pow(j.subtract(t2, H.Utils.arraySum(i)), new Y(2))), e2 = j.expand(j.pow(Y.unwrapSQRT(r[0]), new Y(2))))) : e2 = Y.unwrapSQRT(j.expand(e2));
        var s2 = 0, o = e2.length;
        if (e2.group === te && e2.contains(n2) && e2.isLinear()) {
          e2.distributeMultiplier();
          var a = new Y(0);
          return e2.each(function(e3) {
            e3.contains(n2) ? (s2++, a = j.add(a, e3.clone())) : t2 = j.subtract(t2, e3.clone());
          }), e2 = a, s2 !== o ? ae.rewrite(e2, t2, n2) : [e2, t2];
        }
        if (e2.group === ee && e2.contains(n2) && e2.isLinear()) {
          if (e2.multiplier.lessThan(0) && (e2.multiplier = e2.multiplier.multiply(new H.Frac(-1)), t2.multiplier = t2.multiplier.multiply(new H.Frac(-1))), t2.equals(0)) return new Y(0);
          a = new Y(1);
          return e2.each(function(e3) {
            e3.contains(n2) ? a = j.multiply(a, e3.clone()) : t2 = j.divide(t2, e3.clone());
          }), ae.rewrite(e2 = a, t2, n2);
        }
        if (!e2.isLinear() && e2.contains(n2)) {
          o = j.parse(e2.power.clone().invert());
          return e2 = j.pow(e2, o.clone()), t2 = j.pow(j.expand(t2), o.clone()), ae.rewrite(e2, t2, n2);
        }
        if (e2.group === ne || e2.group === J || e2.group === K) return [e2, t2];
      }, sqrtSolve: function(n2, r) {
        var t2 = new Y(0), i = new Y(0);
        if (n2.isComposite() && (n2.each(function(e3) {
          "sqrt" === e3.fname && e3.contains(r) ? t2 = j.add(t2, e3.clone()) : i = j.add(i, e3.clone());
        }), !t2.equals(0))) {
          var e2 = j.expand(j.multiply(j.parse(n2.multiplier), j.subtract(j.pow(i, new Y(2)), j.pow(t2, new Y(2)))));
          return ue(e2, r).filter(function(e3) {
            if (e3.isImaginary()) return e3;
            var t3 = {};
            return t3[r] = e3, z(n2, t3).equals(0) ? e3 : void 0;
          });
        }
      } }, ue = function(n2, p, i, t2, e2) {
        if (t2 = t2 || 0, t2++ > re.MAX_SOLVE_DEPTH) return i;
        if (n2 instanceof se) {
          if (n2.isZero()) return [new Y(0)];
          if (n2.LHS.equals(p) && !n2.RHS.contains(p)) return [n2.RHS];
          if (n2.RHS.equals(p) && !n2.LHS.contains(p)) return [n2.LHS];
        }
        if (n2 instanceof H.Vector && (n2 = n2.elements), p = p || "x", ie(n2)) return ae.solveSystem.apply(void 0, arguments);
        i = i || [];
        var s2 = {}, r = {};
        if (r[p] = 0, W(n2) && true === z(n2.getDenom(), r).equals(0)) return i;
        var o = function(e3, t3) {
          var n3, r2 = W(e3);
          void 0 === e3 || "number" == typeof e3 && isNaN(e3) || (ie(e3) ? e3.forEach(function(e4) {
            o(e4);
          }) : "null" !== e3.valueOf() && ("function" == typeof H.Settings.PRE_ADD_SOLUTION && (e3 = H.Settings.PRE_ADD_SOLUTION(e3)), r2 || (e3 = j.parse(e3)), H.Settings.make_pi_conversions && t3 && (r2 = (n3 = j.divide(e3.clone(), new Y(Math.PI))).multiplier, t3 = Math.abs(r2.num), r2 = Math.abs(r2.den), t3 < 10 && r2 < 10 && (e3 = j.multiply(n3, new Y("pi")))), n3 = e3.toString(), s2[n3] || i.push(e3), s2[n3] = true));
        };
        if (n2.group === J && n2.contains(p)) {
          try {
            var a = {};
            a[p] = 0, z(e2, a, "numer"), o(new Y(0));
          } catch (e3) {
          }
          return i;
        }
        if (n2.group === ee) {
          var u = n2.getNum();
          if (u.group !== ee) return ue(u, p, i, t2, e2);
          var l2 = String(p);
          return u.each(function(e3) {
            e3.contains(l2) && ue(e3, p, i, t2, n2);
          }), i;
        }
        n2.group === ne && "sqrt" === n2.fname && (n2 = j.pow(Y.unwrapSQRT(n2), new Y(2)));
        var c2 = (H.Utils.isSymbol(n2) ? n2 : ae.toLHS(n2, false)).getNum(), r = H.Utils.variables(c2), a = r.length;
        if ((c2 = H.Utils.isInt(c2.power) && 0 < c2.power ? j.parse(c2).toLinear() : c2).group === J || c2.group === ee && c2.contains(p)) return [new Y(0)];
        function f2(e3) {
          var t3 = new Y(0), n3 = new Y(0);
          return e3.each(function(e4) {
            e4.contains(p, true) ? t3 = j.add(t3, e4.clone()) : n3 = j.subtract(n3, e4.clone());
          }), [t3, n3];
        }
        var h, m = {}, g = function(n3) {
          var e3 = (n3 = j.expand(n3, { expand_denominator: true, expand_functions: true })).clone();
          if (n3.symbols) for (var t3 in n3.symbols) {
            var r2 = n3.symbols[t3], i2 = r2.getDenom();
            if (!i2.isConstant(true) && n3.isComposite()) {
              var s3 = new Y(0);
              return n3.each(function(e4) {
                s3 = j.add(s3, j.multiply(e4, i2.clone()));
              }), g(j.multiply(j.parse(n3.multiplier), s3));
            }
            var o2 = Z(r2, p), a2 = o2[1].fname === H.Settings.SQRT, u2 = Y.unwrapSQRT(o2[1]), t3 = u2.power.clone();
            if (!W(t3) && !t3.equals(0.5)) if (t3.den.gt(1)) {
              if (a2) return n3 = j.subtract(n3, r2.clone()), n3 = j.add(n3, j.multiply(o2[0].clone(), u2)), g(n3);
              u2 = m[t3.den];
              m[t3.den] = u2 ? u2++ : 1;
            } else {
              if (-1 === t3.sign()) {
                var l3 = j.parse(p + "^" + Math.abs(t3));
                return n3.each(function(e4, t4) {
                  e4.contains(p) && (n3.symbols[t4] = j.multiply(e4, l3.clone()));
                }), m = {}, g(j.parse(n3));
              }
              if (r2.group === K) {
                r2 = H.Utils.arrayMin(H.Utils.keys(r2.symbols));
                if (r2 < 0) {
                  var l3 = j.parse(p + "^" + Math.abs(r2)), c3 = new Y(0);
                  return e3.each(function(e4) {
                    c3 = j.add(c3, j.multiply(e4.clone(), l3.clone()));
                  }, true), c3;
                }
              }
            }
          }
          return n3;
        };
        if (ae.inverseFunctionSolve = function(e3, t3, n3) {
          var r2 = Z(t3.args[0], p);
          if (r2[1].group === J) return j.divide(j.symfunction(e3, [j.divide(n3, j.parse(t3.multiplier))]), r2[0]);
        }, (c2 = g(c2)).equals(0)) return [c2];
        var d, v, u = H.Utils.keys(m);
        if (1 === u.length && (h = u[0], c2.each(function(e3, t3) {
          var n3, r2;
          !e3.contains(p) || (e3 = (r2 = (n3 = Z(e3, p))[1]).power).den.gt(1) && (r2.power = e3.multiply(new H.Frac(h)), c2.symbols[t3] = j.multiply(r2, n3[0]));
        }), c2 = j.parse(c2)), o(ae.sqrtSolve(c2, p)), 1 === a) if (c2.isPoly(true)) {
          var w = new H.Algebra.Classes.Factors();
          if (H.Algebra.Factor.factor(c2, w), 1 < w.getNumberSymbolics()) for (var y in w.factors) o(ue(w.factors[y], p));
          else {
            var b, S, M = (b = H.Utils.getCoeffs(c2, p)).length - 1, a = false;
            r[0] === p && (oe(b, function(e3) {
              return e3.group !== H.groups.N;
            }) && (r = H.Algebra.proots(c2), oe(r, function(e3) {
              return !H.Utils.isInt(e3);
            }) && (a = true, r.map(function(e3) {
              o(new Y(e3));
            }))), a || ((n2 = j.parse(n2)) instanceof H.Equation && (n2 = n2.toLHS()), 1 === M ? o(j.divide(b[0], b[1].negate())) : 2 === M ? o(j.expand(ae.quad.apply(void 0, b))) : 3 === M ? (i = [], S = H.Algebra.Factor.factor(n2), 0 < (i = []).length ? o(i) : o(ae.cubic.apply(void 0, b))) : X.proots(c2).map(o)));
          }
        } else try {
          for (var N, E, q2 = c2.hasTrig(), x = ae.getPoints(c2, 0.1), A = ae.getPoints(c2, 0.05), C = ae.getPoints(c2, 0.01), L = H.Utils.arrayUnique(x.concat(A).concat(C)).sort(function(e3, t3) {
            return e3 - t3;
          }), I = Q(c2.clone()), U = [], _ = 0; _ < L.length; _++) N = L[_], void 0 !== (E = ae.bisection(N, I)) ? o(E, q2) : U.push(N);
          var L = U, O = $.diff(c2.clone()), R = Q(O);
          for (_ = 0; _ < L.length; _++) N = L[_], o(ae.Newton(N, I, R), q2);
          i.sort();
        } catch (e3) {
          console.log(e3);
        }
        else if (!c2.hasFunc(p) && c2.isComposite()) try {
          if ((S = H.Algebra.Factor.factor(c2.clone())).group === ee) S.each(function(e3) {
            o(ue(e3, p));
          });
          else {
            switch (M = (b = H.Utils.getCoeffs(c2, p)).length - 1) {
              case 0:
                var T, P, k, D = (T = f2(c2))[0], F = T[1];
                D.group === H.groups.EX && (k = `${P = H.Settings.LOG}((${F})/(${D.multiplier}))/${P}(${D.value})/${D.power.multiplier}`, o(j.parse(k)));
                break;
              case 1:
                o(j.divide(b[0], b[1].negate()));
                break;
              case 2:
                o(ae.quad.apply(void 0, b));
                break;
              case 3:
                o(ae.cubic.apply(void 0, b));
                break;
              case 4:
                o(ae.quartic.apply(void 0, b));
                break;
              default:
                o(ae.csolve(c2, p)), 0 === i.length && o(ae.divideAndConquer(c2, p));
            }
            0 === i.length && o(ue(S, p, i, t2));
          }
        } catch (e3) {
        }
        else try {
          var B, G = ae.rewrite(c2, null, p), D = G[0], F = G[1];
          if (D.group === ne) "abs" === D.fname ? o([F.clone(), F.negate()]) : "sin" === D.fname ? o(ae.inverseFunctionSolve("asin", D, F)) : "cos" === D.fname ? o(ae.inverseFunctionSolve("acos", D, F)) : "tan" === D.fname ? o(ae.inverseFunctionSolve("atan", D, F)) : D.fname === H.Settings.LOG ? (y = (B = Z(D.args[0], p))[1]).group === J && (c2 = new se(y, F = j.divide(j.subtract(j.pow(1 < D.args.length ? D.args[1] : new Y("e"), j.divide(F, j.parse(D.multiplier))), B[3]), B[0])).toLHS(), o(ue(c2, p))) : o(j.subtract(D, F));
          else {
            var V = new se(D, F).toLHS();
            if (V.equals(c2)) throw new Error("Stopping. No stop condition exists");
            o(ue(V, p));
          }
        } catch (e3) {
          try {
            c2.group === ee ? o(0) : c2.group === te && (D = (T = f2(c2))[0], F = T[1], D.group === H.groups.EX && D.value === p && (d = D.power.clone().invert(), o(j.pow(F, d))));
          } catch (e4) {
          }
        }
        return h && (i = i.map(function(e3) {
          return j.pow(e3, new Y(h));
        })), W(n2) && (v = {}, i = i.filter(function(e3) {
          try {
            v[p] = e3;
            var t3 = Number(z(n2, v));
            return isNaN(t3) ? true : true;
          } catch (e4) {
            return false;
          }
        })), i;
      };
      nerdamer.register([{ name: "solveEquations", parent: "nerdamer", numargs: -1, visible: true, build: function() {
        return ue;
      } }, { name: "solve", parent: "Solve", numargs: 2, visible: true, build: function() {
        return H.Solve.solve;
      } }, { name: "setEquation", parent: "Solve", visible: true, build: function() {
        return e;
      } }]), nerdamer.updateAPI();
    }(), "undefined" != typeof module && (nerdamer = require_nerdamer_core(), require_Calculus(), require_Algebra()), function() {
      "use strict";
      var x = nerdamer.getCore(), A = x.PARSER, C = x.Symbol, L = x.Utils.format, a = x.Utils.isVector, u = x.Utils.isArray, I = (x.Vector, x.groups.S), U = (x.groups.EX, x.groups.CP), _ = x.groups.CB, l = x.groups.FN;
      x.Settings.Laplace_integration_depth = 40, C.prototype.findFunction = function(e) {
        if (this.group === l && this.fname === e) return this.clone();
        var t;
        if (this.symbols) {
          for (var n2 in this.symbols) if (t = this.symbols[n2].findFunction(e)) break;
        }
        return t;
      };
      var O = x.Extra = { version: "1.4.2", LaPlace: { transform: function(n2, r, i) {
        n2 = n2.clone(), r = r.toString();
        var e = (n2 = C.unwrapSQRT(n2, true)).stripVar(r), t = n2.group;
        if ((n2 = A.divide(n2, e.clone())).isConstant() || !n2.contains(r, true)) o = A.parse(L("({0})/({1})", n2, i));
        else if (t === I && x.Utils.isInt(n2.power)) var s = String(n2.power), o = A.parse(L("factorial({0})/({1})^({0}+1)", s, i));
        else if (n2.group === I && n2.power.equals(0.5)) o = A.parse(L("sqrt(pi)/(2*({0})^(3/2))", i));
        else if (n2.isComposite()) o = new C(0), n2.each(function(e2) {
          o = A.add(o, O.LaPlace.transform(e2, r, i));
        }, true);
        else if (!n2.isE() || n2.power.group !== I && n2.power.group !== _) if (n2.group !== l || -1 === ["sin", "cos", "sinh", "cosh"].indexOf(n2.fname) || n2.args[0].group !== I && n2.args[0].group !== _) {
          var a2, s = x.Settings.integration_depth < x.Settings.Laplace_integration_depth;
          s && (a2 = x.Settings.integration_depth, x.Settings.integration_depth = x.Settings.Laplace_integration_depth), x.Utils.block("PARSE2NUMBER", function() {
            var e2 = r, t2 = n2.sub(r, e2), t2 = A.parse("e^(-" + i + "*" + e2 + ")*" + t2);
            if ((o = x.Calculus.integrate(t2, e2)).hasIntegral()) return A.symfunction("laplace", arguments);
            o = o.sub(r, 0), o = (o = A.expand(A.multiply(o, new C(-1)))).sub(e2, r);
          }, false), o = x.Utils.block("PARSE2NUMBER", function() {
            return A.parse(o);
          }, true), s && (x.Settings.integration_depth = a2);
        } else {
          u2 = n2.args[0].stripVar(r);
          switch (n2.fname) {
            case "sin":
              o = A.parse(L("({0})/(({1})^2+({0})^2)", u2, i));
              break;
            case "cos":
              o = A.parse(L("({1})/(({1})^2+({0})^2)", u2, i));
              break;
            case "sinh":
              o = A.parse(L("({0})/(({1})^2-({0})^2)", u2, i));
              break;
            case "cosh":
              o = A.parse(L("({1})/(({1})^2-({0})^2)", u2, i));
          }
        }
        else {
          var u2 = n2.power.stripVar(r);
          o = A.parse(L("1/(({1})-({0}))", u2, i));
        }
        return A.multiply(o, e);
      }, inverse: function(M, N, E) {
        var q = M.clone();
        return x.Utils.block("POSITIVE_MULTIPLIERS", function() {
          if ((M = M.group === _ ? x.Algebra.PartFrac.partfrac(A.expand(M), N) : M).group === I || M.group === _ || M.isComposite()) {
            var e, t, n2, r, i, s, o, a2, u2, l2, c, p, f, h, m, g = function() {
              (s = A.multiply(s, e)).multiplier = s.multiplier.multiply(M.multiplier), s = A.divide(s, r.a);
            }, d = M.multiplier.clone();
            if (M.toUnitMultiplier(), e = M.getNum(), (t = M.getDenom().toUnitMultiplier()).group === U ? (i = t.power.clone(), t.toLinear()) : i = new x.Frac(1), n2 = N.toString(), r = x.Utils.decompose_fn(t, n2, true), x.Utils.decompose_fn(A.expand(e.clone()), n2, true), e.multiplier = e.multiplier.multiply(d), (t.group === I || t.group === _) && r.x.value === n2 && r.b.equals(0) && x.Utils.isInt(r.x.power)) p = r.x.power - 1, f = x.Math2.factorial(p), s = A.divide(A.pow(E, new C(p)), new C(f)), g();
            else if (t.group === U && i.equals(1)) r.x.group === x.groups.PL && x.Algebra.degree(t).equals(2) ? (u2 = x.Algebra.sqComplete(t, n2), l2 = x.Utils.getU(t), h = x.Utils.decompose_fn(u2.a, n2, true).b, c = O.LaPlace.inverse(A.parse(`1/((${l2})^2+(${u2.c}))`), l2, E), s = A.multiply(c, A.parse(`(${d})*e^(-(${h})*(${E}))`))) : r.x.isLinear() && !e.contains(n2) ? (E = A.divide(E, r.a.clone()), s = A.parse(L("(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))", E, r.a, r.b, i, f = 0 === (p = i - 1) || 1 === p ? "1" : `(${i}-1)!`)), g()) : r.x.group === I && r.x.power.equals(2) && (e.contains(n2) ? (h = new C(1), e.group === _ && (o = new C(1), e.each(function(e2) {
              e2.contains(n2) ? o = A.multiply(o, e2) : h = A.multiply(h, e2);
            }), e = o), u2 = (a2 = x.Utils.decompose_fn(e, n2, true)).a, l2 = a2.b, c = u2.containsFunction("sin"), p = u2.containsFunction("cos"), f = l2.containsFunction("cos"), g = l2.containsFunction("sin"), a2.x.value === n2 && a2.x.isLinear() && !(c && f || p || g) ? s = A.parse(L("(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})", E, a2.a, r.a, r.b)) : c && f && (c = u2.findFunction("sin"), f = l2.findFunction("cos"), c.args[0].equals(f.args[0]) && !c.args[0].contains(n2) && (v = A.divide(l2, f.toUnitMultiplier()).toString(), f = c.args[0].toString(), m = r.b, c = A.divide(u2, c.toUnitMultiplier()), s = A.parse(L("(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))", E, h, v, f, m, c))))) : s = A.parse(L("(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))", E, e, r.a, r.b)));
            else if (r.x.power.num && r.x.power.num.equals(3) && r.x.power.den.equals(2) && e.contains("sqrt(pi)") && !e.contains(n2) && e.isLinear()) {
              var v = A.divide(e.clone(), A.parse("sqrt(pi)"));
              s = A.parse(L("(2*({2})*sqrt({0}))/({1})", E, r.a, v, e));
            } else if (i.equals(2) && r.x.power.equals(2)) if (e.contains(n2)) if ((a2 = x.Utils.decompose_fn(A.expand(e.clone()), n2, true)).x.isComposite()) {
              var w = [], y = e.collectSymbols(function(e2) {
                e2 = C.unwrapPARENS(e2);
                var t2 = x.Utils.decompose_fn(e2, n2, true);
                return t2.symbol = e2, t2;
              }).sort(function(e2, t2) {
                e2 = e2.x.value !== n2 ? 0 : e2.x.power;
                return (t2.x.value !== n2 ? 0 : t2.x.power) - e2;
              });
              h = new C(-1);
              for (var b = 0; b < y.length; b++) {
                var S = y[b];
                S.x.value === n2 ? w.push(S) : h = A.multiply(h, S.symbol);
              }
              w[0].x.power.equals(2) && w[1].x.power.equals(1) && w[1].b.equals(0) && !w[0].b.equals(0) && (v = w[0].a.negate(), s = A.parse(L("-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2", E, h, v, w[0].b, r.a, r.b)));
            } else a2.x.isLinear() ? (h = A.divide(a2.a, new C(2)), s = A.parse(L("(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))", E, h, r.a, r.b))) : a2.x.power.equals(2) && (s = a2.b.equals(0) ? (h = A.divide(a2.a, new C(2)), A.parse(L("(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2", E, h, r.a, r.b))) : (h = A.divide(a2.a, new C(2)), m = a2.b.negate(), A.parse(L("-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2", E, h, r.a, r.b, m))));
            else h = A.divide(e, new C(2)), s = A.parse(L("(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))", E, h, r.a, r.b));
            else M.isComposite() && (i.equals(2) && r.x.group === I ? s = A.parse(`(${d})*(${E})*e^(-(${r.b})*(${E}))`) : (s = new C(0), M.each(function(e2) {
              s = A.add(s, O.LaPlace.inverse(e2, N, E));
            }, true)));
          }
          return s = s || A.symfunction("ilt", [q, N, E]);
        }, true);
      } }, Statistics: { frequencyMap: function(e) {
        for (var t = {}, n2 = 0, r = e.length; n2 < r; n2++) {
          var i = e[n2].toString();
          t[i] || (t[i] = 0), t[i]++;
        }
        return t;
      }, sort: function(e) {
        return e.sort(function(e2, t) {
          return e2.isConstant() && t.isConstant() || A.error("Unable to sort! All values must be numeric"), e2.multiplier.subtract(t.multiplier);
        });
      }, count: function(e) {
        return new C(e.length);
      }, sum: function(e, t) {
        for (var n2 = new C(0), r = 0, i = e.length; r < i; r++) var s = e[r].clone(), n2 = t ? A.add(A.pow(A.subtract(s, t.clone()), new C(2)), n2) : A.add(s, n2);
        return n2;
      }, mean: function() {
        var e = [].slice.call(arguments);
        return a(e[0]) ? O.Statistics.mean.apply(this, e[0].elements) : A.divide(O.Statistics.sum(e), O.Statistics.count(e));
      }, median: function() {
        var t = [].slice.call(arguments);
        if (a(t[0])) return O.Statistics.median.apply(this, t[0].elements);
        try {
          var e, n2, r = O.Statistics.sort(t), i = t.length;
          n2 = x.Utils.even(i) ? (e = i / 2, O.Statistics.mean(r[e - 1], r[e])) : r[Math.floor(i / 2)];
        } catch (e2) {
          n2 = A.symfunction("median", t);
        }
        return n2;
      }, mode: function() {
        var e = [].slice.call(arguments);
        if (a(e[0])) return O.Statistics.mode.apply(this, e[0].elements);
        var t = O.Statistics.frequencyMap(e);
        if (1 === x.Utils.keys(t).length) o = e[0];
        else {
          var n2, r = {};
          for (n2 in t) {
            var i, s = t[n2];
            s in r ? (i = r[s], u(i) ? i.push(n2) : r[s] = [n2, r[s]]) : r[s] = n2;
          }
          var e = r[Math.max.apply(null, x.Utils.keys(r))], o = u(e) ? A.symfunction("mode", e.sort()) : A.parse(e);
        }
        return o;
      }, gVariance: function(e, t) {
        var n2 = O.Statistics.mean.apply(O.Statistics, t), n2 = O.Statistics.sum(t, n2);
        return A.multiply(e, n2);
      }, variance: function() {
        var e = [].slice.call(arguments);
        if (a(e[0])) return O.Statistics.variance.apply(this, e[0].elements);
        var t = A.divide(new C(1), O.Statistics.count(e));
        return O.Statistics.gVariance(t, e);
      }, sampleVariance: function() {
        var e = [].slice.call(arguments);
        if (a(e[0])) return O.Statistics.sampleVariance.apply(this, e[0].elements);
        var t = A.divide(new C(1), A.subtract(O.Statistics.count(e), new C(1)));
        return O.Statistics.gVariance(t, e);
      }, standardDeviation: function() {
        var e = [].slice.call(arguments);
        return a(e[0]) ? O.Statistics.standardDeviation.apply(this, e[0].elements) : A.pow(O.Statistics.variance.apply(O.Statistics, e), new C(0.5));
      }, sampleStandardDeviation: function() {
        var e = [].slice.call(arguments);
        return a(e[0]) ? O.Statistics.sampleStandardDeviation.apply(this, e[0].elements) : A.pow(O.Statistics.sampleVariance.apply(O.Statistics, e), new C(0.5));
      }, zScore: function(e, t, n2) {
        return A.divide(A.subtract(e, t), n2);
      } }, Units: { table: { foot: "12 inch", meter: "100 cm", decimeter: "10 cm" } } };
      nerdamer.register([{ name: "laplace", visible: true, numargs: 3, build: function() {
        return O.LaPlace.transform;
      } }, { name: "ilt", visible: true, numargs: 3, build: function() {
        return O.LaPlace.inverse;
      } }, { name: "mean", visible: true, numargs: -1, build: function() {
        return O.Statistics.mean;
      } }, { name: "median", visible: true, numargs: -1, build: function() {
        return O.Statistics.median;
      } }, { name: "mode", visible: true, numargs: -1, build: function() {
        return O.Statistics.mode;
      } }, { name: "smpvar", visible: true, numargs: -1, build: function() {
        return O.Statistics.sampleVariance;
      } }, { name: "variance", visible: true, numargs: -1, build: function() {
        return O.Statistics.variance;
      } }, { name: "smpstdev", visible: true, numargs: -1, build: function() {
        return O.Statistics.sampleStandardDeviation;
      } }, { name: "stdev", visible: true, numargs: -1, build: function() {
        return O.Statistics.standardDeviation;
      } }, { name: "zscore", visible: true, numargs: 3, build: function() {
        return O.Statistics.zScore;
      } }]), nerdamer.updateAPI();
    }(), "undefined" != typeof module && (module.exports = nerdamer);
  }
});
export default require_all_min();
//# sourceMappingURL=nerdamer_all__min.js.map
