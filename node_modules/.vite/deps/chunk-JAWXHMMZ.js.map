{
  "version": 3,
  "sources": ["../../nerdamer/nerdamer.core.js"],
  "sourcesContent": ["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};"],
  "mappings": ";;;;;AAAA;AAAA;AAcA,QAAI,WAAY,SAAU,SAAS;AAC/B;AAGA,UAAI,UAAU;AAGd,UAAI,IAAI,IAAI,OAAO;AAGnB,UAAI,SAAS,QAAQ;AACrB,UAAI,SAAS,QAAQ;AAGrB,aAAO,IAAI;AAAA,QACP,WAAW;AAAA,MACf,CAAC;AAED,UAAI,SAAS,CAAC;AAGd,UAAI,SAAS;AAAA,QAAC;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QACpH;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAC7H;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QACnH;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QACnH;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QACnH;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QACnH;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAClH;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAClH;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAClH;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AAAA,QAAM;AA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",
  "names": ["Symbol", "x", "a", "b", "term", "C", "even", "factor", "f", "tol", "maxdepth", "f2", "err", "obj", "str", "m", "c", "i", "p", "_", "sign", "operator_str", "L", "ch", "nroots", "w", "exp", "vector", "matrix", "preprocessors", "value", "l", "item", "v", "n", "token", "symbol", "group", "variables", "undefined", "self", "max", "min", "e", "t", "r", "s", "o", "u", "d", "g", "h", "N", "E", "M", "q", "O", "D", "F", "A", "S", "Z", "R", "T", "U"]
}
